
Anti_Thieves_Lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  080079e0  080079e0  000179e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d8  080080d8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080080d8  080080d8  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080d8  080080d8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080080e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e8  080082c8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080082c8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acb4  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bb  00000000  00000000  0002aec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0002cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001862e  00000000  00000000  0002de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094c8  00000000  00000000  000464a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084163  00000000  00000000  0004f96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3ad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033fc  00000000  00000000  000d3b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080079c4 	.word	0x080079c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080079c4 	.word	0x080079c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <__aeabi_d2lz>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	460c      	mov	r4, r1
 8001024:	4605      	mov	r5, r0
 8001026:	4621      	mov	r1, r4
 8001028:	4628      	mov	r0, r5
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x20>
 8001034:	4628      	mov	r0, r5
 8001036:	4621      	mov	r1, r4
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4628      	mov	r0, r5
 8001042:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fce9 	bl	8000a38 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fcda 	bl	8000a38 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <reverse>:
 */

#include "Float_String_Convert.h"

void reverse(char* str, int len)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80010a4:	e018      	b.n	80010d8 <reverse+0x48>
        temp = str[i];
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	441a      	add	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	440b      	add	r3, r1
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
        i++;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3301      	adds	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
        j--;
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbe2      	blt.n	80010a6 <reverse+0x16>
    }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <int_to_string>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int int_to_string(int x, char str[], int d)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
    int i = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
    while (x) {
 80010fc:	e01d      	b.n	800113a <int_to_string+0x4e>
        str[i++] = (x % 10) + '0';
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <int_to_string+0x8c>)
 8001102:	fb83 1302 	smull	r1, r3, r3, r2
 8001106:	1099      	asrs	r1, r3, #2
 8001108:	17d3      	asrs	r3, r2, #31
 800110a:	1ac9      	subs	r1, r1, r3
 800110c:	460b      	mov	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	1ad1      	subs	r1, r2, r3
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	1c59      	adds	r1, r3, #1
 800111c:	6179      	str	r1, [r7, #20]
 800111e:	4619      	mov	r1, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	440b      	add	r3, r1
 8001124:	3230      	adds	r2, #48	; 0x30
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <int_to_string+0x8c>)
 800112e:	fb82 1203 	smull	r1, r2, r2, r3
 8001132:	1092      	asrs	r2, r2, #2
 8001134:	17db      	asrs	r3, r3, #31
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	60fb      	str	r3, [r7, #12]
    while (x) {
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1de      	bne.n	80010fe <int_to_string+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001140:	e007      	b.n	8001152 <int_to_string+0x66>
        str[i++] = '0';
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	617a      	str	r2, [r7, #20]
 8001148:	461a      	mov	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	4413      	add	r3, r2
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	dbf3      	blt.n	8001142 <int_to_string+0x56>

    reverse(str, i);
 800115a:	6979      	ldr	r1, [r7, #20]
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff ff97 	bl	8001090 <reverse>
    str[i] = '\0';
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	4413      	add	r3, r2
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
    return i;
 800116c:	697b      	ldr	r3, [r7, #20]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	66666667 	.word	0x66666667

0800117c <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff ff23 	bl	8000fd4 <__aeabi_f2iz>
 800118e:	4603      	mov	r3, r0
 8001190:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001192:	69f8      	ldr	r0, [r7, #28]
 8001194:	f7ff fd7a 	bl	8000c8c <__aeabi_i2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fcbf 	bl	8000b20 <__aeabi_fsub>
 80011a2:	4603      	mov	r3, r0
 80011a4:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = int_to_string(ipart, res, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	69f8      	ldr	r0, [r7, #28]
 80011ac:	f7ff ff9e 	bl	80010ec <int_to_string>
 80011b0:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d02c      	beq.n	8001212 <ftoa+0x96>
        res[i] = '.'; // add dot
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	222e      	movs	r2, #46	; 0x2e
 80011c0:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff f930 	bl	8000428 <__aeabi_f2d>
 80011c8:	4604      	mov	r4, r0
 80011ca:	460d      	mov	r5, r1
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff f919 	bl	8000404 <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	f04f 0000 	mov.w	r0, #0
 80011da:	4910      	ldr	r1, [pc, #64]	; (800121c <ftoa+0xa0>)
 80011dc:	f005 fc68 	bl	8006ab0 <pow>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f976 	bl	80004d8 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc40 	bl	8000a78 <__aeabi_d2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]

        int_to_string((int)fpart, res + i + 1, afterpoint);
 80011fc:	69b8      	ldr	r0, [r7, #24]
 80011fe:	f7ff fee9 	bl	8000fd4 <__aeabi_f2iz>
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff ff6d 	bl	80010ec <int_to_string>
    }
}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bdb0      	pop	{r4, r5, r7, pc}
 800121a:	bf00      	nop
 800121c:	40240000 	.word	0x40240000

08001220 <convert>:

#include "ST47_Neo6M.h"
GPS_Struct gps;
extern bool flag;
float convert(float location)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	 float degrees = floor(location / 100);
 8001228:	4922      	ldr	r1, [pc, #136]	; (80012b4 <convert+0x94>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fe36 	bl	8000e9c <__aeabi_fdiv>
 8001230:	4603      	mov	r3, r0
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8f8 	bl	8000428 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f005 fbb6 	bl	80069b0 <floor>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fc14 	bl	8000a78 <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	617b      	str	r3, [r7, #20]
	 double minutes = location - (100 * degrees);
 8001254:	4917      	ldr	r1, [pc, #92]	; (80012b4 <convert+0x94>)
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff fd6c 	bl	8000d34 <__aeabi_fmul>
 800125c:	4603      	mov	r3, r0
 800125e:	4619      	mov	r1, r3
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fc5d 	bl	8000b20 <__aeabi_fsub>
 8001266:	4603      	mov	r3, r0
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	e9c7 2302 	strd	r2, r3, [r7, #8]
	 minutes /= 60;
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <convert+0x98>)
 800127c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001280:	f7ff fa54 	bl	800072c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 2302 	strd	r2, r3, [r7, #8]
	 degrees += minutes;
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f7ff f8cb 	bl	8000428 <__aeabi_f2d>
 8001292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001296:	f7fe ff69 	bl	800016c <__adddf3>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff fbe9 	bl	8000a78 <__aeabi_d2f>
 80012a6:	4603      	mov	r3, r0
 80012a8:	617b      	str	r3, [r7, #20]
	 return degrees;
 80012aa:	697b      	ldr	r3, [r7, #20]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	404e0000 	.word	0x404e0000

080012bc <gps_init>:

void gps_init()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	gps.index = 0;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <gps_init+0x18>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	715a      	strb	r2, [r3, #5]
	HAL_UART_Receive_IT(&huart1, &gps.rx, 1);
 80012c6:	2201      	movs	r2, #1
 80012c8:	4903      	ldr	r1, [pc, #12]	; (80012d8 <gps_init+0x1c>)
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <gps_init+0x20>)
 80012cc:	f001 ff3e 	bl	800314c <HAL_UART_Receive_IT>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000021c 	.word	0x2000021c
 80012d8:	20000220 	.word	0x20000220
 80012dc:	20000338 	.word	0x20000338

080012e0 <gps_callback>:

void gps_callback()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	if(gps.rx == '\n')
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <gps_callback+0x44>)
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	2b0a      	cmp	r3, #10
 80012ea:	d107      	bne.n	80012fc <gps_callback+0x1c>
	{
		gps.flag = true;
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <gps_callback+0x44>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		gps.index = 0;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <gps_callback+0x44>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	715a      	strb	r2, [r3, #5]
 80012fa:	e00b      	b.n	8001314 <gps_callback+0x34>
	}
	else gps.buffer[gps.index ++] = gps.rx;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <gps_callback+0x44>)
 80012fe:	795b      	ldrb	r3, [r3, #5]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	b2d1      	uxtb	r1, r2
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <gps_callback+0x44>)
 8001306:	7151      	strb	r1, [r2, #5]
 8001308:	4619      	mov	r1, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <gps_callback+0x44>)
 800130c:	791a      	ldrb	r2, [r3, #4]
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <gps_callback+0x44>)
 8001310:	440b      	add	r3, r1
 8001312:	719a      	strb	r2, [r3, #6]
	HAL_UART_Receive_IT(&huart1, &gps.rx, 1);
 8001314:	2201      	movs	r2, #1
 8001316:	4904      	ldr	r1, [pc, #16]	; (8001328 <gps_callback+0x48>)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <gps_callback+0x4c>)
 800131a:	f001 ff17 	bl	800314c <HAL_UART_Receive_IT>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000021c 	.word	0x2000021c
 8001328:	20000220 	.word	0x20000220
 800132c:	20000338 	.word	0x20000338

08001330 <gps_process_data>:
//		gps.flag = false;
//	}
//}

void gps_process_data(char* buffer)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	flag = false;
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <gps_process_data+0xcc>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
	if(gps.flag == true)
 800133e:	4b30      	ldr	r3, [pc, #192]	; (8001400 <gps_process_data+0xd0>)
 8001340:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001344:	2b00      	cmp	r3, #0
 8001346:	d055      	beq.n	80013f4 <gps_process_data+0xc4>
	{
//		HAL_UART_Transmit(&debug, gps.buffer, sizeof(gps.buffer), 2000);
		char* response = malloc(strlen(gps.buffer) + 1);
 8001348:	482e      	ldr	r0, [pc, #184]	; (8001404 <gps_process_data+0xd4>)
 800134a:	f7fe ff01 	bl	8000150 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	3301      	adds	r3, #1
 8001352:	4618      	mov	r0, r3
 8001354:	f002 fa7e 	bl	8003854 <malloc>
 8001358:	4603      	mov	r3, r0
 800135a:	60fb      	str	r3, [r7, #12]
		strcpy(response, gps.buffer);
 800135c:	4929      	ldr	r1, [pc, #164]	; (8001404 <gps_process_data+0xd4>)
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f002 fb66 	bl	8003a30 <strcpy>
		if(response != NULL)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03d      	beq.n	80013e6 <gps_process_data+0xb6>
		{
			char* token = strtok(response, ",");
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <gps_process_data+0xd8>)
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f003 f99f 	bl	80046b0 <strtok>
 8001372:	60b8      	str	r0, [r7, #8]
			strcpy(gps.gpgga.time, strtok(NULL, ","));
 8001374:	4924      	ldr	r1, [pc, #144]	; (8001408 <gps_process_data+0xd8>)
 8001376:	2000      	movs	r0, #0
 8001378:	f003 f99a 	bl	80046b0 <strtok>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	4822      	ldr	r0, [pc, #136]	; (800140c <gps_process_data+0xdc>)
 8001382:	f002 fb55 	bl	8003a30 <strcpy>
			gps.gpgga.latitude = atof(strtok(NULL, ","));
 8001386:	4920      	ldr	r1, [pc, #128]	; (8001408 <gps_process_data+0xd8>)
 8001388:	2000      	movs	r0, #0
 800138a:	f003 f991 	bl	80046b0 <strtok>
 800138e:	4603      	mov	r3, r0
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fa31 	bl	80037f8 <atof>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fb6b 	bl	8000a78 <__aeabi_d2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a16      	ldr	r2, [pc, #88]	; (8001400 <gps_process_data+0xd0>)
 80013a6:	63d3      	str	r3, [r2, #60]	; 0x3c
			gps.gpgga.ns_indicator = strtok(NULL, ",");
 80013a8:	4917      	ldr	r1, [pc, #92]	; (8001408 <gps_process_data+0xd8>)
 80013aa:	2000      	movs	r0, #0
 80013ac:	f003 f980 	bl	80046b0 <strtok>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <gps_process_data+0xd0>)
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
			gps.gpgga.longtitude = atof(strtok(NULL, ","));
 80013b6:	4914      	ldr	r1, [pc, #80]	; (8001408 <gps_process_data+0xd8>)
 80013b8:	2000      	movs	r0, #0
 80013ba:	f003 f979 	bl	80046b0 <strtok>
 80013be:	4603      	mov	r3, r0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fa19 	bl	80037f8 <atof>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fb53 	bl	8000a78 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <gps_process_data+0xd0>)
 80013d6:	6453      	str	r3, [r2, #68]	; 0x44
			gps.gpgga.ew_indicator = strtok(NULL, ",");
 80013d8:	490b      	ldr	r1, [pc, #44]	; (8001408 <gps_process_data+0xd8>)
 80013da:	2000      	movs	r0, #0
 80013dc:	f003 f968 	bl	80046b0 <strtok>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <gps_process_data+0xd0>)
 80013e4:	6493      	str	r3, [r2, #72]	; 0x48
		}
		free(response);
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f002 fa3c 	bl	8003864 <free>
		gps.flag = false;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <gps_process_data+0xd0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	}
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	2000021c 	.word	0x2000021c
 8001404:	20000222 	.word	0x20000222
 8001408:	080079e0 	.word	0x080079e0
 800140c:	2000024c 	.word	0x2000024c

08001410 <gps_get_latitude>:

float gps_get_latitude()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	return convert(gps.gpgga.latitude);
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <gps_get_latitude+0x14>)
 8001416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff01 	bl	8001220 <convert>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000021c 	.word	0x2000021c

08001428 <gps_get_longitude>:

float gps_get_longitude()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	return convert(gps.gpgga.longtitude);
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <gps_get_longitude+0x14>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fef5 	bl	8001220 <convert>
 8001436:	4603      	mov	r3, r0
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000021c 	.word	0x2000021c

08001440 <simcom_delete_buffer>:
Simcom_Struct simcom;
char json_test[100];

extern bool flag;
void simcom_delete_buffer(char* buffer)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	simcom.at_cmd.index = 0;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <simcom_delete_buffer+0x38>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for(int i=0; i<SIMCOM_RESPONSE_MAX_SIZE;i++)
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e007      	b.n	8001466 <simcom_delete_buffer+0x26>
	{
		buffer[i] = 0;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<SIMCOM_RESPONSE_MAX_SIZE;i++)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b27      	cmp	r3, #39	; 0x27
 800146a:	ddf4      	ble.n	8001456 <simcom_delete_buffer+0x16>
	}
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000268 	.word	0x20000268

0800147c <simcom_at_command>:

uint8_t simcom_at_command(char* command, char* response, uint32_t timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
	uint8_t status = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	77fb      	strb	r3, [r7, #31]
	uint8_t received_byte[1];
	simcom_delete_buffer((char*)simcom.at_cmd.response);
 800148c:	483f      	ldr	r0, [pc, #252]	; (800158c <simcom_at_command+0x110>)
 800148e:	f7ff ffd7 	bl	8001440 <simcom_delete_buffer>
	uint32_t time_out_transmit = HAL_GetTick();
 8001492:	f000 fd75 	bl	8001f80 <HAL_GetTick>
 8001496:	61b8      	str	r0, [r7, #24]
	uint32_t time_out_get_response = HAL_GetTick();
 8001498:	f000 fd72 	bl	8001f80 <HAL_GetTick>
 800149c:	6178      	str	r0, [r7, #20]

	HAL_UART_Transmit(&huart3, (uint8_t*)command, strlen(command), 1000);
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7fe fe56 	bl	8000150 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ac:	68f9      	ldr	r1, [r7, #12]
 80014ae:	4838      	ldr	r0, [pc, #224]	; (8001590 <simcom_at_command+0x114>)
 80014b0:	f001 fd1b 	bl	8002eea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", strlen("\r\n"), 1000);
 80014b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b8:	2202      	movs	r2, #2
 80014ba:	4936      	ldr	r1, [pc, #216]	; (8001594 <simcom_at_command+0x118>)
 80014bc:	4834      	ldr	r0, [pc, #208]	; (8001590 <simcom_at_command+0x114>)
 80014be:	f001 fd14 	bl	8002eea <HAL_UART_Transmit>

	while(status == 0)
 80014c2:	e05b      	b.n	800157c <simcom_at_command+0x100>
	{
		while(HAL_UART_Receive(&huart3, received_byte, 1, 1000) != HAL_OK)
		{
			if(HAL_GetTick() - time_out_transmit > timeout)
 80014c4:	f000 fd5c 	bl	8001f80 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d201      	bcs.n	80014d8 <simcom_at_command+0x5c>
			{
				return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e055      	b.n	8001584 <simcom_at_command+0x108>
		while(HAL_UART_Receive(&huart3, received_byte, 1, 1000) != HAL_OK)
 80014d8:	f107 0110 	add.w	r1, r7, #16
 80014dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e0:	2201      	movs	r2, #1
 80014e2:	482b      	ldr	r0, [pc, #172]	; (8001590 <simcom_at_command+0x114>)
 80014e4:	f001 fd93 	bl	800300e <HAL_UART_Receive>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ea      	bne.n	80014c4 <simcom_at_command+0x48>
			}
		}
		time_out_transmit = HAL_GetTick();
 80014ee:	f000 fd47 	bl	8001f80 <HAL_GetTick>
 80014f2:	61b8      	str	r0, [r7, #24]
		simcom.at_cmd.response[simcom.at_cmd.index++] = received_byte[0];
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <simcom_at_command+0x110>)
 80014f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	b2d1      	uxtb	r1, r2
 80014fe:	4a23      	ldr	r2, [pc, #140]	; (800158c <simcom_at_command+0x110>)
 8001500:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
 8001504:	461a      	mov	r2, r3
 8001506:	7c39      	ldrb	r1, [r7, #16]
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <simcom_at_command+0x110>)
 800150a:	5499      	strb	r1, [r3, r2]
		while(HAL_GetTick() - time_out_transmit < timeout)
 800150c:	e02e      	b.n	800156c <simcom_at_command+0xf0>
		{
			if(HAL_UART_Receive(&huart3, received_byte, 1, 1000) == HAL_OK)
 800150e:	f107 0110 	add.w	r1, r7, #16
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	2201      	movs	r2, #1
 8001518:	481d      	ldr	r0, [pc, #116]	; (8001590 <simcom_at_command+0x114>)
 800151a:	f001 fd78 	bl	800300e <HAL_UART_Receive>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10f      	bne.n	8001544 <simcom_at_command+0xc8>
			{
				simcom.at_cmd.response[simcom.at_cmd.index++] = received_byte[0];
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <simcom_at_command+0x110>)
 8001526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	b2d1      	uxtb	r1, r2
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <simcom_at_command+0x110>)
 8001530:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
 8001534:	461a      	mov	r2, r3
 8001536:	7c39      	ldrb	r1, [r7, #16]
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <simcom_at_command+0x110>)
 800153a:	5499      	strb	r1, [r3, r2]
				time_out_get_response = HAL_GetTick();
 800153c:	f000 fd20 	bl	8001f80 <HAL_GetTick>
 8001540:	6178      	str	r0, [r7, #20]
 8001542:	e013      	b.n	800156c <simcom_at_command+0xf0>
			}
			else
			{
				if(HAL_GetTick() - time_out_get_response > 100)
 8001544:	f000 fd1c 	bl	8001f80 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d90c      	bls.n	800156c <simcom_at_command+0xf0>
				{
					if(strstr((char*)simcom.at_cmd.response,response) != NULL)
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <simcom_at_command+0x110>)
 8001556:	f002 fa73 	bl	8003a40 <strstr>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <simcom_at_command+0xea>
					{
						status = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	77fb      	strb	r3, [r7, #31]
 8001564:	e00a      	b.n	800157c <simcom_at_command+0x100>
					}
					else
					{
						status = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	77fb      	strb	r3, [r7, #31]
					}
					break;
 800156a:	e007      	b.n	800157c <simcom_at_command+0x100>
		while(HAL_GetTick() - time_out_transmit < timeout)
 800156c:	f000 fd08 	bl	8001f80 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8c8      	bhi.n	800150e <simcom_at_command+0x92>
	while(status == 0)
 800157c:	7ffb      	ldrb	r3, [r7, #31]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0aa      	beq.n	80014d8 <simcom_at_command+0x5c>
				}
			}
		}
	}
	return status;
 8001582:	7ffb      	ldrb	r3, [r7, #31]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000268 	.word	0x20000268
 8001590:	200002f8 	.word	0x200002f8
 8001594:	080079e4 	.word	0x080079e4

08001598 <simcom_init>:

void simcom_init()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	simcom_at_command("AT", "OK", 1000);
 800159c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <simcom_init+0x3c>)
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <simcom_init+0x40>)
 80015a4:	f7ff ff6a 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 80015a8:	2064      	movs	r0, #100	; 0x64
 80015aa:	f000 fcf3 	bl	8001f94 <HAL_Delay>
	simcom_at_command("ATE0", "OK", 1000);
 80015ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <simcom_init+0x3c>)
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <simcom_init+0x44>)
 80015b6:	f7ff ff61 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 80015ba:	2064      	movs	r0, #100	; 0x64
 80015bc:	f000 fcea 	bl	8001f94 <HAL_Delay>
	simcom_gprs_http_end();
 80015c0:	f000 f870 	bl	80016a4 <simcom_gprs_http_end>
	simcom_gprs_end();
 80015c4:	f000 f880 	bl	80016c8 <simcom_gprs_end>
	simcom_gprs_start();
 80015c8:	f000 f80a 	bl	80015e0 <simcom_gprs_start>
	simcom_gprs_http_start();
 80015cc:	f000 f83c 	bl	8001648 <simcom_gprs_http_start>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	080079e8 	.word	0x080079e8
 80015d8:	080079ec 	.word	0x080079ec
 80015dc:	080079f0 	.word	0x080079f0

080015e0 <simcom_gprs_start>:

void simcom_gprs_start()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	simcom_at_command("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"", "OK", 3000);
 80015e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015e8:	4911      	ldr	r1, [pc, #68]	; (8001630 <simcom_gprs_start+0x50>)
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <simcom_gprs_start+0x54>)
 80015ec:	f7ff ff46 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 80015f0:	2064      	movs	r0, #100	; 0x64
 80015f2:	f000 fccf 	bl	8001f94 <HAL_Delay>

	simcom_at_command("AT+SAPBR=3,1,\"APN\",\"v-internet\"", "OK", 3000);
 80015f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <simcom_gprs_start+0x50>)
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <simcom_gprs_start+0x58>)
 80015fe:	f7ff ff3d 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 8001602:	2064      	movs	r0, #100	; 0x64
 8001604:	f000 fcc6 	bl	8001f94 <HAL_Delay>

	simcom_at_command("AT+SAPBR=1,1", "OK", 3000);
 8001608:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800160c:	4908      	ldr	r1, [pc, #32]	; (8001630 <simcom_gprs_start+0x50>)
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <simcom_gprs_start+0x5c>)
 8001610:	f7ff ff34 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 8001614:	2064      	movs	r0, #100	; 0x64
 8001616:	f000 fcbd 	bl	8001f94 <HAL_Delay>

	simcom_at_command("AT+SAPBR=2,1", "+SAPBR:", 3000);
 800161a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <simcom_gprs_start+0x60>)
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <simcom_gprs_start+0x64>)
 8001622:	f7ff ff2b 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 8001626:	2064      	movs	r0, #100	; 0x64
 8001628:	f000 fcb4 	bl	8001f94 <HAL_Delay>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	080079e8 	.word	0x080079e8
 8001634:	080079f8 	.word	0x080079f8
 8001638:	08007a18 	.word	0x08007a18
 800163c:	08007a38 	.word	0x08007a38
 8001640:	08007a48 	.word	0x08007a48
 8001644:	08007a50 	.word	0x08007a50

08001648 <simcom_gprs_http_start>:

void simcom_gprs_http_start()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	simcom_at_command("AT+HTTPINIT", "OK", 3000);
 800164c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001650:	4908      	ldr	r1, [pc, #32]	; (8001674 <simcom_gprs_http_start+0x2c>)
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <simcom_gprs_http_start+0x30>)
 8001654:	f7ff ff12 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f000 fc9b 	bl	8001f94 <HAL_Delay>

	simcom_at_command("AT+HTTPPARA=\"CID\",1", "OK", 3000);
 800165e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001662:	4904      	ldr	r1, [pc, #16]	; (8001674 <simcom_gprs_http_start+0x2c>)
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <simcom_gprs_http_start+0x34>)
 8001666:	f7ff ff09 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 800166a:	2064      	movs	r0, #100	; 0x64
 800166c:	f000 fc92 	bl	8001f94 <HAL_Delay>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	080079e8 	.word	0x080079e8
 8001678:	08007a60 	.word	0x08007a60
 800167c:	08007a6c 	.word	0x08007a6c

08001680 <simcom_gprs_http_set_ssl>:

void simcom_gprs_http_set_ssl()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	simcom_at_command("AT+HTTPSSL=1", "OK", 1000);
 8001684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001688:	4904      	ldr	r1, [pc, #16]	; (800169c <simcom_gprs_http_set_ssl+0x1c>)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <simcom_gprs_http_set_ssl+0x20>)
 800168c:	f7ff fef6 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f000 fc7f 	bl	8001f94 <HAL_Delay>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	080079e8 	.word	0x080079e8
 80016a0:	08007a80 	.word	0x08007a80

080016a4 <simcom_gprs_http_end>:

void simcom_gprs_http_end()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	simcom_at_command("AT+HTTPTERM", "OK", 3000);
 80016a8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016ac:	4904      	ldr	r1, [pc, #16]	; (80016c0 <simcom_gprs_http_end+0x1c>)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <simcom_gprs_http_end+0x20>)
 80016b0:	f7ff fee4 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 80016b4:	2064      	movs	r0, #100	; 0x64
 80016b6:	f000 fc6d 	bl	8001f94 <HAL_Delay>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	080079e8 	.word	0x080079e8
 80016c4:	08007a90 	.word	0x08007a90

080016c8 <simcom_gprs_end>:

void simcom_gprs_end()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	simcom_at_command("AT+SAPBR=0,1", "OK", 3000);
 80016cc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016d0:	4904      	ldr	r1, [pc, #16]	; (80016e4 <simcom_gprs_end+0x1c>)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <simcom_gprs_end+0x20>)
 80016d4:	f7ff fed2 	bl	800147c <simcom_at_command>
	HAL_Delay(100);
 80016d8:	2064      	movs	r0, #100	; 0x64
 80016da:	f000 fc5b 	bl	8001f94 <HAL_Delay>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	080079e8 	.word	0x080079e8
 80016e8:	08007a9c 	.word	0x08007a9c

080016ec <firebase_update>:

void firebase_update(float data1, float data2)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	simcom_at_command("AT+HTTPPARA=\"URL\",\"https://key-gps-tracking-default-rtdb.firebaseio.com/id.json?x-http-method-override=PATCH\"", "OK", 1000);
 80016f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016fa:	492d      	ldr	r1, [pc, #180]	; (80017b0 <firebase_update+0xc4>)
 80016fc:	482d      	ldr	r0, [pc, #180]	; (80017b4 <firebase_update+0xc8>)
 80016fe:	f7ff febd 	bl	800147c <simcom_at_command>
	HAL_Delay(500);
 8001702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001706:	f000 fc45 	bl	8001f94 <HAL_Delay>

	simcom_at_command("AT+HTTPPARA=\"CONTENT\",\"application/json\"", "OK", 1000);
 800170a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800170e:	4928      	ldr	r1, [pc, #160]	; (80017b0 <firebase_update+0xc4>)
 8001710:	4829      	ldr	r0, [pc, #164]	; (80017b8 <firebase_update+0xcc>)
 8001712:	f7ff feb3 	bl	800147c <simcom_at_command>
	HAL_Delay(500);
 8001716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800171a:	f000 fc3b 	bl	8001f94 <HAL_Delay>

	simcom_at_command("AT+HTTPDATA=100,10000", "DOWNLOAD", 1000);
 800171e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001722:	4926      	ldr	r1, [pc, #152]	; (80017bc <firebase_update+0xd0>)
 8001724:	4826      	ldr	r0, [pc, #152]	; (80017c0 <firebase_update+0xd4>)
 8001726:	f7ff fea9 	bl	800147c <simcom_at_command>
	HAL_Delay(500);
 800172a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800172e:	f000 fc31 	bl	8001f94 <HAL_Delay>

	char* json = malloc(80);
 8001732:	2050      	movs	r0, #80	; 0x50
 8001734:	f002 f88e 	bl	8003854 <malloc>
 8001738:	4603      	mov	r3, r0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
	char lat[10],lng[10];
	ftoa(data1,lat,4);
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	2204      	movs	r2, #4
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fd19 	bl	800117c <ftoa>
	ftoa(data2, lng, 4);
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2204      	movs	r2, #4
 8001750:	4619      	mov	r1, r3
 8001752:	6838      	ldr	r0, [r7, #0]
 8001754:	f7ff fd12 	bl	800117c <ftoa>
	sprintf(json, "{\"user\":\"HdN5SFXjEEamZksgFDpN2joyMAh66IfoBtmgRRYO\",\"lat\":\"%s\",\"lng\":\"%s\"}", lat, lng); // @suppress("Float formatting support")
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	f107 0218 	add.w	r2, r7, #24
 8001760:	4918      	ldr	r1, [pc, #96]	; (80017c4 <firebase_update+0xd8>)
 8001762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001764:	f002 f944 	bl	80039f0 <siprintf>
	strcpy(json_test, json);
 8001768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800176a:	4817      	ldr	r0, [pc, #92]	; (80017c8 <firebase_update+0xdc>)
 800176c:	f002 f960 	bl	8003a30 <strcpy>
	if(simcom_at_command(json, "OK", 10000) == 1)
 8001770:	f242 7210 	movw	r2, #10000	; 0x2710
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <firebase_update+0xc4>)
 8001776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001778:	f7ff fe80 	bl	800147c <simcom_at_command>
 800177c:	4603      	mov	r3, r0
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10e      	bne.n	80017a0 <firebase_update+0xb4>
	{
		simcom_gprs_http_set_ssl();
 8001782:	f7ff ff7d 	bl	8001680 <simcom_gprs_http_set_ssl>

		simcom_at_command("AT+HTTPACTION=1", "+HTTPACTION:", 1000);
 8001786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800178a:	4910      	ldr	r1, [pc, #64]	; (80017cc <firebase_update+0xe0>)
 800178c:	4810      	ldr	r0, [pc, #64]	; (80017d0 <firebase_update+0xe4>)
 800178e:	f7ff fe75 	bl	800147c <simcom_at_command>
		HAL_Delay(1000);
 8001792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001796:	f000 fbfd 	bl	8001f94 <HAL_Delay>
		free(json);
 800179a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800179c:	f002 f862 	bl	8003864 <free>
	}
	flag = true;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <firebase_update+0xe8>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	080079e8 	.word	0x080079e8
 80017b4:	08007aac 	.word	0x08007aac
 80017b8:	08007b1c 	.word	0x08007b1c
 80017bc:	08007b48 	.word	0x08007b48
 80017c0:	08007b54 	.word	0x08007b54
 80017c4:	08007b6c 	.word	0x08007b6c
 80017c8:	20000294 	.word	0x20000294
 80017cc:	08007bb8 	.word	0x08007bb8
 80017d0:	08007bc8 	.word	0x08007bc8
 80017d4:	20000000 	.word	0x20000000

080017d8 <HAL_UART_RxCpltCallback>:
uint32_t time_get_gps = 0;
float my_lat = 0, my_long = 0;
extern GPS_Struct gps;
bool flag = true;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1 && flag == true)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_UART_RxCpltCallback+0x28>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d105      	bne.n	80017f6 <HAL_UART_RxCpltCallback+0x1e>
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_UART_RxCpltCallback+0x2c>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_UART_RxCpltCallback+0x1e>
	{
		gps_callback();
 80017f2:	f7ff fd75 	bl	80012e0 <gps_callback>
	}
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40013800 	.word	0x40013800
 8001804:	20000000 	.word	0x20000000

08001808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180c:	f000 fb60 	bl	8001ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001810:	f000 f83a 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001814:	f000 f8f2 	bl	80019fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001818:	f000 f872 	bl	8001900 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800181c:	f000 f89a 	bl	8001954 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001820:	f000 f8c2 	bl	80019a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  simcom_init();
 8001824:	f7ff feb8 	bl	8001598 <simcom_init>
  gps_init();
 8001828:	f7ff fd48 	bl	80012bc <gps_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - time_get_gps > 20000)
 800182c:	f000 fba8 	bl	8001f80 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <main+0x70>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f644 6220 	movw	r2, #20000	; 0x4e20
 800183c:	4293      	cmp	r3, r2
 800183e:	d9f5      	bls.n	800182c <main+0x24>
	  {
		  time_get_gps = HAL_GetTick();
 8001840:	f000 fb9e 	bl	8001f80 <HAL_GetTick>
 8001844:	4603      	mov	r3, r0
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <main+0x70>)
 8001848:	6013      	str	r3, [r2, #0]
		  gps_process_data(gps.buffer);
 800184a:	480c      	ldr	r0, [pc, #48]	; (800187c <main+0x74>)
 800184c:	f7ff fd70 	bl	8001330 <gps_process_data>
		  my_lat = gps_get_latitude();
 8001850:	f7ff fdde 	bl	8001410 <gps_get_latitude>
 8001854:	4603      	mov	r3, r0
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <main+0x78>)
 8001858:	6013      	str	r3, [r2, #0]
		  my_long = gps_get_longitude();
 800185a:	f7ff fde5 	bl	8001428 <gps_get_longitude>
 800185e:	4603      	mov	r3, r0
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <main+0x7c>)
 8001862:	6013      	str	r3, [r2, #0]
		  firebase_update(my_lat,my_long);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <main+0x78>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <main+0x7c>)
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff3c 	bl	80016ec <firebase_update>
	  if(HAL_GetTick() - time_get_gps > 20000)
 8001874:	e7da      	b.n	800182c <main+0x24>
 8001876:	bf00      	nop
 8001878:	20000204 	.word	0x20000204
 800187c:	20000222 	.word	0x20000222
 8001880:	20000208 	.word	0x20000208
 8001884:	2000020c 	.word	0x2000020c

08001888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	; 0x40
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	2228      	movs	r2, #40	; 0x28
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f001 ffec 	bl	8003874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ae:	2301      	movs	r3, #1
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b2:	2310      	movs	r3, #16
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 feac 	bl	800261c <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80018ca:	f000 f8e3 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f918 	bl	8002b1c <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018f2:	f000 f8cf 	bl	8001a94 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3740      	adds	r7, #64	; 0x40
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART1_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800190c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001938:	f001 fa8a 	bl	8002e50 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f000 f8a7 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000338 	.word	0x20000338
 8001950:	40013800 	.word	0x40013800

08001954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_USART2_UART_Init+0x50>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800198c:	f001 fa60 	bl	8002e50 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001996:	f000 f87d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000378 	.word	0x20000378
 80019a4:	40004400 	.word	0x40004400

080019a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <MX_USART3_UART_Init+0x50>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019e0:	f001 fa36 	bl	8002e50 <HAL_UART_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ea:	f000 f853 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200002f8 	.word	0x200002f8
 80019f8:	40004800 	.word	0x40004800

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_GPIO_Init+0x90>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5e:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_GPIO_Init+0x94>)
 8001a60:	f000 fdc4 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_GPIO_Init+0x94>)
 8001a7e:	f000 fc31 	bl	80022e4 <HAL_GPIO_Init>

}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40011000 	.word	0x40011000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_MspInit+0x5c>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a14      	ldr	r2, [pc, #80]	; (8001afc <HAL_MspInit+0x5c>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6193      	str	r3, [r2, #24]
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_MspInit+0x5c>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_MspInit+0x5c>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_MspInit+0x5c>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_MspInit+0x5c>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_MspInit+0x60>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_MspInit+0x60>)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0320 	add.w	r3, r7, #32
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a57      	ldr	r2, [pc, #348]	; (8001c7c <HAL_UART_MspInit+0x178>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d13a      	bne.n	8001b9a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b24:	4b56      	ldr	r3, [pc, #344]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a55      	ldr	r2, [pc, #340]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	4619      	mov	r1, r3
 8001b68:	4846      	ldr	r0, [pc, #280]	; (8001c84 <HAL_UART_MspInit+0x180>)
 8001b6a:	f000 fbbb 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4619      	mov	r1, r3
 8001b82:	4840      	ldr	r0, [pc, #256]	; (8001c84 <HAL_UART_MspInit+0x180>)
 8001b84:	f000 fbae 	bl	80022e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	2025      	movs	r0, #37	; 0x25
 8001b8e:	f000 fafc 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b92:	2025      	movs	r0, #37	; 0x25
 8001b94:	f000 fb15 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b98:	e06c      	b.n	8001c74 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <HAL_UART_MspInit+0x184>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d130      	bne.n	8001c06 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	4a35      	ldr	r2, [pc, #212]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bae:	61d3      	str	r3, [r2, #28]
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	4619      	mov	r1, r3
 8001be6:	4827      	ldr	r0, [pc, #156]	; (8001c84 <HAL_UART_MspInit+0x180>)
 8001be8:	f000 fb7c 	bl	80022e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8001bec:	2308      	movs	r3, #8
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4821      	ldr	r0, [pc, #132]	; (8001c84 <HAL_UART_MspInit+0x180>)
 8001c00:	f000 fb70 	bl	80022e4 <HAL_GPIO_Init>
}
 8001c04:	e036      	b.n	8001c74 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_UART_MspInit+0x188>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d131      	bne.n	8001c74 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1a:	61d3      	str	r3, [r2, #28]
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_UART_MspInit+0x17c>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 8001c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	4619      	mov	r1, r3
 8001c54:	480e      	ldr	r0, [pc, #56]	; (8001c90 <HAL_UART_MspInit+0x18c>)
 8001c56:	f000 fb45 	bl	80022e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8001c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 0320 	add.w	r3, r7, #32
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4808      	ldr	r0, [pc, #32]	; (8001c90 <HAL_UART_MspInit+0x18c>)
 8001c70:	f000 fb38 	bl	80022e4 <HAL_GPIO_Init>
}
 8001c74:	bf00      	nop
 8001c76:	3730      	adds	r7, #48	; 0x30
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010800 	.word	0x40010800
 8001c88:	40004400 	.word	0x40004400
 8001c8c:	40004800 	.word	0x40004800
 8001c90:	40010c00 	.word	0x40010c00

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <NMI_Handler+0x4>

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cda:	f000 f93f 	bl	8001f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <USART1_IRQHandler+0x10>)
 8001cea:	f001 fa83 	bl	80031f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000338 	.word	0x20000338

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <_kill>:

int _kill(int pid, int sig)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d10:	f001 fd76 	bl	8003800 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2216      	movs	r2, #22
 8001d18:	601a      	str	r2, [r3, #0]
	return -1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_exit>:

void _exit (int status)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffe7 	bl	8001d06 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d38:	e7fe      	b.n	8001d38 <_exit+0x12>

08001d3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e00a      	b.n	8001d62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4c:	f3af 8000 	nop.w
 8001d50:	4601      	mov	r1, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	60ba      	str	r2, [r7, #8]
 8001d58:	b2ca      	uxtb	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbf0      	blt.n	8001d4c <_read+0x12>
	}

return len;
 8001d6a:	687b      	ldr	r3, [r7, #4]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e009      	b.n	8001d9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	60ba      	str	r2, [r7, #8]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	dbf1      	blt.n	8001d86 <_write+0x12>
	}
	return len;
 8001da2:	687b      	ldr	r3, [r7, #4]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_close>:

int _close(int file)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	return -1;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <_isatty>:

int _isatty(int file)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e3c:	f001 fce0 	bl	8003800 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20005000 	.word	0x20005000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	20000210 	.word	0x20000210
 8001e74:	200003d0 	.word	0x200003d0

08001e78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e86:	e003      	b.n	8001e90 <LoopCopyDataInit>

08001e88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e8e:	3104      	adds	r1, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e90:	480a      	ldr	r0, [pc, #40]	; (8001ebc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e98:	d3f6      	bcc.n	8001e88 <CopyDataInit>
  ldr r2, =_sbss
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e9c:	e002      	b.n	8001ea4 <LoopFillZerobss>

08001e9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ea0:	f842 3b04 	str.w	r3, [r2], #4

08001ea4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ea6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ea8:	d3f9      	bcc.n	8001e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eaa:	f7ff ffe5 	bl	8001e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eae:	f001 fcad 	bl	800380c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eb2:	f7ff fca9 	bl	8001808 <main>
  bx lr
 8001eb6:	4770      	bx	lr
  ldr r3, =_sidata
 8001eb8:	080080e0 	.word	0x080080e0
  ldr r0, =_sdata
 8001ebc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ec0:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8001ec4:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8001ec8:	200003cc 	.word	0x200003cc

08001ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC1_2_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x28>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x28>)
 8001eda:	f043 0310 	orr.w	r3, r3, #16
 8001ede:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f947 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fdd8 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40022000 	.word	0x40022000

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f95f 	bl	80021de <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 f927 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000004 	.word	0x20000004
 8001f54:	2000000c 	.word	0x2000000c
 8001f58:	20000008 	.word	0x20000008

08001f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_IncTick+0x1c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_IncTick+0x20>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <HAL_IncTick+0x20>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	2000000c 	.word	0x2000000c
 8001f7c:	200003b8 	.word	0x200003b8

08001f80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <HAL_GetTick+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	200003b8 	.word	0x200003b8

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff fff0 	bl	8001f80 <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_Delay+0x44>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffe0 	bl	8001f80 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000000c 	.word	0x2000000c

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4906      	ldr	r1, [pc, #24]	; (8002074 <__NVIC_EnableIRQ+0x34>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	; (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	; (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff90 	bl	8002078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff2d 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff42 	bl	8002024 <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ff90 	bl	80020cc <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5f 	bl	8002078 <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff35 	bl	8002040 <__NVIC_EnableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffa2 	bl	8002130 <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800220a:	2b02      	cmp	r3, #2
 800220c:	d005      	beq.n	800221a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2204      	movs	r2, #4
 8002212:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e051      	b.n	80022be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 020e 	bic.w	r2, r2, #14
 8002228:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_DMA_Abort_IT+0xd0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d029      	beq.n	8002298 <HAL_DMA_Abort_IT+0xa0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <HAL_DMA_Abort_IT+0xd4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d022      	beq.n	8002294 <HAL_DMA_Abort_IT+0x9c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_DMA_Abort_IT+0xd8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d01a      	beq.n	800228e <HAL_DMA_Abort_IT+0x96>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_DMA_Abort_IT+0xdc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d012      	beq.n	8002288 <HAL_DMA_Abort_IT+0x90>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_DMA_Abort_IT+0xe0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00a      	beq.n	8002282 <HAL_DMA_Abort_IT+0x8a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_DMA_Abort_IT+0xe4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <HAL_DMA_Abort_IT+0x84>
 8002276:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800227a:	e00e      	b.n	800229a <HAL_DMA_Abort_IT+0xa2>
 800227c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002280:	e00b      	b.n	800229a <HAL_DMA_Abort_IT+0xa2>
 8002282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002286:	e008      	b.n	800229a <HAL_DMA_Abort_IT+0xa2>
 8002288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228c:	e005      	b.n	800229a <HAL_DMA_Abort_IT+0xa2>
 800228e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002292:	e002      	b.n	800229a <HAL_DMA_Abort_IT+0xa2>
 8002294:	2310      	movs	r3, #16
 8002296:	e000      	b.n	800229a <HAL_DMA_Abort_IT+0xa2>
 8002298:	2301      	movs	r3, #1
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <HAL_DMA_Abort_IT+0xe8>)
 800229c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
    } 
  }
  return status;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40020008 	.word	0x40020008
 80022cc:	4002001c 	.word	0x4002001c
 80022d0:	40020030 	.word	0x40020030
 80022d4:	40020044 	.word	0x40020044
 80022d8:	40020058 	.word	0x40020058
 80022dc:	4002006c 	.word	0x4002006c
 80022e0:	40020000 	.word	0x40020000

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b08b      	sub	sp, #44	; 0x2c
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e169      	b.n	80025cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022f8:	2201      	movs	r2, #1
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 8158 	bne.w	80025c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a9a      	ldr	r2, [pc, #616]	; (8002584 <HAL_GPIO_Init+0x2a0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d05e      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002320:	4a98      	ldr	r2, [pc, #608]	; (8002584 <HAL_GPIO_Init+0x2a0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d875      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002326:	4a98      	ldr	r2, [pc, #608]	; (8002588 <HAL_GPIO_Init+0x2a4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d058      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 800232c:	4a96      	ldr	r2, [pc, #600]	; (8002588 <HAL_GPIO_Init+0x2a4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d86f      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002332:	4a96      	ldr	r2, [pc, #600]	; (800258c <HAL_GPIO_Init+0x2a8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d052      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002338:	4a94      	ldr	r2, [pc, #592]	; (800258c <HAL_GPIO_Init+0x2a8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d869      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800233e:	4a94      	ldr	r2, [pc, #592]	; (8002590 <HAL_GPIO_Init+0x2ac>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d04c      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002344:	4a92      	ldr	r2, [pc, #584]	; (8002590 <HAL_GPIO_Init+0x2ac>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d863      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800234a:	4a92      	ldr	r2, [pc, #584]	; (8002594 <HAL_GPIO_Init+0x2b0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d046      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002350:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_GPIO_Init+0x2b0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d85d      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002356:	2b12      	cmp	r3, #18
 8002358:	d82a      	bhi.n	80023b0 <HAL_GPIO_Init+0xcc>
 800235a:	2b12      	cmp	r3, #18
 800235c:	d859      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800235e:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <HAL_GPIO_Init+0x80>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	080023df 	.word	0x080023df
 8002368:	080023b9 	.word	0x080023b9
 800236c:	080023cb 	.word	0x080023cb
 8002370:	0800240d 	.word	0x0800240d
 8002374:	08002413 	.word	0x08002413
 8002378:	08002413 	.word	0x08002413
 800237c:	08002413 	.word	0x08002413
 8002380:	08002413 	.word	0x08002413
 8002384:	08002413 	.word	0x08002413
 8002388:	08002413 	.word	0x08002413
 800238c:	08002413 	.word	0x08002413
 8002390:	08002413 	.word	0x08002413
 8002394:	08002413 	.word	0x08002413
 8002398:	08002413 	.word	0x08002413
 800239c:	08002413 	.word	0x08002413
 80023a0:	08002413 	.word	0x08002413
 80023a4:	08002413 	.word	0x08002413
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023d5 	.word	0x080023d5
 80023b0:	4a79      	ldr	r2, [pc, #484]	; (8002598 <HAL_GPIO_Init+0x2b4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023b6:	e02c      	b.n	8002412 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e029      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e024      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	3308      	adds	r3, #8
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e01f      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	330c      	adds	r3, #12
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e01a      	b.n	8002414 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2304      	movs	r3, #4
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e013      	b.n	8002414 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	611a      	str	r2, [r3, #16]
          break;
 80023fe:	e009      	b.n	8002414 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	615a      	str	r2, [r3, #20]
          break;
 800240a:	e003      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x130>
          break;
 8002412:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d801      	bhi.n	800241e <HAL_GPIO_Init+0x13a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	e001      	b.n	8002422 <HAL_GPIO_Init+0x13e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d802      	bhi.n	8002430 <HAL_GPIO_Init+0x14c>
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x152>
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	3b08      	subs	r3, #8
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	210f      	movs	r1, #15
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80b1 	beq.w	80025c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_GPIO_Init+0x2b8>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a4c      	ldr	r2, [pc, #304]	; (800259c <HAL_GPIO_Init+0x2b8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <HAL_GPIO_Init+0x2bc>)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a40      	ldr	r2, [pc, #256]	; (80025a4 <HAL_GPIO_Init+0x2c0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_GPIO_Init+0x1ec>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3f      	ldr	r2, [pc, #252]	; (80025a8 <HAL_GPIO_Init+0x2c4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00d      	beq.n	80024cc <HAL_GPIO_Init+0x1e8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3e      	ldr	r2, [pc, #248]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0x1e4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <HAL_GPIO_Init+0x2cc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_GPIO_Init+0x1e0>
 80024c0:	2303      	movs	r3, #3
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024d0:	2300      	movs	r3, #0
 80024d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024e2:	492f      	ldr	r1, [pc, #188]	; (80025a0 <HAL_GPIO_Init+0x2bc>)
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	492c      	ldr	r1, [pc, #176]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	4928      	ldr	r1, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002514:	4013      	ands	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4922      	ldr	r1, [pc, #136]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	43db      	mvns	r3, r3
 800253a:	491e      	ldr	r1, [pc, #120]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800253c:	4013      	ands	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4918      	ldr	r1, [pc, #96]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	43db      	mvns	r3, r3
 8002562:	4914      	ldr	r1, [pc, #80]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002564:	4013      	ands	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d021      	beq.n	80025b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	60cb      	str	r3, [r1, #12]
 8002580:	e021      	b.n	80025c6 <HAL_GPIO_Init+0x2e2>
 8002582:	bf00      	nop
 8002584:	10320000 	.word	0x10320000
 8002588:	10310000 	.word	0x10310000
 800258c:	10220000 	.word	0x10220000
 8002590:	10210000 	.word	0x10210000
 8002594:	10120000 	.word	0x10120000
 8002598:	10110000 	.word	0x10110000
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40010800 	.word	0x40010800
 80025a8:	40010c00 	.word	0x40010c00
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40011400 	.word	0x40011400
 80025b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_GPIO_Init+0x304>)
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	43db      	mvns	r3, r3
 80025c0:	4909      	ldr	r1, [pc, #36]	; (80025e8 <HAL_GPIO_Init+0x304>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	3301      	adds	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f47f ae8e 	bne.w	80022f8 <HAL_GPIO_Init+0x14>
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	372c      	adds	r7, #44	; 0x2c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e26c      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8087 	beq.w	800274a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800263c:	4b92      	ldr	r3, [pc, #584]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b04      	cmp	r3, #4
 8002646:	d00c      	beq.n	8002662 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002648:	4b8f      	ldr	r3, [pc, #572]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d112      	bne.n	800267a <HAL_RCC_OscConfig+0x5e>
 8002654:	4b8c      	ldr	r3, [pc, #560]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d10b      	bne.n	800267a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002662:	4b89      	ldr	r3, [pc, #548]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d06c      	beq.n	8002748 <HAL_RCC_OscConfig+0x12c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d168      	bne.n	8002748 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e246      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x76>
 8002684:	4b80      	ldr	r3, [pc, #512]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a7f      	ldr	r2, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800268a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e02e      	b.n	80026f0 <HAL_RCC_OscConfig+0xd4>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x98>
 800269a:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7a      	ldr	r2, [pc, #488]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b78      	ldr	r3, [pc, #480]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a77      	ldr	r2, [pc, #476]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0xd4>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0xbc>
 80026be:	4b72      	ldr	r3, [pc, #456]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a71      	ldr	r2, [pc, #452]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xd4>
 80026d8:	4b6b      	ldr	r3, [pc, #428]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6a      	ldr	r2, [pc, #424]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a67      	ldr	r2, [pc, #412]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff fc42 	bl	8001f80 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff fc3e 	bl	8001f80 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1fa      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b5d      	ldr	r3, [pc, #372]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xe4>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff fc2e 	bl	8001f80 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff fc2a 	bl	8001f80 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1e6      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x10c>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d063      	beq.n	800281e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002756:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002762:	4b49      	ldr	r3, [pc, #292]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b08      	cmp	r3, #8
 800276c:	d11c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x18c>
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x176>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e1ba      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4939      	ldr	r1, [pc, #228]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	e03a      	b.n	800281e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7ff fbe3 	bl	8001f80 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027be:	f7ff fbdf 	bl	8001f80 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e19b      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4927      	ldr	r1, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b26      	ldr	r3, [pc, #152]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fbc2 	bl	8001f80 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff fbbe 	bl	8001f80 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e17a      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d03a      	beq.n	80028a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d019      	beq.n	8002866 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <HAL_RCC_OscConfig+0x274>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7ff fba2 	bl	8001f80 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7ff fb9e 	bl	8001f80 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e15a      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800285e:	2001      	movs	r0, #1
 8002860:	f000 fad8 	bl	8002e14 <RCC_Delay>
 8002864:	e01c      	b.n	80028a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_OscConfig+0x274>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286c:	f7ff fb88 	bl	8001f80 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002872:	e00f      	b.n	8002894 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002874:	f7ff fb84 	bl	8001f80 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d908      	bls.n	8002894 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e140      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	42420000 	.word	0x42420000
 8002890:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b9e      	ldr	r3, [pc, #632]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e9      	bne.n	8002874 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80a6 	beq.w	80029fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b97      	ldr	r3, [pc, #604]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	4b94      	ldr	r3, [pc, #592]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a93      	ldr	r2, [pc, #588]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61d3      	str	r3, [r2, #28]
 80028ca:	4b91      	ldr	r3, [pc, #580]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d118      	bne.n	8002918 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e6:	4b8b      	ldr	r3, [pc, #556]	; (8002b14 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a8a      	ldr	r2, [pc, #552]	; (8002b14 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f2:	f7ff fb45 	bl	8001f80 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7ff fb41 	bl	8001f80 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0fd      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	4b81      	ldr	r3, [pc, #516]	; (8002b14 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d106      	bne.n	800292e <HAL_RCC_OscConfig+0x312>
 8002920:	4b7b      	ldr	r3, [pc, #492]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a7a      	ldr	r2, [pc, #488]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	e02d      	b.n	800298a <HAL_RCC_OscConfig+0x36e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x334>
 8002936:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a75      	ldr	r2, [pc, #468]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	e01c      	b.n	800298a <HAL_RCC_OscConfig+0x36e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d10c      	bne.n	8002972 <HAL_RCC_OscConfig+0x356>
 8002958:	4b6d      	ldr	r3, [pc, #436]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a6c      	ldr	r2, [pc, #432]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6213      	str	r3, [r2, #32]
 8002964:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	e00b      	b.n	800298a <HAL_RCC_OscConfig+0x36e>
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	4b64      	ldr	r3, [pc, #400]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a63      	ldr	r2, [pc, #396]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d015      	beq.n	80029be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7ff faf5 	bl	8001f80 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7ff faf1 	bl	8001f80 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e0ab      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b0:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ee      	beq.n	800299a <HAL_RCC_OscConfig+0x37e>
 80029bc:	e014      	b.n	80029e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7ff fadf 	bl	8001f80 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7ff fadb 	bl	8001f80 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e095      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029dc:	4b4c      	ldr	r3, [pc, #304]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ee      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d105      	bne.n	80029fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ee:	4b48      	ldr	r3, [pc, #288]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a47      	ldr	r2, [pc, #284]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8081 	beq.w	8002b06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a04:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d061      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d146      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a18:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_OscConfig+0x4fc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7ff faaf 	bl	8001f80 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7ff faab 	bl	8001f80 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e067      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d108      	bne.n	8002a60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a4e:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	492d      	ldr	r1, [pc, #180]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a60:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a19      	ldr	r1, [r3, #32]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	430b      	orrs	r3, r1
 8002a72:	4927      	ldr	r1, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x4fc>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7ff fa7f 	bl	8001f80 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7ff fa7b 	bl	8001f80 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e037      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x46a>
 8002aa4:	e02f      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_RCC_OscConfig+0x4fc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7ff fa68 	bl	8001f80 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7ff fa64 	bl	8001f80 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e020      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x498>
 8002ad2:	e018      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e013      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42420060 	.word	0x42420060

08002b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0d0      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d910      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4965      	ldr	r1, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d040      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e073      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06b      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4936      	ldr	r1, [pc, #216]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7ff f9b8 	bl	8001f80 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7ff f9b4 	bl	8001f80 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e053      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d210      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff f916 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08007be8 	.word	0x08007be8
 8002ce8:	20000004 	.word	0x20000004
 8002cec:	20000008 	.word	0x20000008

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b490      	push	{r4, r7}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cf6:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf8:	1d3c      	adds	r4, r7, #4
 8002cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d00:	f240 2301 	movw	r3, #513	; 0x201
 8002d04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d1a:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x40>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x46>
 8002d2e:	e02d      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d32:	623b      	str	r3, [r7, #32]
      break;
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	0c9b      	lsrs	r3, r3, #18
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d42:	4413      	add	r3, r2
 8002d44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c5b      	lsrs	r3, r3, #17
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d62:	4413      	add	r3, r2
 8002d64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d6e:	fb02 f203 	mul.w	r2, r2, r3
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7a:	e004      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	623b      	str	r3, [r7, #32]
      break;
 8002d8a:	e002      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8e:	623b      	str	r3, [r7, #32]
      break;
 8002d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d92:	6a3b      	ldr	r3, [r7, #32]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3728      	adds	r7, #40	; 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc90      	pop	{r4, r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	08007bd8 	.word	0x08007bd8
 8002da4:	40021000 	.word	0x40021000
 8002da8:	007a1200 	.word	0x007a1200
 8002dac:	003d0900 	.word	0x003d0900

08002db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc8:	f7ff fff2 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08007bf8 	.word	0x08007bf8

08002dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df0:	f7ff ffde 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0adb      	lsrs	r3, r3, #11
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08007bf8 	.word	0x08007bf8

08002e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <RCC_Delay+0x34>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <RCC_Delay+0x38>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0a5b      	lsrs	r3, r3, #9
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e30:	bf00      	nop
  }
  while (Delay --);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	60fa      	str	r2, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f9      	bne.n	8002e30 <RCC_Delay+0x1c>
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	10624dd3 	.word	0x10624dd3

08002e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e03f      	b.n	8002ee2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fe44 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	; 0x24
 8002e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fc21 	bl	80036dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b08a      	sub	sp, #40	; 0x28
 8002eee:	af02      	add	r7, sp, #8
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d17c      	bne.n	8003004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_UART_Transmit+0x2c>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e075      	b.n	8003006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Transmit+0x3e>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e06e      	b.n	8003006 <HAL_UART_Transmit+0x11c>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2221      	movs	r2, #33	; 0x21
 8002f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f3e:	f7ff f81f 	bl	8001f80 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f58:	d108      	bne.n	8002f6c <HAL_UART_Transmit+0x82>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	e003      	b.n	8002f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f7c:	e02a      	b.n	8002fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	2180      	movs	r1, #128	; 0x80
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fa45 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e036      	b.n	8003006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e007      	b.n	8002fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1cf      	bne.n	8002f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2140      	movs	r1, #64	; 0x40
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fa15 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e006      	b.n	8003006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b08a      	sub	sp, #40	; 0x28
 8003012:	af02      	add	r7, sp, #8
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	603b      	str	r3, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b20      	cmp	r3, #32
 800302c:	f040 8089 	bne.w	8003142 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Receive+0x2e>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e081      	b.n	8003144 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_UART_Receive+0x40>
 800304a:	2302      	movs	r3, #2
 800304c:	e07a      	b.n	8003144 <HAL_UART_Receive+0x136>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2222      	movs	r2, #34	; 0x22
 8003060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003064:	f7fe ff8c 	bl	8001f80 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	d108      	bne.n	8003092 <HAL_UART_Receive+0x84>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e003      	b.n	800309a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030a2:	e043      	b.n	800312c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2120      	movs	r1, #32
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f9b2 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e042      	b.n	8003144 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10c      	bne.n	80030de <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3302      	adds	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e01f      	b.n	800311e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e6:	d007      	beq.n	80030f8 <HAL_UART_Receive+0xea>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_UART_Receive+0xf8>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e008      	b.n	8003118 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003112:	b2da      	uxtb	r2, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1b6      	bne.n	80030a4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b20      	cmp	r3, #32
 8003164:	d140      	bne.n	80031e8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_UART_Receive_IT+0x26>
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e039      	b.n	80031ea <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_UART_Receive_IT+0x38>
 8003180:	2302      	movs	r3, #2
 8003182:	e032      	b.n	80031ea <HAL_UART_Receive_IT+0x9e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2222      	movs	r2, #34	; 0x22
 80031a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0220 	orr.w	r2, r2, #32
 80031e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10d      	bne.n	8003246 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_UART_IRQHandler+0x52>
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f9cc 	bl	80035dc <UART_Receive_IT>
      return;
 8003244:	e0d0      	b.n	80033e8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80b0 	beq.w	80033ae <HAL_UART_IRQHandler+0x1ba>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_UART_IRQHandler+0x70>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80a5 	beq.w	80033ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_UART_IRQHandler+0x90>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_UART_IRQHandler+0xb0>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	f043 0202 	orr.w	r2, r3, #2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_UART_IRQHandler+0xd0>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	f043 0204 	orr.w	r2, r3, #4
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00f      	beq.n	80032ee <HAL_UART_IRQHandler+0xfa>
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <HAL_UART_IRQHandler+0xee>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	f043 0208 	orr.w	r2, r3, #8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d077      	beq.n	80033e6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_UART_IRQHandler+0x11c>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f966 	bl	80035dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <HAL_UART_IRQHandler+0x144>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d031      	beq.n	800339c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8b7 	bl	80034ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d023      	beq.n	8003394 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <HAL_UART_IRQHandler+0x1fc>)
 800336a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe ff41 	bl	80021f8 <HAL_DMA_Abort_IT>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003386:	4610      	mov	r0, r2
 8003388:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338a:	e00e      	b.n	80033aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f83a 	bl	8003406 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003392:	e00a      	b.n	80033aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f836 	bl	8003406 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339a:	e006      	b.n	80033aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f832 	bl	8003406 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033a8:	e01d      	b.n	80033e6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033aa:	bf00      	nop
    return;
 80033ac:	e01b      	b.n	80033e6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_UART_IRQHandler+0x1d6>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8a3 	bl	800350e <UART_Transmit_IT>
    return;
 80033c8:	e00e      	b.n	80033e8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <HAL_UART_IRQHandler+0x1f4>
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f8e4 	bl	80035ac <UART_EndTransmit_IT>
    return;
 80033e4:	e000      	b.n	80033e8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80033e6:	bf00      	nop
  }
}
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	080034e7 	.word	0x080034e7

080033f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003428:	e02c      	b.n	8003484 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d028      	beq.n	8003484 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <UART_WaitOnFlagUntilTimeout+0x30>
 8003438:	f7fe fda2 	bl	8001f80 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	429a      	cmp	r2, r3
 8003446:	d21d      	bcs.n	8003484 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003456:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e00f      	b.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4013      	ands	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d0c3      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7ff ff80 	bl	8003406 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b21      	cmp	r3, #33	; 0x21
 8003520:	d13e      	bne.n	80035a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352a:	d114      	bne.n	8003556 <UART_Transmit_IT+0x48>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d110      	bne.n	8003556 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003548:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	1c9a      	adds	r2, r3, #2
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	621a      	str	r2, [r3, #32]
 8003554:	e008      	b.n	8003568 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	1c59      	adds	r1, r3, #1
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6211      	str	r1, [r2, #32]
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4619      	mov	r1, r3
 8003576:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10f      	bne.n	800359c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff11 	bl	80033f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b22      	cmp	r3, #34	; 0x22
 80035ee:	d170      	bne.n	80036d2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d117      	bne.n	800362a <UART_Receive_IT+0x4e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d113      	bne.n	800362a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	b29b      	uxth	r3, r3
 8003614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003618:	b29a      	uxth	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
 8003628:	e026      	b.n	8003678 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d007      	beq.n	800364e <UART_Receive_IT+0x72>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <UART_Receive_IT+0x80>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e008      	b.n	800366e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29b      	uxth	r3, r3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4619      	mov	r1, r3
 8003686:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003688:	2b00      	cmp	r3, #0
 800368a:	d120      	bne.n	80036ce <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0220 	bic.w	r2, r2, #32
 800369a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe f887 	bl	80017d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e002      	b.n	80036d4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003716:	f023 030c 	bic.w	r3, r3, #12
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	430b      	orrs	r3, r1
 8003722:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a2c      	ldr	r2, [pc, #176]	; (80037f0 <UART_SetConfig+0x114>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d103      	bne.n	800374c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003744:	f7ff fb52 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	e002      	b.n	8003752 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7ff fb3a 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <UART_SetConfig+0x118>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	0119      	lsls	r1, r3, #4
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009a      	lsls	r2, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	fbb2 f2f3 	udiv	r2, r2, r3
 8003788:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <UART_SetConfig+0x118>)
 800378a:	fba3 0302 	umull	r0, r3, r3, r2
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2064      	movs	r0, #100	; 0x64
 8003792:	fb00 f303 	mul.w	r3, r0, r3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	3332      	adds	r3, #50	; 0x32
 800379c:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <UART_SetConfig+0x118>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a8:	4419      	add	r1, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <UART_SetConfig+0x118>)
 80037c2:	fba3 0302 	umull	r0, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2064      	movs	r0, #100	; 0x64
 80037ca:	fb00 f303 	mul.w	r3, r0, r3
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	3332      	adds	r3, #50	; 0x32
 80037d4:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <UART_SetConfig+0x118>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	440a      	add	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40013800 	.word	0x40013800
 80037f4:	51eb851f 	.word	0x51eb851f

080037f8 <atof>:
 80037f8:	2100      	movs	r1, #0
 80037fa:	f000 bf4d 	b.w	8004698 <strtod>
	...

08003800 <__errno>:
 8003800:	4b01      	ldr	r3, [pc, #4]	; (8003808 <__errno+0x8>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000010 	.word	0x20000010

0800380c <__libc_init_array>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	2600      	movs	r6, #0
 8003810:	4d0c      	ldr	r5, [pc, #48]	; (8003844 <__libc_init_array+0x38>)
 8003812:	4c0d      	ldr	r4, [pc, #52]	; (8003848 <__libc_init_array+0x3c>)
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	42a6      	cmp	r6, r4
 800381a:	d109      	bne.n	8003830 <__libc_init_array+0x24>
 800381c:	f004 f8d2 	bl	80079c4 <_init>
 8003820:	2600      	movs	r6, #0
 8003822:	4d0a      	ldr	r5, [pc, #40]	; (800384c <__libc_init_array+0x40>)
 8003824:	4c0a      	ldr	r4, [pc, #40]	; (8003850 <__libc_init_array+0x44>)
 8003826:	1b64      	subs	r4, r4, r5
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	42a6      	cmp	r6, r4
 800382c:	d105      	bne.n	800383a <__libc_init_array+0x2e>
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	f855 3b04 	ldr.w	r3, [r5], #4
 8003834:	4798      	blx	r3
 8003836:	3601      	adds	r6, #1
 8003838:	e7ee      	b.n	8003818 <__libc_init_array+0xc>
 800383a:	f855 3b04 	ldr.w	r3, [r5], #4
 800383e:	4798      	blx	r3
 8003840:	3601      	adds	r6, #1
 8003842:	e7f2      	b.n	800382a <__libc_init_array+0x1e>
 8003844:	080080d8 	.word	0x080080d8
 8003848:	080080d8 	.word	0x080080d8
 800384c:	080080d8 	.word	0x080080d8
 8003850:	080080dc 	.word	0x080080dc

08003854 <malloc>:
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <malloc+0xc>)
 8003856:	4601      	mov	r1, r0
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	f000 b85f 	b.w	800391c <_malloc_r>
 800385e:	bf00      	nop
 8003860:	20000010 	.word	0x20000010

08003864 <free>:
 8003864:	4b02      	ldr	r3, [pc, #8]	; (8003870 <free+0xc>)
 8003866:	4601      	mov	r1, r0
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	f000 b80b 	b.w	8003884 <_free_r>
 800386e:	bf00      	nop
 8003870:	20000010 	.word	0x20000010

08003874 <memset>:
 8003874:	4603      	mov	r3, r0
 8003876:	4402      	add	r2, r0
 8003878:	4293      	cmp	r3, r2
 800387a:	d100      	bne.n	800387e <memset+0xa>
 800387c:	4770      	bx	lr
 800387e:	f803 1b01 	strb.w	r1, [r3], #1
 8003882:	e7f9      	b.n	8003878 <memset+0x4>

08003884 <_free_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4605      	mov	r5, r0
 8003888:	2900      	cmp	r1, #0
 800388a:	d043      	beq.n	8003914 <_free_r+0x90>
 800388c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003890:	1f0c      	subs	r4, r1, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	bfb8      	it	lt
 8003896:	18e4      	addlt	r4, r4, r3
 8003898:	f001 fb1c 	bl	8004ed4 <__malloc_lock>
 800389c:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <_free_r+0x94>)
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	4610      	mov	r0, r2
 80038a2:	b933      	cbnz	r3, 80038b2 <_free_r+0x2e>
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	6014      	str	r4, [r2, #0]
 80038a8:	4628      	mov	r0, r5
 80038aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ae:	f001 bb17 	b.w	8004ee0 <__malloc_unlock>
 80038b2:	42a3      	cmp	r3, r4
 80038b4:	d90a      	bls.n	80038cc <_free_r+0x48>
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	1862      	adds	r2, r4, r1
 80038ba:	4293      	cmp	r3, r2
 80038bc:	bf01      	itttt	eq
 80038be:	681a      	ldreq	r2, [r3, #0]
 80038c0:	685b      	ldreq	r3, [r3, #4]
 80038c2:	1852      	addeq	r2, r2, r1
 80038c4:	6022      	streq	r2, [r4, #0]
 80038c6:	6063      	str	r3, [r4, #4]
 80038c8:	6004      	str	r4, [r0, #0]
 80038ca:	e7ed      	b.n	80038a8 <_free_r+0x24>
 80038cc:	461a      	mov	r2, r3
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	b10b      	cbz	r3, 80038d6 <_free_r+0x52>
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	d9fa      	bls.n	80038cc <_free_r+0x48>
 80038d6:	6811      	ldr	r1, [r2, #0]
 80038d8:	1850      	adds	r0, r2, r1
 80038da:	42a0      	cmp	r0, r4
 80038dc:	d10b      	bne.n	80038f6 <_free_r+0x72>
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	4401      	add	r1, r0
 80038e2:	1850      	adds	r0, r2, r1
 80038e4:	4283      	cmp	r3, r0
 80038e6:	6011      	str	r1, [r2, #0]
 80038e8:	d1de      	bne.n	80038a8 <_free_r+0x24>
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4401      	add	r1, r0
 80038f0:	6011      	str	r1, [r2, #0]
 80038f2:	6053      	str	r3, [r2, #4]
 80038f4:	e7d8      	b.n	80038a8 <_free_r+0x24>
 80038f6:	d902      	bls.n	80038fe <_free_r+0x7a>
 80038f8:	230c      	movs	r3, #12
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	e7d4      	b.n	80038a8 <_free_r+0x24>
 80038fe:	6820      	ldr	r0, [r4, #0]
 8003900:	1821      	adds	r1, r4, r0
 8003902:	428b      	cmp	r3, r1
 8003904:	bf01      	itttt	eq
 8003906:	6819      	ldreq	r1, [r3, #0]
 8003908:	685b      	ldreq	r3, [r3, #4]
 800390a:	1809      	addeq	r1, r1, r0
 800390c:	6021      	streq	r1, [r4, #0]
 800390e:	6063      	str	r3, [r4, #4]
 8003910:	6054      	str	r4, [r2, #4]
 8003912:	e7c9      	b.n	80038a8 <_free_r+0x24>
 8003914:	bd38      	pop	{r3, r4, r5, pc}
 8003916:	bf00      	nop
 8003918:	20000214 	.word	0x20000214

0800391c <_malloc_r>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	1ccd      	adds	r5, r1, #3
 8003920:	f025 0503 	bic.w	r5, r5, #3
 8003924:	3508      	adds	r5, #8
 8003926:	2d0c      	cmp	r5, #12
 8003928:	bf38      	it	cc
 800392a:	250c      	movcc	r5, #12
 800392c:	2d00      	cmp	r5, #0
 800392e:	4606      	mov	r6, r0
 8003930:	db01      	blt.n	8003936 <_malloc_r+0x1a>
 8003932:	42a9      	cmp	r1, r5
 8003934:	d903      	bls.n	800393e <_malloc_r+0x22>
 8003936:	230c      	movs	r3, #12
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	2000      	movs	r0, #0
 800393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800393e:	f001 fac9 	bl	8004ed4 <__malloc_lock>
 8003942:	4921      	ldr	r1, [pc, #132]	; (80039c8 <_malloc_r+0xac>)
 8003944:	680a      	ldr	r2, [r1, #0]
 8003946:	4614      	mov	r4, r2
 8003948:	b99c      	cbnz	r4, 8003972 <_malloc_r+0x56>
 800394a:	4f20      	ldr	r7, [pc, #128]	; (80039cc <_malloc_r+0xb0>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b923      	cbnz	r3, 800395a <_malloc_r+0x3e>
 8003950:	4621      	mov	r1, r4
 8003952:	4630      	mov	r0, r6
 8003954:	f000 f83c 	bl	80039d0 <_sbrk_r>
 8003958:	6038      	str	r0, [r7, #0]
 800395a:	4629      	mov	r1, r5
 800395c:	4630      	mov	r0, r6
 800395e:	f000 f837 	bl	80039d0 <_sbrk_r>
 8003962:	1c43      	adds	r3, r0, #1
 8003964:	d123      	bne.n	80039ae <_malloc_r+0x92>
 8003966:	230c      	movs	r3, #12
 8003968:	4630      	mov	r0, r6
 800396a:	6033      	str	r3, [r6, #0]
 800396c:	f001 fab8 	bl	8004ee0 <__malloc_unlock>
 8003970:	e7e3      	b.n	800393a <_malloc_r+0x1e>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	1b5b      	subs	r3, r3, r5
 8003976:	d417      	bmi.n	80039a8 <_malloc_r+0x8c>
 8003978:	2b0b      	cmp	r3, #11
 800397a:	d903      	bls.n	8003984 <_malloc_r+0x68>
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	441c      	add	r4, r3
 8003980:	6025      	str	r5, [r4, #0]
 8003982:	e004      	b.n	800398e <_malloc_r+0x72>
 8003984:	6863      	ldr	r3, [r4, #4]
 8003986:	42a2      	cmp	r2, r4
 8003988:	bf0c      	ite	eq
 800398a:	600b      	streq	r3, [r1, #0]
 800398c:	6053      	strne	r3, [r2, #4]
 800398e:	4630      	mov	r0, r6
 8003990:	f001 faa6 	bl	8004ee0 <__malloc_unlock>
 8003994:	f104 000b 	add.w	r0, r4, #11
 8003998:	1d23      	adds	r3, r4, #4
 800399a:	f020 0007 	bic.w	r0, r0, #7
 800399e:	1ac2      	subs	r2, r0, r3
 80039a0:	d0cc      	beq.n	800393c <_malloc_r+0x20>
 80039a2:	1a1b      	subs	r3, r3, r0
 80039a4:	50a3      	str	r3, [r4, r2]
 80039a6:	e7c9      	b.n	800393c <_malloc_r+0x20>
 80039a8:	4622      	mov	r2, r4
 80039aa:	6864      	ldr	r4, [r4, #4]
 80039ac:	e7cc      	b.n	8003948 <_malloc_r+0x2c>
 80039ae:	1cc4      	adds	r4, r0, #3
 80039b0:	f024 0403 	bic.w	r4, r4, #3
 80039b4:	42a0      	cmp	r0, r4
 80039b6:	d0e3      	beq.n	8003980 <_malloc_r+0x64>
 80039b8:	1a21      	subs	r1, r4, r0
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 f808 	bl	80039d0 <_sbrk_r>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d1dd      	bne.n	8003980 <_malloc_r+0x64>
 80039c4:	e7cf      	b.n	8003966 <_malloc_r+0x4a>
 80039c6:	bf00      	nop
 80039c8:	20000214 	.word	0x20000214
 80039cc:	20000218 	.word	0x20000218

080039d0 <_sbrk_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	2300      	movs	r3, #0
 80039d4:	4d05      	ldr	r5, [pc, #20]	; (80039ec <_sbrk_r+0x1c>)
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	f7fe fa16 	bl	8001e0c <_sbrk>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_sbrk_r+0x1a>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_sbrk_r+0x1a>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	200003bc 	.word	0x200003bc

080039f0 <siprintf>:
 80039f0:	b40e      	push	{r1, r2, r3}
 80039f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039f6:	b500      	push	{lr}
 80039f8:	b09c      	sub	sp, #112	; 0x70
 80039fa:	ab1d      	add	r3, sp, #116	; 0x74
 80039fc:	9002      	str	r0, [sp, #8]
 80039fe:	9006      	str	r0, [sp, #24]
 8003a00:	9107      	str	r1, [sp, #28]
 8003a02:	9104      	str	r1, [sp, #16]
 8003a04:	4808      	ldr	r0, [pc, #32]	; (8003a28 <siprintf+0x38>)
 8003a06:	4909      	ldr	r1, [pc, #36]	; (8003a2c <siprintf+0x3c>)
 8003a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a0c:	9105      	str	r1, [sp, #20]
 8003a0e:	6800      	ldr	r0, [r0, #0]
 8003a10:	a902      	add	r1, sp, #8
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	f001 ff8c 	bl	8005930 <_svfiprintf_r>
 8003a18:	2200      	movs	r2, #0
 8003a1a:	9b02      	ldr	r3, [sp, #8]
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	b01c      	add	sp, #112	; 0x70
 8003a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a24:	b003      	add	sp, #12
 8003a26:	4770      	bx	lr
 8003a28:	20000010 	.word	0x20000010
 8003a2c:	ffff0208 	.word	0xffff0208

08003a30 <strcpy>:
 8003a30:	4603      	mov	r3, r0
 8003a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a36:	f803 2b01 	strb.w	r2, [r3], #1
 8003a3a:	2a00      	cmp	r2, #0
 8003a3c:	d1f9      	bne.n	8003a32 <strcpy+0x2>
 8003a3e:	4770      	bx	lr

08003a40 <strstr>:
 8003a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a42:	780c      	ldrb	r4, [r1, #0]
 8003a44:	b164      	cbz	r4, 8003a60 <strstr+0x20>
 8003a46:	4603      	mov	r3, r0
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	1c5e      	adds	r6, r3, #1
 8003a4e:	b90a      	cbnz	r2, 8003a54 <strstr+0x14>
 8003a50:	4610      	mov	r0, r2
 8003a52:	e005      	b.n	8003a60 <strstr+0x20>
 8003a54:	4294      	cmp	r4, r2
 8003a56:	d108      	bne.n	8003a6a <strstr+0x2a>
 8003a58:	460d      	mov	r5, r1
 8003a5a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003a5e:	b902      	cbnz	r2, 8003a62 <strstr+0x22>
 8003a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a62:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003a66:	4297      	cmp	r7, r2
 8003a68:	d0f7      	beq.n	8003a5a <strstr+0x1a>
 8003a6a:	4633      	mov	r3, r6
 8003a6c:	e7ec      	b.n	8003a48 <strstr+0x8>

08003a6e <sulp>:
 8003a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a72:	460f      	mov	r7, r1
 8003a74:	4690      	mov	r8, r2
 8003a76:	f001 fda9 	bl	80055cc <__ulp>
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	460d      	mov	r5, r1
 8003a7e:	f1b8 0f00 	cmp.w	r8, #0
 8003a82:	d011      	beq.n	8003aa8 <sulp+0x3a>
 8003a84:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003a88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	dd0b      	ble.n	8003aa8 <sulp+0x3a>
 8003a90:	2400      	movs	r4, #0
 8003a92:	051b      	lsls	r3, r3, #20
 8003a94:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003a98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	462b      	mov	r3, r5
 8003aa0:	f7fc fd1a 	bl	80004d8 <__aeabi_dmul>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	460d      	mov	r5, r1
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	4629      	mov	r1, r5
 8003aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ab0 <_strtod_l>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	469b      	mov	fp, r3
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	b0a1      	sub	sp, #132	; 0x84
 8003aba:	931c      	str	r3, [sp, #112]	; 0x70
 8003abc:	4ba1      	ldr	r3, [pc, #644]	; (8003d44 <_strtod_l+0x294>)
 8003abe:	4682      	mov	sl, r0
 8003ac0:	681f      	ldr	r7, [r3, #0]
 8003ac2:	460e      	mov	r6, r1
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	9217      	str	r2, [sp, #92]	; 0x5c
 8003ac8:	f7fc fb42 	bl	8000150 <strlen>
 8003acc:	f04f 0800 	mov.w	r8, #0
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	f04f 0900 	mov.w	r9, #0
 8003ad6:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ad8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	2a2b      	cmp	r2, #43	; 0x2b
 8003ade:	d04c      	beq.n	8003b7a <_strtod_l+0xca>
 8003ae0:	d83a      	bhi.n	8003b58 <_strtod_l+0xa8>
 8003ae2:	2a0d      	cmp	r2, #13
 8003ae4:	d833      	bhi.n	8003b4e <_strtod_l+0x9e>
 8003ae6:	2a08      	cmp	r2, #8
 8003ae8:	d833      	bhi.n	8003b52 <_strtod_l+0xa2>
 8003aea:	2a00      	cmp	r2, #0
 8003aec:	d03d      	beq.n	8003b6a <_strtod_l+0xba>
 8003aee:	2300      	movs	r3, #0
 8003af0:	930c      	str	r3, [sp, #48]	; 0x30
 8003af2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003af4:	782b      	ldrb	r3, [r5, #0]
 8003af6:	2b30      	cmp	r3, #48	; 0x30
 8003af8:	f040 80af 	bne.w	8003c5a <_strtod_l+0x1aa>
 8003afc:	786b      	ldrb	r3, [r5, #1]
 8003afe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003b02:	2b58      	cmp	r3, #88	; 0x58
 8003b04:	d16c      	bne.n	8003be0 <_strtod_l+0x130>
 8003b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b08:	4650      	mov	r0, sl
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	ab1c      	add	r3, sp, #112	; 0x70
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4a8d      	ldr	r2, [pc, #564]	; (8003d48 <_strtod_l+0x298>)
 8003b12:	f8cd b008 	str.w	fp, [sp, #8]
 8003b16:	ab1d      	add	r3, sp, #116	; 0x74
 8003b18:	a91b      	add	r1, sp, #108	; 0x6c
 8003b1a:	f000 febd 	bl	8004898 <__gethex>
 8003b1e:	f010 0607 	ands.w	r6, r0, #7
 8003b22:	4604      	mov	r4, r0
 8003b24:	d005      	beq.n	8003b32 <_strtod_l+0x82>
 8003b26:	2e06      	cmp	r6, #6
 8003b28:	d129      	bne.n	8003b7e <_strtod_l+0xce>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	951b      	str	r5, [sp, #108]	; 0x6c
 8003b30:	930c      	str	r3, [sp, #48]	; 0x30
 8003b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 8596 	bne.w	8004666 <_strtod_l+0xbb6>
 8003b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b3c:	b1d3      	cbz	r3, 8003b74 <_strtod_l+0xc4>
 8003b3e:	4642      	mov	r2, r8
 8003b40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	b021      	add	sp, #132	; 0x84
 8003b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b4e:	2a20      	cmp	r2, #32
 8003b50:	d1cd      	bne.n	8003aee <_strtod_l+0x3e>
 8003b52:	3301      	adds	r3, #1
 8003b54:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b56:	e7bf      	b.n	8003ad8 <_strtod_l+0x28>
 8003b58:	2a2d      	cmp	r2, #45	; 0x2d
 8003b5a:	d1c8      	bne.n	8003aee <_strtod_l+0x3e>
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	920c      	str	r2, [sp, #48]	; 0x30
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1c3      	bne.n	8003af2 <_strtod_l+0x42>
 8003b6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f040 8577 	bne.w	8004662 <_strtod_l+0xbb2>
 8003b74:	4642      	mov	r2, r8
 8003b76:	464b      	mov	r3, r9
 8003b78:	e7e4      	b.n	8003b44 <_strtod_l+0x94>
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	e7ef      	b.n	8003b5e <_strtod_l+0xae>
 8003b7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003b80:	b13a      	cbz	r2, 8003b92 <_strtod_l+0xe2>
 8003b82:	2135      	movs	r1, #53	; 0x35
 8003b84:	a81e      	add	r0, sp, #120	; 0x78
 8003b86:	f001 fe25 	bl	80057d4 <__copybits>
 8003b8a:	4650      	mov	r0, sl
 8003b8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003b8e:	f001 f9ed 	bl	8004f6c <_Bfree>
 8003b92:	3e01      	subs	r6, #1
 8003b94:	2e05      	cmp	r6, #5
 8003b96:	d807      	bhi.n	8003ba8 <_strtod_l+0xf8>
 8003b98:	e8df f006 	tbb	[pc, r6]
 8003b9c:	1d180b0e 	.word	0x1d180b0e
 8003ba0:	030e      	.short	0x030e
 8003ba2:	f04f 0900 	mov.w	r9, #0
 8003ba6:	46c8      	mov	r8, r9
 8003ba8:	0721      	lsls	r1, r4, #28
 8003baa:	d5c2      	bpl.n	8003b32 <_strtod_l+0x82>
 8003bac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003bb0:	e7bf      	b.n	8003b32 <_strtod_l+0x82>
 8003bb2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003bb6:	e7f7      	b.n	8003ba8 <_strtod_l+0xf8>
 8003bb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003bba:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8003bbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003bc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003bc6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003bca:	e7ed      	b.n	8003ba8 <_strtod_l+0xf8>
 8003bcc:	f04f 0800 	mov.w	r8, #0
 8003bd0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003d4c <_strtod_l+0x29c>
 8003bd4:	e7e8      	b.n	8003ba8 <_strtod_l+0xf8>
 8003bd6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003bda:	f04f 38ff 	mov.w	r8, #4294967295
 8003bde:	e7e3      	b.n	8003ba8 <_strtod_l+0xf8>
 8003be0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	921b      	str	r2, [sp, #108]	; 0x6c
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b30      	cmp	r3, #48	; 0x30
 8003bea:	d0f9      	beq.n	8003be0 <_strtod_l+0x130>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0a0      	beq.n	8003b32 <_strtod_l+0x82>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	9307      	str	r3, [sp, #28]
 8003bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bf6:	220a      	movs	r2, #10
 8003bf8:	9308      	str	r3, [sp, #32]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	469b      	mov	fp, r3
 8003bfe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003c02:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003c04:	7805      	ldrb	r5, [r0, #0]
 8003c06:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003c0a:	b2d9      	uxtb	r1, r3
 8003c0c:	2909      	cmp	r1, #9
 8003c0e:	d926      	bls.n	8003c5e <_strtod_l+0x1ae>
 8003c10:	4622      	mov	r2, r4
 8003c12:	4639      	mov	r1, r7
 8003c14:	f002 fa80 	bl	8006118 <strncmp>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d032      	beq.n	8003c82 <_strtod_l+0x1d2>
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	462b      	mov	r3, r5
 8003c20:	465c      	mov	r4, fp
 8003c22:	4602      	mov	r2, r0
 8003c24:	9004      	str	r0, [sp, #16]
 8003c26:	2b65      	cmp	r3, #101	; 0x65
 8003c28:	d001      	beq.n	8003c2e <_strtod_l+0x17e>
 8003c2a:	2b45      	cmp	r3, #69	; 0x45
 8003c2c:	d113      	bne.n	8003c56 <_strtod_l+0x1a6>
 8003c2e:	b91c      	cbnz	r4, 8003c38 <_strtod_l+0x188>
 8003c30:	9b07      	ldr	r3, [sp, #28]
 8003c32:	4303      	orrs	r3, r0
 8003c34:	d099      	beq.n	8003b6a <_strtod_l+0xba>
 8003c36:	2400      	movs	r4, #0
 8003c38:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003c3a:	1c73      	adds	r3, r6, #1
 8003c3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c3e:	7873      	ldrb	r3, [r6, #1]
 8003c40:	2b2b      	cmp	r3, #43	; 0x2b
 8003c42:	d078      	beq.n	8003d36 <_strtod_l+0x286>
 8003c44:	2b2d      	cmp	r3, #45	; 0x2d
 8003c46:	d07b      	beq.n	8003d40 <_strtod_l+0x290>
 8003c48:	2700      	movs	r7, #0
 8003c4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003c4e:	2909      	cmp	r1, #9
 8003c50:	f240 8082 	bls.w	8003d58 <_strtod_l+0x2a8>
 8003c54:	961b      	str	r6, [sp, #108]	; 0x6c
 8003c56:	2500      	movs	r5, #0
 8003c58:	e09e      	b.n	8003d98 <_strtod_l+0x2e8>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e7c9      	b.n	8003bf2 <_strtod_l+0x142>
 8003c5e:	f1bb 0f08 	cmp.w	fp, #8
 8003c62:	bfd5      	itete	le
 8003c64:	9906      	ldrle	r1, [sp, #24]
 8003c66:	9905      	ldrgt	r1, [sp, #20]
 8003c68:	fb02 3301 	mlale	r3, r2, r1, r3
 8003c6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003c70:	f100 0001 	add.w	r0, r0, #1
 8003c74:	bfd4      	ite	le
 8003c76:	9306      	strle	r3, [sp, #24]
 8003c78:	9305      	strgt	r3, [sp, #20]
 8003c7a:	f10b 0b01 	add.w	fp, fp, #1
 8003c7e:	901b      	str	r0, [sp, #108]	; 0x6c
 8003c80:	e7bf      	b.n	8003c02 <_strtod_l+0x152>
 8003c82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c84:	191a      	adds	r2, r3, r4
 8003c86:	921b      	str	r2, [sp, #108]	; 0x6c
 8003c88:	5d1b      	ldrb	r3, [r3, r4]
 8003c8a:	f1bb 0f00 	cmp.w	fp, #0
 8003c8e:	d036      	beq.n	8003cfe <_strtod_l+0x24e>
 8003c90:	465c      	mov	r4, fp
 8003c92:	9004      	str	r0, [sp, #16]
 8003c94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003c98:	2a09      	cmp	r2, #9
 8003c9a:	d912      	bls.n	8003cc2 <_strtod_l+0x212>
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	e7c2      	b.n	8003c26 <_strtod_l+0x176>
 8003ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	921b      	str	r2, [sp, #108]	; 0x6c
 8003ca8:	785b      	ldrb	r3, [r3, #1]
 8003caa:	2b30      	cmp	r3, #48	; 0x30
 8003cac:	d0f8      	beq.n	8003ca0 <_strtod_l+0x1f0>
 8003cae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003cb2:	2a08      	cmp	r2, #8
 8003cb4:	f200 84dc 	bhi.w	8004670 <_strtod_l+0xbc0>
 8003cb8:	9004      	str	r0, [sp, #16]
 8003cba:	2000      	movs	r0, #0
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003cc0:	9208      	str	r2, [sp, #32]
 8003cc2:	3b30      	subs	r3, #48	; 0x30
 8003cc4:	f100 0201 	add.w	r2, r0, #1
 8003cc8:	d013      	beq.n	8003cf2 <_strtod_l+0x242>
 8003cca:	9904      	ldr	r1, [sp, #16]
 8003ccc:	1905      	adds	r5, r0, r4
 8003cce:	4411      	add	r1, r2
 8003cd0:	9104      	str	r1, [sp, #16]
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	210a      	movs	r1, #10
 8003cd6:	42aa      	cmp	r2, r5
 8003cd8:	d113      	bne.n	8003d02 <_strtod_l+0x252>
 8003cda:	1822      	adds	r2, r4, r0
 8003cdc:	2a08      	cmp	r2, #8
 8003cde:	f104 0401 	add.w	r4, r4, #1
 8003ce2:	4404      	add	r4, r0
 8003ce4:	dc1b      	bgt.n	8003d1e <_strtod_l+0x26e>
 8003ce6:	220a      	movs	r2, #10
 8003ce8:	9906      	ldr	r1, [sp, #24]
 8003cea:	fb02 3301 	mla	r3, r2, r1, r3
 8003cee:	9306      	str	r3, [sp, #24]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	911b      	str	r1, [sp, #108]	; 0x6c
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	e7ca      	b.n	8003c94 <_strtod_l+0x1e4>
 8003cfe:	4658      	mov	r0, fp
 8003d00:	e7d3      	b.n	8003caa <_strtod_l+0x1fa>
 8003d02:	2a08      	cmp	r2, #8
 8003d04:	dc04      	bgt.n	8003d10 <_strtod_l+0x260>
 8003d06:	9f06      	ldr	r7, [sp, #24]
 8003d08:	434f      	muls	r7, r1
 8003d0a:	9706      	str	r7, [sp, #24]
 8003d0c:	3201      	adds	r2, #1
 8003d0e:	e7e2      	b.n	8003cd6 <_strtod_l+0x226>
 8003d10:	1c57      	adds	r7, r2, #1
 8003d12:	2f10      	cmp	r7, #16
 8003d14:	bfde      	ittt	le
 8003d16:	9f05      	ldrle	r7, [sp, #20]
 8003d18:	434f      	mulle	r7, r1
 8003d1a:	9705      	strle	r7, [sp, #20]
 8003d1c:	e7f6      	b.n	8003d0c <_strtod_l+0x25c>
 8003d1e:	2c10      	cmp	r4, #16
 8003d20:	bfdf      	itttt	le
 8003d22:	220a      	movle	r2, #10
 8003d24:	9905      	ldrle	r1, [sp, #20]
 8003d26:	fb02 3301 	mlale	r3, r2, r1, r3
 8003d2a:	9305      	strle	r3, [sp, #20]
 8003d2c:	e7e0      	b.n	8003cf0 <_strtod_l+0x240>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2201      	movs	r2, #1
 8003d32:	9304      	str	r3, [sp, #16]
 8003d34:	e77c      	b.n	8003c30 <_strtod_l+0x180>
 8003d36:	2700      	movs	r7, #0
 8003d38:	1cb3      	adds	r3, r6, #2
 8003d3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003d3c:	78b3      	ldrb	r3, [r6, #2]
 8003d3e:	e784      	b.n	8003c4a <_strtod_l+0x19a>
 8003d40:	2701      	movs	r7, #1
 8003d42:	e7f9      	b.n	8003d38 <_strtod_l+0x288>
 8003d44:	08007d90 	.word	0x08007d90
 8003d48:	08007c10 	.word	0x08007c10
 8003d4c:	7ff00000 	.word	0x7ff00000
 8003d50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d52:	1c59      	adds	r1, r3, #1
 8003d54:	911b      	str	r1, [sp, #108]	; 0x6c
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d0f9      	beq.n	8003d50 <_strtod_l+0x2a0>
 8003d5c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003d60:	2908      	cmp	r1, #8
 8003d62:	f63f af78 	bhi.w	8003c56 <_strtod_l+0x1a6>
 8003d66:	f04f 0e0a 	mov.w	lr, #10
 8003d6a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003d6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d70:	9309      	str	r3, [sp, #36]	; 0x24
 8003d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d74:	1c59      	adds	r1, r3, #1
 8003d76:	911b      	str	r1, [sp, #108]	; 0x6c
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003d7e:	2d09      	cmp	r5, #9
 8003d80:	d935      	bls.n	8003dee <_strtod_l+0x33e>
 8003d82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003d84:	1b49      	subs	r1, r1, r5
 8003d86:	2908      	cmp	r1, #8
 8003d88:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003d8c:	dc02      	bgt.n	8003d94 <_strtod_l+0x2e4>
 8003d8e:	4565      	cmp	r5, ip
 8003d90:	bfa8      	it	ge
 8003d92:	4665      	movge	r5, ip
 8003d94:	b107      	cbz	r7, 8003d98 <_strtod_l+0x2e8>
 8003d96:	426d      	negs	r5, r5
 8003d98:	2c00      	cmp	r4, #0
 8003d9a:	d14c      	bne.n	8003e36 <_strtod_l+0x386>
 8003d9c:	9907      	ldr	r1, [sp, #28]
 8003d9e:	4301      	orrs	r1, r0
 8003da0:	f47f aec7 	bne.w	8003b32 <_strtod_l+0x82>
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	f47f aee0 	bne.w	8003b6a <_strtod_l+0xba>
 8003daa:	2b69      	cmp	r3, #105	; 0x69
 8003dac:	d026      	beq.n	8003dfc <_strtod_l+0x34c>
 8003dae:	dc23      	bgt.n	8003df8 <_strtod_l+0x348>
 8003db0:	2b49      	cmp	r3, #73	; 0x49
 8003db2:	d023      	beq.n	8003dfc <_strtod_l+0x34c>
 8003db4:	2b4e      	cmp	r3, #78	; 0x4e
 8003db6:	f47f aed8 	bne.w	8003b6a <_strtod_l+0xba>
 8003dba:	499c      	ldr	r1, [pc, #624]	; (800402c <_strtod_l+0x57c>)
 8003dbc:	a81b      	add	r0, sp, #108	; 0x6c
 8003dbe:	f000 ffb9 	bl	8004d34 <__match>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	f43f aed1 	beq.w	8003b6a <_strtod_l+0xba>
 8003dc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b28      	cmp	r3, #40	; 0x28
 8003dce:	d12c      	bne.n	8003e2a <_strtod_l+0x37a>
 8003dd0:	4997      	ldr	r1, [pc, #604]	; (8004030 <_strtod_l+0x580>)
 8003dd2:	aa1e      	add	r2, sp, #120	; 0x78
 8003dd4:	a81b      	add	r0, sp, #108	; 0x6c
 8003dd6:	f000 ffc1 	bl	8004d5c <__hexnan>
 8003dda:	2805      	cmp	r0, #5
 8003ddc:	d125      	bne.n	8003e2a <_strtod_l+0x37a>
 8003dde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003de0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003de4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003de8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003dec:	e6a1      	b.n	8003b32 <_strtod_l+0x82>
 8003dee:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003df2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003df6:	e7bc      	b.n	8003d72 <_strtod_l+0x2c2>
 8003df8:	2b6e      	cmp	r3, #110	; 0x6e
 8003dfa:	e7dc      	b.n	8003db6 <_strtod_l+0x306>
 8003dfc:	498d      	ldr	r1, [pc, #564]	; (8004034 <_strtod_l+0x584>)
 8003dfe:	a81b      	add	r0, sp, #108	; 0x6c
 8003e00:	f000 ff98 	bl	8004d34 <__match>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f43f aeb0 	beq.w	8003b6a <_strtod_l+0xba>
 8003e0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e0c:	498a      	ldr	r1, [pc, #552]	; (8004038 <_strtod_l+0x588>)
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	a81b      	add	r0, sp, #108	; 0x6c
 8003e12:	931b      	str	r3, [sp, #108]	; 0x6c
 8003e14:	f000 ff8e 	bl	8004d34 <__match>
 8003e18:	b910      	cbnz	r0, 8003e20 <_strtod_l+0x370>
 8003e1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003e20:	f04f 0800 	mov.w	r8, #0
 8003e24:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004048 <_strtod_l+0x598>
 8003e28:	e683      	b.n	8003b32 <_strtod_l+0x82>
 8003e2a:	4884      	ldr	r0, [pc, #528]	; (800403c <_strtod_l+0x58c>)
 8003e2c:	f002 f96e 	bl	800610c <nan>
 8003e30:	4680      	mov	r8, r0
 8003e32:	4689      	mov	r9, r1
 8003e34:	e67d      	b.n	8003b32 <_strtod_l+0x82>
 8003e36:	9b04      	ldr	r3, [sp, #16]
 8003e38:	f1bb 0f00 	cmp.w	fp, #0
 8003e3c:	bf08      	it	eq
 8003e3e:	46a3      	moveq	fp, r4
 8003e40:	1aeb      	subs	r3, r5, r3
 8003e42:	2c10      	cmp	r4, #16
 8003e44:	9806      	ldr	r0, [sp, #24]
 8003e46:	4626      	mov	r6, r4
 8003e48:	9307      	str	r3, [sp, #28]
 8003e4a:	bfa8      	it	ge
 8003e4c:	2610      	movge	r6, #16
 8003e4e:	f7fc fac9 	bl	80003e4 <__aeabi_ui2d>
 8003e52:	2c09      	cmp	r4, #9
 8003e54:	4680      	mov	r8, r0
 8003e56:	4689      	mov	r9, r1
 8003e58:	dd13      	ble.n	8003e82 <_strtod_l+0x3d2>
 8003e5a:	4b79      	ldr	r3, [pc, #484]	; (8004040 <_strtod_l+0x590>)
 8003e5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003e64:	f7fc fb38 	bl	80004d8 <__aeabi_dmul>
 8003e68:	4680      	mov	r8, r0
 8003e6a:	9805      	ldr	r0, [sp, #20]
 8003e6c:	4689      	mov	r9, r1
 8003e6e:	f7fc fab9 	bl	80003e4 <__aeabi_ui2d>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4640      	mov	r0, r8
 8003e78:	4649      	mov	r1, r9
 8003e7a:	f7fc f977 	bl	800016c <__adddf3>
 8003e7e:	4680      	mov	r8, r0
 8003e80:	4689      	mov	r9, r1
 8003e82:	2c0f      	cmp	r4, #15
 8003e84:	dc36      	bgt.n	8003ef4 <_strtod_l+0x444>
 8003e86:	9b07      	ldr	r3, [sp, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f43f ae52 	beq.w	8003b32 <_strtod_l+0x82>
 8003e8e:	dd22      	ble.n	8003ed6 <_strtod_l+0x426>
 8003e90:	2b16      	cmp	r3, #22
 8003e92:	dc09      	bgt.n	8003ea8 <_strtod_l+0x3f8>
 8003e94:	4c6a      	ldr	r4, [pc, #424]	; (8004040 <_strtod_l+0x590>)
 8003e96:	4642      	mov	r2, r8
 8003e98:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003ea2:	f7fc fb19 	bl	80004d8 <__aeabi_dmul>
 8003ea6:	e7c3      	b.n	8003e30 <_strtod_l+0x380>
 8003ea8:	9a07      	ldr	r2, [sp, #28]
 8003eaa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	db20      	blt.n	8003ef4 <_strtod_l+0x444>
 8003eb2:	4d63      	ldr	r5, [pc, #396]	; (8004040 <_strtod_l+0x590>)
 8003eb4:	f1c4 040f 	rsb	r4, r4, #15
 8003eb8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	f7fc fb08 	bl	80004d8 <__aeabi_dmul>
 8003ec8:	9b07      	ldr	r3, [sp, #28]
 8003eca:	1b1c      	subs	r4, r3, r4
 8003ecc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ed4:	e7e5      	b.n	8003ea2 <_strtod_l+0x3f2>
 8003ed6:	9b07      	ldr	r3, [sp, #28]
 8003ed8:	3316      	adds	r3, #22
 8003eda:	db0b      	blt.n	8003ef4 <_strtod_l+0x444>
 8003edc:	9b04      	ldr	r3, [sp, #16]
 8003ede:	4a58      	ldr	r2, [pc, #352]	; (8004040 <_strtod_l+0x590>)
 8003ee0:	1b5d      	subs	r5, r3, r5
 8003ee2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003eec:	4649      	mov	r1, r9
 8003eee:	f7fc fc1d 	bl	800072c <__aeabi_ddiv>
 8003ef2:	e79d      	b.n	8003e30 <_strtod_l+0x380>
 8003ef4:	9b07      	ldr	r3, [sp, #28]
 8003ef6:	1ba6      	subs	r6, r4, r6
 8003ef8:	441e      	add	r6, r3
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	dd71      	ble.n	8003fe2 <_strtod_l+0x532>
 8003efe:	f016 030f 	ands.w	r3, r6, #15
 8003f02:	d00a      	beq.n	8003f1a <_strtod_l+0x46a>
 8003f04:	494e      	ldr	r1, [pc, #312]	; (8004040 <_strtod_l+0x590>)
 8003f06:	4642      	mov	r2, r8
 8003f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f10:	464b      	mov	r3, r9
 8003f12:	f7fc fae1 	bl	80004d8 <__aeabi_dmul>
 8003f16:	4680      	mov	r8, r0
 8003f18:	4689      	mov	r9, r1
 8003f1a:	f036 060f 	bics.w	r6, r6, #15
 8003f1e:	d050      	beq.n	8003fc2 <_strtod_l+0x512>
 8003f20:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003f24:	dd27      	ble.n	8003f76 <_strtod_l+0x4c6>
 8003f26:	f04f 0b00 	mov.w	fp, #0
 8003f2a:	f8cd b010 	str.w	fp, [sp, #16]
 8003f2e:	f8cd b020 	str.w	fp, [sp, #32]
 8003f32:	f8cd b018 	str.w	fp, [sp, #24]
 8003f36:	2322      	movs	r3, #34	; 0x22
 8003f38:	f04f 0800 	mov.w	r8, #0
 8003f3c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004048 <_strtod_l+0x598>
 8003f40:	f8ca 3000 	str.w	r3, [sl]
 8003f44:	9b08      	ldr	r3, [sp, #32]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f43f adf3 	beq.w	8003b32 <_strtod_l+0x82>
 8003f4c:	4650      	mov	r0, sl
 8003f4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003f50:	f001 f80c 	bl	8004f6c <_Bfree>
 8003f54:	4650      	mov	r0, sl
 8003f56:	9906      	ldr	r1, [sp, #24]
 8003f58:	f001 f808 	bl	8004f6c <_Bfree>
 8003f5c:	4650      	mov	r0, sl
 8003f5e:	9904      	ldr	r1, [sp, #16]
 8003f60:	f001 f804 	bl	8004f6c <_Bfree>
 8003f64:	4650      	mov	r0, sl
 8003f66:	9908      	ldr	r1, [sp, #32]
 8003f68:	f001 f800 	bl	8004f6c <_Bfree>
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	4650      	mov	r0, sl
 8003f70:	f000 fffc 	bl	8004f6c <_Bfree>
 8003f74:	e5dd      	b.n	8003b32 <_strtod_l+0x82>
 8003f76:	2300      	movs	r3, #0
 8003f78:	4640      	mov	r0, r8
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	461f      	mov	r7, r3
 8003f7e:	1136      	asrs	r6, r6, #4
 8003f80:	2e01      	cmp	r6, #1
 8003f82:	dc21      	bgt.n	8003fc8 <_strtod_l+0x518>
 8003f84:	b10b      	cbz	r3, 8003f8a <_strtod_l+0x4da>
 8003f86:	4680      	mov	r8, r0
 8003f88:	4689      	mov	r9, r1
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <_strtod_l+0x594>)
 8003f8c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003f90:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003f94:	4642      	mov	r2, r8
 8003f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	f7fc fa9c 	bl	80004d8 <__aeabi_dmul>
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <_strtod_l+0x598>)
 8003fa2:	460a      	mov	r2, r1
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	4929      	ldr	r1, [pc, #164]	; (800404c <_strtod_l+0x59c>)
 8003fa8:	4680      	mov	r8, r0
 8003faa:	428b      	cmp	r3, r1
 8003fac:	d8bb      	bhi.n	8003f26 <_strtod_l+0x476>
 8003fae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003fb2:	428b      	cmp	r3, r1
 8003fb4:	bf86      	itte	hi
 8003fb6:	f04f 38ff 	movhi.w	r8, #4294967295
 8003fba:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004050 <_strtod_l+0x5a0>
 8003fbe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9305      	str	r3, [sp, #20]
 8003fc6:	e07e      	b.n	80040c6 <_strtod_l+0x616>
 8003fc8:	07f2      	lsls	r2, r6, #31
 8003fca:	d507      	bpl.n	8003fdc <_strtod_l+0x52c>
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <_strtod_l+0x594>)
 8003fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f7fc fa7f 	bl	80004d8 <__aeabi_dmul>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	3701      	adds	r7, #1
 8003fde:	1076      	asrs	r6, r6, #1
 8003fe0:	e7ce      	b.n	8003f80 <_strtod_l+0x4d0>
 8003fe2:	d0ee      	beq.n	8003fc2 <_strtod_l+0x512>
 8003fe4:	4276      	negs	r6, r6
 8003fe6:	f016 020f 	ands.w	r2, r6, #15
 8003fea:	d00a      	beq.n	8004002 <_strtod_l+0x552>
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <_strtod_l+0x590>)
 8003fee:	4640      	mov	r0, r8
 8003ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f7fc fb97 	bl	800072c <__aeabi_ddiv>
 8003ffe:	4680      	mov	r8, r0
 8004000:	4689      	mov	r9, r1
 8004002:	1136      	asrs	r6, r6, #4
 8004004:	d0dd      	beq.n	8003fc2 <_strtod_l+0x512>
 8004006:	2e1f      	cmp	r6, #31
 8004008:	dd24      	ble.n	8004054 <_strtod_l+0x5a4>
 800400a:	f04f 0b00 	mov.w	fp, #0
 800400e:	f8cd b010 	str.w	fp, [sp, #16]
 8004012:	f8cd b020 	str.w	fp, [sp, #32]
 8004016:	f8cd b018 	str.w	fp, [sp, #24]
 800401a:	2322      	movs	r3, #34	; 0x22
 800401c:	f04f 0800 	mov.w	r8, #0
 8004020:	f04f 0900 	mov.w	r9, #0
 8004024:	f8ca 3000 	str.w	r3, [sl]
 8004028:	e78c      	b.n	8003f44 <_strtod_l+0x494>
 800402a:	bf00      	nop
 800402c:	08007c0d 	.word	0x08007c0d
 8004030:	08007c24 	.word	0x08007c24
 8004034:	08007c04 	.word	0x08007c04
 8004038:	08007c07 	.word	0x08007c07
 800403c:	08007d13 	.word	0x08007d13
 8004040:	08007e30 	.word	0x08007e30
 8004044:	08007e08 	.word	0x08007e08
 8004048:	7ff00000 	.word	0x7ff00000
 800404c:	7ca00000 	.word	0x7ca00000
 8004050:	7fefffff 	.word	0x7fefffff
 8004054:	f016 0310 	ands.w	r3, r6, #16
 8004058:	bf18      	it	ne
 800405a:	236a      	movne	r3, #106	; 0x6a
 800405c:	4640      	mov	r0, r8
 800405e:	9305      	str	r3, [sp, #20]
 8004060:	4649      	mov	r1, r9
 8004062:	2300      	movs	r3, #0
 8004064:	4fb2      	ldr	r7, [pc, #712]	; (8004330 <_strtod_l+0x880>)
 8004066:	07f2      	lsls	r2, r6, #31
 8004068:	d504      	bpl.n	8004074 <_strtod_l+0x5c4>
 800406a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800406e:	f7fc fa33 	bl	80004d8 <__aeabi_dmul>
 8004072:	2301      	movs	r3, #1
 8004074:	1076      	asrs	r6, r6, #1
 8004076:	f107 0708 	add.w	r7, r7, #8
 800407a:	d1f4      	bne.n	8004066 <_strtod_l+0x5b6>
 800407c:	b10b      	cbz	r3, 8004082 <_strtod_l+0x5d2>
 800407e:	4680      	mov	r8, r0
 8004080:	4689      	mov	r9, r1
 8004082:	9b05      	ldr	r3, [sp, #20]
 8004084:	b1bb      	cbz	r3, 80040b6 <_strtod_l+0x606>
 8004086:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800408a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800408e:	2b00      	cmp	r3, #0
 8004090:	4649      	mov	r1, r9
 8004092:	dd10      	ble.n	80040b6 <_strtod_l+0x606>
 8004094:	2b1f      	cmp	r3, #31
 8004096:	f340 812b 	ble.w	80042f0 <_strtod_l+0x840>
 800409a:	2b34      	cmp	r3, #52	; 0x34
 800409c:	bfd8      	it	le
 800409e:	f04f 32ff 	movle.w	r2, #4294967295
 80040a2:	f04f 0800 	mov.w	r8, #0
 80040a6:	bfcf      	iteee	gt
 80040a8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80040ac:	3b20      	suble	r3, #32
 80040ae:	fa02 f303 	lslle.w	r3, r2, r3
 80040b2:	ea03 0901 	andle.w	r9, r3, r1
 80040b6:	2200      	movs	r2, #0
 80040b8:	2300      	movs	r3, #0
 80040ba:	4640      	mov	r0, r8
 80040bc:	4649      	mov	r1, r9
 80040be:	f7fc fc73 	bl	80009a8 <__aeabi_dcmpeq>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d1a1      	bne.n	800400a <_strtod_l+0x55a>
 80040c6:	9b06      	ldr	r3, [sp, #24]
 80040c8:	465a      	mov	r2, fp
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	4650      	mov	r0, sl
 80040ce:	4623      	mov	r3, r4
 80040d0:	9908      	ldr	r1, [sp, #32]
 80040d2:	f000 ffb7 	bl	8005044 <__s2b>
 80040d6:	9008      	str	r0, [sp, #32]
 80040d8:	2800      	cmp	r0, #0
 80040da:	f43f af24 	beq.w	8003f26 <_strtod_l+0x476>
 80040de:	9b04      	ldr	r3, [sp, #16]
 80040e0:	f04f 0b00 	mov.w	fp, #0
 80040e4:	1b5d      	subs	r5, r3, r5
 80040e6:	9b07      	ldr	r3, [sp, #28]
 80040e8:	f8cd b010 	str.w	fp, [sp, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bfb4      	ite	lt
 80040f0:	462b      	movlt	r3, r5
 80040f2:	2300      	movge	r3, #0
 80040f4:	930e      	str	r3, [sp, #56]	; 0x38
 80040f6:	9b07      	ldr	r3, [sp, #28]
 80040f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040fc:	9316      	str	r3, [sp, #88]	; 0x58
 80040fe:	9b08      	ldr	r3, [sp, #32]
 8004100:	4650      	mov	r0, sl
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	f000 fef2 	bl	8004eec <_Balloc>
 8004108:	9006      	str	r0, [sp, #24]
 800410a:	2800      	cmp	r0, #0
 800410c:	f43f af13 	beq.w	8003f36 <_strtod_l+0x486>
 8004110:	9b08      	ldr	r3, [sp, #32]
 8004112:	300c      	adds	r0, #12
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	f103 010c 	add.w	r1, r3, #12
 800411a:	3202      	adds	r2, #2
 800411c:	0092      	lsls	r2, r2, #2
 800411e:	f000 fecb 	bl	8004eb8 <memcpy>
 8004122:	ab1e      	add	r3, sp, #120	; 0x78
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	ab1d      	add	r3, sp, #116	; 0x74
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4642      	mov	r2, r8
 800412c:	464b      	mov	r3, r9
 800412e:	4650      	mov	r0, sl
 8004130:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004134:	f001 fac4 	bl	80056c0 <__d2b>
 8004138:	901c      	str	r0, [sp, #112]	; 0x70
 800413a:	2800      	cmp	r0, #0
 800413c:	f43f aefb 	beq.w	8003f36 <_strtod_l+0x486>
 8004140:	2101      	movs	r1, #1
 8004142:	4650      	mov	r0, sl
 8004144:	f001 f816 	bl	8005174 <__i2b>
 8004148:	4603      	mov	r3, r0
 800414a:	9004      	str	r0, [sp, #16]
 800414c:	2800      	cmp	r0, #0
 800414e:	f43f aef2 	beq.w	8003f36 <_strtod_l+0x486>
 8004152:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004154:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004156:	2d00      	cmp	r5, #0
 8004158:	bfab      	itete	ge
 800415a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800415c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800415e:	18ee      	addge	r6, r5, r3
 8004160:	1b5c      	sublt	r4, r3, r5
 8004162:	9b05      	ldr	r3, [sp, #20]
 8004164:	bfa8      	it	ge
 8004166:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004168:	eba5 0503 	sub.w	r5, r5, r3
 800416c:	4415      	add	r5, r2
 800416e:	4b71      	ldr	r3, [pc, #452]	; (8004334 <_strtod_l+0x884>)
 8004170:	f105 35ff 	add.w	r5, r5, #4294967295
 8004174:	bfb8      	it	lt
 8004176:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004178:	429d      	cmp	r5, r3
 800417a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800417e:	f280 80c9 	bge.w	8004314 <_strtod_l+0x864>
 8004182:	1b5b      	subs	r3, r3, r5
 8004184:	2b1f      	cmp	r3, #31
 8004186:	f04f 0701 	mov.w	r7, #1
 800418a:	eba2 0203 	sub.w	r2, r2, r3
 800418e:	f300 80b6 	bgt.w	80042fe <_strtod_l+0x84e>
 8004192:	2500      	movs	r5, #0
 8004194:	fa07 f303 	lsl.w	r3, r7, r3
 8004198:	930f      	str	r3, [sp, #60]	; 0x3c
 800419a:	18b7      	adds	r7, r6, r2
 800419c:	9b05      	ldr	r3, [sp, #20]
 800419e:	42be      	cmp	r6, r7
 80041a0:	4414      	add	r4, r2
 80041a2:	441c      	add	r4, r3
 80041a4:	4633      	mov	r3, r6
 80041a6:	bfa8      	it	ge
 80041a8:	463b      	movge	r3, r7
 80041aa:	42a3      	cmp	r3, r4
 80041ac:	bfa8      	it	ge
 80041ae:	4623      	movge	r3, r4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bfc2      	ittt	gt
 80041b4:	1aff      	subgt	r7, r7, r3
 80041b6:	1ae4      	subgt	r4, r4, r3
 80041b8:	1af6      	subgt	r6, r6, r3
 80041ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041bc:	2b00      	cmp	r3, #0
 80041be:	dd17      	ble.n	80041f0 <_strtod_l+0x740>
 80041c0:	461a      	mov	r2, r3
 80041c2:	4650      	mov	r0, sl
 80041c4:	9904      	ldr	r1, [sp, #16]
 80041c6:	f001 f88f 	bl	80052e8 <__pow5mult>
 80041ca:	9004      	str	r0, [sp, #16]
 80041cc:	2800      	cmp	r0, #0
 80041ce:	f43f aeb2 	beq.w	8003f36 <_strtod_l+0x486>
 80041d2:	4601      	mov	r1, r0
 80041d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80041d6:	4650      	mov	r0, sl
 80041d8:	f000 ffe2 	bl	80051a0 <__multiply>
 80041dc:	9009      	str	r0, [sp, #36]	; 0x24
 80041de:	2800      	cmp	r0, #0
 80041e0:	f43f aea9 	beq.w	8003f36 <_strtod_l+0x486>
 80041e4:	4650      	mov	r0, sl
 80041e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80041e8:	f000 fec0 	bl	8004f6c <_Bfree>
 80041ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ee:	931c      	str	r3, [sp, #112]	; 0x70
 80041f0:	2f00      	cmp	r7, #0
 80041f2:	f300 8093 	bgt.w	800431c <_strtod_l+0x86c>
 80041f6:	9b07      	ldr	r3, [sp, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	dd08      	ble.n	800420e <_strtod_l+0x75e>
 80041fc:	4650      	mov	r0, sl
 80041fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004200:	9906      	ldr	r1, [sp, #24]
 8004202:	f001 f871 	bl	80052e8 <__pow5mult>
 8004206:	9006      	str	r0, [sp, #24]
 8004208:	2800      	cmp	r0, #0
 800420a:	f43f ae94 	beq.w	8003f36 <_strtod_l+0x486>
 800420e:	2c00      	cmp	r4, #0
 8004210:	dd08      	ble.n	8004224 <_strtod_l+0x774>
 8004212:	4622      	mov	r2, r4
 8004214:	4650      	mov	r0, sl
 8004216:	9906      	ldr	r1, [sp, #24]
 8004218:	f001 f8c0 	bl	800539c <__lshift>
 800421c:	9006      	str	r0, [sp, #24]
 800421e:	2800      	cmp	r0, #0
 8004220:	f43f ae89 	beq.w	8003f36 <_strtod_l+0x486>
 8004224:	2e00      	cmp	r6, #0
 8004226:	dd08      	ble.n	800423a <_strtod_l+0x78a>
 8004228:	4632      	mov	r2, r6
 800422a:	4650      	mov	r0, sl
 800422c:	9904      	ldr	r1, [sp, #16]
 800422e:	f001 f8b5 	bl	800539c <__lshift>
 8004232:	9004      	str	r0, [sp, #16]
 8004234:	2800      	cmp	r0, #0
 8004236:	f43f ae7e 	beq.w	8003f36 <_strtod_l+0x486>
 800423a:	4650      	mov	r0, sl
 800423c:	9a06      	ldr	r2, [sp, #24]
 800423e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004240:	f001 f934 	bl	80054ac <__mdiff>
 8004244:	4683      	mov	fp, r0
 8004246:	2800      	cmp	r0, #0
 8004248:	f43f ae75 	beq.w	8003f36 <_strtod_l+0x486>
 800424c:	2400      	movs	r4, #0
 800424e:	68c3      	ldr	r3, [r0, #12]
 8004250:	9904      	ldr	r1, [sp, #16]
 8004252:	60c4      	str	r4, [r0, #12]
 8004254:	930d      	str	r3, [sp, #52]	; 0x34
 8004256:	f001 f90d 	bl	8005474 <__mcmp>
 800425a:	42a0      	cmp	r0, r4
 800425c:	da70      	bge.n	8004340 <_strtod_l+0x890>
 800425e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004260:	ea53 0308 	orrs.w	r3, r3, r8
 8004264:	f040 8096 	bne.w	8004394 <_strtod_l+0x8e4>
 8004268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 8091 	bne.w	8004394 <_strtod_l+0x8e4>
 8004272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004276:	0d1b      	lsrs	r3, r3, #20
 8004278:	051b      	lsls	r3, r3, #20
 800427a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800427e:	f240 8089 	bls.w	8004394 <_strtod_l+0x8e4>
 8004282:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004286:	b923      	cbnz	r3, 8004292 <_strtod_l+0x7e2>
 8004288:	f8db 3010 	ldr.w	r3, [fp, #16]
 800428c:	2b01      	cmp	r3, #1
 800428e:	f340 8081 	ble.w	8004394 <_strtod_l+0x8e4>
 8004292:	4659      	mov	r1, fp
 8004294:	2201      	movs	r2, #1
 8004296:	4650      	mov	r0, sl
 8004298:	f001 f880 	bl	800539c <__lshift>
 800429c:	9904      	ldr	r1, [sp, #16]
 800429e:	4683      	mov	fp, r0
 80042a0:	f001 f8e8 	bl	8005474 <__mcmp>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	dd75      	ble.n	8004394 <_strtod_l+0x8e4>
 80042a8:	9905      	ldr	r1, [sp, #20]
 80042aa:	464b      	mov	r3, r9
 80042ac:	4a22      	ldr	r2, [pc, #136]	; (8004338 <_strtod_l+0x888>)
 80042ae:	2900      	cmp	r1, #0
 80042b0:	f000 8091 	beq.w	80043d6 <_strtod_l+0x926>
 80042b4:	ea02 0109 	and.w	r1, r2, r9
 80042b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80042bc:	f300 808b 	bgt.w	80043d6 <_strtod_l+0x926>
 80042c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80042c4:	f77f aea9 	ble.w	800401a <_strtod_l+0x56a>
 80042c8:	2300      	movs	r3, #0
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <_strtod_l+0x88c>)
 80042cc:	4640      	mov	r0, r8
 80042ce:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80042d2:	4649      	mov	r1, r9
 80042d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80042d8:	f7fc f8fe 	bl	80004d8 <__aeabi_dmul>
 80042dc:	460b      	mov	r3, r1
 80042de:	4303      	orrs	r3, r0
 80042e0:	bf08      	it	eq
 80042e2:	2322      	moveq	r3, #34	; 0x22
 80042e4:	4680      	mov	r8, r0
 80042e6:	4689      	mov	r9, r1
 80042e8:	bf08      	it	eq
 80042ea:	f8ca 3000 	streq.w	r3, [sl]
 80042ee:	e62d      	b.n	8003f4c <_strtod_l+0x49c>
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	ea03 0808 	and.w	r8, r3, r8
 80042fc:	e6db      	b.n	80040b6 <_strtod_l+0x606>
 80042fe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004302:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004306:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800430a:	35e2      	adds	r5, #226	; 0xe2
 800430c:	fa07 f505 	lsl.w	r5, r7, r5
 8004310:	970f      	str	r7, [sp, #60]	; 0x3c
 8004312:	e742      	b.n	800419a <_strtod_l+0x6ea>
 8004314:	2301      	movs	r3, #1
 8004316:	2500      	movs	r5, #0
 8004318:	930f      	str	r3, [sp, #60]	; 0x3c
 800431a:	e73e      	b.n	800419a <_strtod_l+0x6ea>
 800431c:	463a      	mov	r2, r7
 800431e:	4650      	mov	r0, sl
 8004320:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004322:	f001 f83b 	bl	800539c <__lshift>
 8004326:	901c      	str	r0, [sp, #112]	; 0x70
 8004328:	2800      	cmp	r0, #0
 800432a:	f47f af64 	bne.w	80041f6 <_strtod_l+0x746>
 800432e:	e602      	b.n	8003f36 <_strtod_l+0x486>
 8004330:	08007c38 	.word	0x08007c38
 8004334:	fffffc02 	.word	0xfffffc02
 8004338:	7ff00000 	.word	0x7ff00000
 800433c:	39500000 	.word	0x39500000
 8004340:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004344:	d166      	bne.n	8004414 <_strtod_l+0x964>
 8004346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800434c:	b35a      	cbz	r2, 80043a6 <_strtod_l+0x8f6>
 800434e:	4a9c      	ldr	r2, [pc, #624]	; (80045c0 <_strtod_l+0xb10>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d12c      	bne.n	80043ae <_strtod_l+0x8fe>
 8004354:	9b05      	ldr	r3, [sp, #20]
 8004356:	4640      	mov	r0, r8
 8004358:	b303      	cbz	r3, 800439c <_strtod_l+0x8ec>
 800435a:	464b      	mov	r3, r9
 800435c:	4a99      	ldr	r2, [pc, #612]	; (80045c4 <_strtod_l+0xb14>)
 800435e:	f04f 31ff 	mov.w	r1, #4294967295
 8004362:	401a      	ands	r2, r3
 8004364:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004368:	d81b      	bhi.n	80043a2 <_strtod_l+0x8f2>
 800436a:	0d12      	lsrs	r2, r2, #20
 800436c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	4298      	cmp	r0, r3
 8004376:	d11a      	bne.n	80043ae <_strtod_l+0x8fe>
 8004378:	4b93      	ldr	r3, [pc, #588]	; (80045c8 <_strtod_l+0xb18>)
 800437a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800437c:	429a      	cmp	r2, r3
 800437e:	d102      	bne.n	8004386 <_strtod_l+0x8d6>
 8004380:	3001      	adds	r0, #1
 8004382:	f43f add8 	beq.w	8003f36 <_strtod_l+0x486>
 8004386:	f04f 0800 	mov.w	r8, #0
 800438a:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <_strtod_l+0xb14>)
 800438c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800438e:	401a      	ands	r2, r3
 8004390:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004394:	9b05      	ldr	r3, [sp, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d196      	bne.n	80042c8 <_strtod_l+0x818>
 800439a:	e5d7      	b.n	8003f4c <_strtod_l+0x49c>
 800439c:	f04f 33ff 	mov.w	r3, #4294967295
 80043a0:	e7e8      	b.n	8004374 <_strtod_l+0x8c4>
 80043a2:	460b      	mov	r3, r1
 80043a4:	e7e6      	b.n	8004374 <_strtod_l+0x8c4>
 80043a6:	ea53 0308 	orrs.w	r3, r3, r8
 80043aa:	f43f af7d 	beq.w	80042a8 <_strtod_l+0x7f8>
 80043ae:	b1e5      	cbz	r5, 80043ea <_strtod_l+0x93a>
 80043b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b2:	421d      	tst	r5, r3
 80043b4:	d0ee      	beq.n	8004394 <_strtod_l+0x8e4>
 80043b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043b8:	4640      	mov	r0, r8
 80043ba:	4649      	mov	r1, r9
 80043bc:	9a05      	ldr	r2, [sp, #20]
 80043be:	b1c3      	cbz	r3, 80043f2 <_strtod_l+0x942>
 80043c0:	f7ff fb55 	bl	8003a6e <sulp>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043cc:	f7fb fece 	bl	800016c <__adddf3>
 80043d0:	4680      	mov	r8, r0
 80043d2:	4689      	mov	r9, r1
 80043d4:	e7de      	b.n	8004394 <_strtod_l+0x8e4>
 80043d6:	4013      	ands	r3, r2
 80043d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80043dc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80043e0:	f04f 38ff 	mov.w	r8, #4294967295
 80043e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80043e8:	e7d4      	b.n	8004394 <_strtod_l+0x8e4>
 80043ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ec:	ea13 0f08 	tst.w	r3, r8
 80043f0:	e7e0      	b.n	80043b4 <_strtod_l+0x904>
 80043f2:	f7ff fb3c 	bl	8003a6e <sulp>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043fe:	f7fb feb3 	bl	8000168 <__aeabi_dsub>
 8004402:	2200      	movs	r2, #0
 8004404:	2300      	movs	r3, #0
 8004406:	4680      	mov	r8, r0
 8004408:	4689      	mov	r9, r1
 800440a:	f7fc facd 	bl	80009a8 <__aeabi_dcmpeq>
 800440e:	2800      	cmp	r0, #0
 8004410:	d0c0      	beq.n	8004394 <_strtod_l+0x8e4>
 8004412:	e602      	b.n	800401a <_strtod_l+0x56a>
 8004414:	4658      	mov	r0, fp
 8004416:	9904      	ldr	r1, [sp, #16]
 8004418:	f001 f9ae 	bl	8005778 <__ratio>
 800441c:	2200      	movs	r2, #0
 800441e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004422:	4606      	mov	r6, r0
 8004424:	460f      	mov	r7, r1
 8004426:	f7fc fad3 	bl	80009d0 <__aeabi_dcmple>
 800442a:	2800      	cmp	r0, #0
 800442c:	d075      	beq.n	800451a <_strtod_l+0xa6a>
 800442e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004430:	2b00      	cmp	r3, #0
 8004432:	d047      	beq.n	80044c4 <_strtod_l+0xa14>
 8004434:	2600      	movs	r6, #0
 8004436:	4f65      	ldr	r7, [pc, #404]	; (80045cc <_strtod_l+0xb1c>)
 8004438:	4d64      	ldr	r5, [pc, #400]	; (80045cc <_strtod_l+0xb1c>)
 800443a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800443c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004440:	0d1b      	lsrs	r3, r3, #20
 8004442:	051b      	lsls	r3, r3, #20
 8004444:	930f      	str	r3, [sp, #60]	; 0x3c
 8004446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004448:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <_strtod_l+0xb20>)
 800444a:	429a      	cmp	r2, r3
 800444c:	f040 80c8 	bne.w	80045e0 <_strtod_l+0xb30>
 8004450:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004454:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800445a:	4640      	mov	r0, r8
 800445c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004460:	4649      	mov	r1, r9
 8004462:	f001 f8b3 	bl	80055cc <__ulp>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4630      	mov	r0, r6
 800446c:	4639      	mov	r1, r7
 800446e:	f7fc f833 	bl	80004d8 <__aeabi_dmul>
 8004472:	4642      	mov	r2, r8
 8004474:	464b      	mov	r3, r9
 8004476:	f7fb fe79 	bl	800016c <__adddf3>
 800447a:	460b      	mov	r3, r1
 800447c:	4951      	ldr	r1, [pc, #324]	; (80045c4 <_strtod_l+0xb14>)
 800447e:	4a55      	ldr	r2, [pc, #340]	; (80045d4 <_strtod_l+0xb24>)
 8004480:	4019      	ands	r1, r3
 8004482:	4291      	cmp	r1, r2
 8004484:	4680      	mov	r8, r0
 8004486:	d95e      	bls.n	8004546 <_strtod_l+0xa96>
 8004488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800448a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800448e:	4293      	cmp	r3, r2
 8004490:	d103      	bne.n	800449a <_strtod_l+0x9ea>
 8004492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004494:	3301      	adds	r3, #1
 8004496:	f43f ad4e 	beq.w	8003f36 <_strtod_l+0x486>
 800449a:	f04f 38ff 	mov.w	r8, #4294967295
 800449e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80045c8 <_strtod_l+0xb18>
 80044a2:	4650      	mov	r0, sl
 80044a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80044a6:	f000 fd61 	bl	8004f6c <_Bfree>
 80044aa:	4650      	mov	r0, sl
 80044ac:	9906      	ldr	r1, [sp, #24]
 80044ae:	f000 fd5d 	bl	8004f6c <_Bfree>
 80044b2:	4650      	mov	r0, sl
 80044b4:	9904      	ldr	r1, [sp, #16]
 80044b6:	f000 fd59 	bl	8004f6c <_Bfree>
 80044ba:	4659      	mov	r1, fp
 80044bc:	4650      	mov	r0, sl
 80044be:	f000 fd55 	bl	8004f6c <_Bfree>
 80044c2:	e61c      	b.n	80040fe <_strtod_l+0x64e>
 80044c4:	f1b8 0f00 	cmp.w	r8, #0
 80044c8:	d119      	bne.n	80044fe <_strtod_l+0xa4e>
 80044ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d0:	b9e3      	cbnz	r3, 800450c <_strtod_l+0xa5c>
 80044d2:	2200      	movs	r2, #0
 80044d4:	4630      	mov	r0, r6
 80044d6:	4639      	mov	r1, r7
 80044d8:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <_strtod_l+0xb1c>)
 80044da:	f7fc fa6f 	bl	80009bc <__aeabi_dcmplt>
 80044de:	b9c8      	cbnz	r0, 8004514 <_strtod_l+0xa64>
 80044e0:	2200      	movs	r2, #0
 80044e2:	4630      	mov	r0, r6
 80044e4:	4639      	mov	r1, r7
 80044e6:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <_strtod_l+0xb28>)
 80044e8:	f7fb fff6 	bl	80004d8 <__aeabi_dmul>
 80044ec:	4604      	mov	r4, r0
 80044ee:	460d      	mov	r5, r1
 80044f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80044f4:	9418      	str	r4, [sp, #96]	; 0x60
 80044f6:	9319      	str	r3, [sp, #100]	; 0x64
 80044f8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80044fc:	e79d      	b.n	800443a <_strtod_l+0x98a>
 80044fe:	f1b8 0f01 	cmp.w	r8, #1
 8004502:	d103      	bne.n	800450c <_strtod_l+0xa5c>
 8004504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	f43f ad87 	beq.w	800401a <_strtod_l+0x56a>
 800450c:	2600      	movs	r6, #0
 800450e:	2400      	movs	r4, #0
 8004510:	4f32      	ldr	r7, [pc, #200]	; (80045dc <_strtod_l+0xb2c>)
 8004512:	e791      	b.n	8004438 <_strtod_l+0x988>
 8004514:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004516:	4d30      	ldr	r5, [pc, #192]	; (80045d8 <_strtod_l+0xb28>)
 8004518:	e7ea      	b.n	80044f0 <_strtod_l+0xa40>
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <_strtod_l+0xb28>)
 800451c:	2200      	movs	r2, #0
 800451e:	4630      	mov	r0, r6
 8004520:	4639      	mov	r1, r7
 8004522:	f7fb ffd9 	bl	80004d8 <__aeabi_dmul>
 8004526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004528:	4604      	mov	r4, r0
 800452a:	460d      	mov	r5, r1
 800452c:	b933      	cbnz	r3, 800453c <_strtod_l+0xa8c>
 800452e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004532:	9010      	str	r0, [sp, #64]	; 0x40
 8004534:	9311      	str	r3, [sp, #68]	; 0x44
 8004536:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800453a:	e77e      	b.n	800443a <_strtod_l+0x98a>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004544:	e7f7      	b.n	8004536 <_strtod_l+0xa86>
 8004546:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800454a:	9b05      	ldr	r3, [sp, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1a8      	bne.n	80044a2 <_strtod_l+0x9f2>
 8004550:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004556:	0d1b      	lsrs	r3, r3, #20
 8004558:	051b      	lsls	r3, r3, #20
 800455a:	429a      	cmp	r2, r3
 800455c:	d1a1      	bne.n	80044a2 <_strtod_l+0x9f2>
 800455e:	4620      	mov	r0, r4
 8004560:	4629      	mov	r1, r5
 8004562:	f7fc fd5d 	bl	8001020 <__aeabi_d2lz>
 8004566:	f7fb ff89 	bl	800047c <__aeabi_l2d>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fb fdf9 	bl	8000168 <__aeabi_dsub>
 8004576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800457c:	ea43 0308 	orr.w	r3, r3, r8
 8004580:	4313      	orrs	r3, r2
 8004582:	4604      	mov	r4, r0
 8004584:	460d      	mov	r5, r1
 8004586:	d066      	beq.n	8004656 <_strtod_l+0xba6>
 8004588:	a309      	add	r3, pc, #36	; (adr r3, 80045b0 <_strtod_l+0xb00>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f7fc fa15 	bl	80009bc <__aeabi_dcmplt>
 8004592:	2800      	cmp	r0, #0
 8004594:	f47f acda 	bne.w	8003f4c <_strtod_l+0x49c>
 8004598:	a307      	add	r3, pc, #28	; (adr r3, 80045b8 <_strtod_l+0xb08>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f7fc fa29 	bl	80009f8 <__aeabi_dcmpgt>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f43f af7b 	beq.w	80044a2 <_strtod_l+0x9f2>
 80045ac:	e4ce      	b.n	8003f4c <_strtod_l+0x49c>
 80045ae:	bf00      	nop
 80045b0:	94a03595 	.word	0x94a03595
 80045b4:	3fdfffff 	.word	0x3fdfffff
 80045b8:	35afe535 	.word	0x35afe535
 80045bc:	3fe00000 	.word	0x3fe00000
 80045c0:	000fffff 	.word	0x000fffff
 80045c4:	7ff00000 	.word	0x7ff00000
 80045c8:	7fefffff 	.word	0x7fefffff
 80045cc:	3ff00000 	.word	0x3ff00000
 80045d0:	7fe00000 	.word	0x7fe00000
 80045d4:	7c9fffff 	.word	0x7c9fffff
 80045d8:	3fe00000 	.word	0x3fe00000
 80045dc:	bff00000 	.word	0xbff00000
 80045e0:	9b05      	ldr	r3, [sp, #20]
 80045e2:	b313      	cbz	r3, 800462a <_strtod_l+0xb7a>
 80045e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80045ea:	d81e      	bhi.n	800462a <_strtod_l+0xb7a>
 80045ec:	a326      	add	r3, pc, #152	; (adr r3, 8004688 <_strtod_l+0xbd8>)
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fc f9eb 	bl	80009d0 <__aeabi_dcmple>
 80045fa:	b190      	cbz	r0, 8004622 <_strtod_l+0xb72>
 80045fc:	4629      	mov	r1, r5
 80045fe:	4620      	mov	r0, r4
 8004600:	f7fc fa1a 	bl	8000a38 <__aeabi_d2uiz>
 8004604:	2801      	cmp	r0, #1
 8004606:	bf38      	it	cc
 8004608:	2001      	movcc	r0, #1
 800460a:	f7fb feeb 	bl	80003e4 <__aeabi_ui2d>
 800460e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004610:	4604      	mov	r4, r0
 8004612:	460d      	mov	r5, r1
 8004614:	b9d3      	cbnz	r3, 800464c <_strtod_l+0xb9c>
 8004616:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800461a:	9012      	str	r0, [sp, #72]	; 0x48
 800461c:	9313      	str	r3, [sp, #76]	; 0x4c
 800461e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004624:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004628:	1a9f      	subs	r7, r3, r2
 800462a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800462e:	f000 ffcd 	bl	80055cc <__ulp>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4630      	mov	r0, r6
 8004638:	4639      	mov	r1, r7
 800463a:	f7fb ff4d 	bl	80004d8 <__aeabi_dmul>
 800463e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004642:	f7fb fd93 	bl	800016c <__adddf3>
 8004646:	4680      	mov	r8, r0
 8004648:	4689      	mov	r9, r1
 800464a:	e77e      	b.n	800454a <_strtod_l+0xa9a>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004654:	e7e3      	b.n	800461e <_strtod_l+0xb6e>
 8004656:	a30e      	add	r3, pc, #56	; (adr r3, 8004690 <_strtod_l+0xbe0>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f7fc f9ae 	bl	80009bc <__aeabi_dcmplt>
 8004660:	e7a1      	b.n	80045a6 <_strtod_l+0xaf6>
 8004662:	2300      	movs	r3, #0
 8004664:	930c      	str	r3, [sp, #48]	; 0x30
 8004666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004668:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	f7ff ba65 	b.w	8003b3a <_strtod_l+0x8a>
 8004670:	2b65      	cmp	r3, #101	; 0x65
 8004672:	f43f ab5c 	beq.w	8003d2e <_strtod_l+0x27e>
 8004676:	2b45      	cmp	r3, #69	; 0x45
 8004678:	f43f ab59 	beq.w	8003d2e <_strtod_l+0x27e>
 800467c:	2201      	movs	r2, #1
 800467e:	f7ff bb8d 	b.w	8003d9c <_strtod_l+0x2ec>
 8004682:	bf00      	nop
 8004684:	f3af 8000 	nop.w
 8004688:	ffc00000 	.word	0xffc00000
 800468c:	41dfffff 	.word	0x41dfffff
 8004690:	94a03595 	.word	0x94a03595
 8004694:	3fcfffff 	.word	0x3fcfffff

08004698 <strtod>:
 8004698:	460a      	mov	r2, r1
 800469a:	4601      	mov	r1, r0
 800469c:	4802      	ldr	r0, [pc, #8]	; (80046a8 <strtod+0x10>)
 800469e:	4b03      	ldr	r3, [pc, #12]	; (80046ac <strtod+0x14>)
 80046a0:	6800      	ldr	r0, [r0, #0]
 80046a2:	f7ff ba05 	b.w	8003ab0 <_strtod_l>
 80046a6:	bf00      	nop
 80046a8:	20000010 	.word	0x20000010
 80046ac:	20000078 	.word	0x20000078

080046b0 <strtok>:
 80046b0:	4b16      	ldr	r3, [pc, #88]	; (800470c <strtok+0x5c>)
 80046b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b6:	681f      	ldr	r7, [r3, #0]
 80046b8:	4605      	mov	r5, r0
 80046ba:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80046bc:	460e      	mov	r6, r1
 80046be:	b9ec      	cbnz	r4, 80046fc <strtok+0x4c>
 80046c0:	2050      	movs	r0, #80	; 0x50
 80046c2:	f7ff f8c7 	bl	8003854 <malloc>
 80046c6:	4602      	mov	r2, r0
 80046c8:	65b8      	str	r0, [r7, #88]	; 0x58
 80046ca:	b920      	cbnz	r0, 80046d6 <strtok+0x26>
 80046cc:	2157      	movs	r1, #87	; 0x57
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <strtok+0x60>)
 80046d0:	4810      	ldr	r0, [pc, #64]	; (8004714 <strtok+0x64>)
 80046d2:	f000 f849 	bl	8004768 <__assert_func>
 80046d6:	e9c0 4400 	strd	r4, r4, [r0]
 80046da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80046de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80046e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80046e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80046ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80046ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80046f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80046f6:	6184      	str	r4, [r0, #24]
 80046f8:	7704      	strb	r4, [r0, #28]
 80046fa:	6244      	str	r4, [r0, #36]	; 0x24
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004702:	2301      	movs	r3, #1
 8004704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004708:	f000 b806 	b.w	8004718 <__strtok_r>
 800470c:	20000010 	.word	0x20000010
 8004710:	08007c60 	.word	0x08007c60
 8004714:	08007c77 	.word	0x08007c77

08004718 <__strtok_r>:
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b908      	cbnz	r0, 8004720 <__strtok_r+0x8>
 800471c:	6810      	ldr	r0, [r2, #0]
 800471e:	b188      	cbz	r0, 8004744 <__strtok_r+0x2c>
 8004720:	4604      	mov	r4, r0
 8004722:	460f      	mov	r7, r1
 8004724:	4620      	mov	r0, r4
 8004726:	f814 5b01 	ldrb.w	r5, [r4], #1
 800472a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800472e:	b91e      	cbnz	r6, 8004738 <__strtok_r+0x20>
 8004730:	b965      	cbnz	r5, 800474c <__strtok_r+0x34>
 8004732:	4628      	mov	r0, r5
 8004734:	6015      	str	r5, [r2, #0]
 8004736:	e005      	b.n	8004744 <__strtok_r+0x2c>
 8004738:	42b5      	cmp	r5, r6
 800473a:	d1f6      	bne.n	800472a <__strtok_r+0x12>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <__strtok_r+0xa>
 8004740:	6014      	str	r4, [r2, #0]
 8004742:	7003      	strb	r3, [r0, #0]
 8004744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004746:	461c      	mov	r4, r3
 8004748:	e00c      	b.n	8004764 <__strtok_r+0x4c>
 800474a:	b915      	cbnz	r5, 8004752 <__strtok_r+0x3a>
 800474c:	460e      	mov	r6, r1
 800474e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004752:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004756:	42ab      	cmp	r3, r5
 8004758:	d1f7      	bne.n	800474a <__strtok_r+0x32>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f3      	beq.n	8004746 <__strtok_r+0x2e>
 800475e:	2300      	movs	r3, #0
 8004760:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004764:	6014      	str	r4, [r2, #0]
 8004766:	e7ed      	b.n	8004744 <__strtok_r+0x2c>

08004768 <__assert_func>:
 8004768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800476a:	4614      	mov	r4, r2
 800476c:	461a      	mov	r2, r3
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <__assert_func+0x2c>)
 8004770:	4605      	mov	r5, r0
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68d8      	ldr	r0, [r3, #12]
 8004776:	b14c      	cbz	r4, 800478c <__assert_func+0x24>
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <__assert_func+0x30>)
 800477a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800477e:	9100      	str	r1, [sp, #0]
 8004780:	462b      	mov	r3, r5
 8004782:	4906      	ldr	r1, [pc, #24]	; (800479c <__assert_func+0x34>)
 8004784:	f000 f80e 	bl	80047a4 <fiprintf>
 8004788:	f001 fda6 	bl	80062d8 <abort>
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <__assert_func+0x38>)
 800478e:	461c      	mov	r4, r3
 8004790:	e7f3      	b.n	800477a <__assert_func+0x12>
 8004792:	bf00      	nop
 8004794:	20000010 	.word	0x20000010
 8004798:	08007cd8 	.word	0x08007cd8
 800479c:	08007ce5 	.word	0x08007ce5
 80047a0:	08007d13 	.word	0x08007d13

080047a4 <fiprintf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	b503      	push	{r0, r1, lr}
 80047a8:	4601      	mov	r1, r0
 80047aa:	ab03      	add	r3, sp, #12
 80047ac:	4805      	ldr	r0, [pc, #20]	; (80047c4 <fiprintf+0x20>)
 80047ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80047b2:	6800      	ldr	r0, [r0, #0]
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	f001 f9e3 	bl	8005b80 <_vfiprintf_r>
 80047ba:	b002      	add	sp, #8
 80047bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80047c0:	b003      	add	sp, #12
 80047c2:	4770      	bx	lr
 80047c4:	20000010 	.word	0x20000010

080047c8 <rshift>:
 80047c8:	6903      	ldr	r3, [r0, #16]
 80047ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80047d2:	f100 0414 	add.w	r4, r0, #20
 80047d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80047da:	dd46      	ble.n	800486a <rshift+0xa2>
 80047dc:	f011 011f 	ands.w	r1, r1, #31
 80047e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80047e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80047e8:	d10c      	bne.n	8004804 <rshift+0x3c>
 80047ea:	4629      	mov	r1, r5
 80047ec:	f100 0710 	add.w	r7, r0, #16
 80047f0:	42b1      	cmp	r1, r6
 80047f2:	d335      	bcc.n	8004860 <rshift+0x98>
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	1eea      	subs	r2, r5, #3
 80047fa:	4296      	cmp	r6, r2
 80047fc:	bf38      	it	cc
 80047fe:	2300      	movcc	r3, #0
 8004800:	4423      	add	r3, r4
 8004802:	e015      	b.n	8004830 <rshift+0x68>
 8004804:	46a1      	mov	r9, r4
 8004806:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800480a:	f1c1 0820 	rsb	r8, r1, #32
 800480e:	40cf      	lsrs	r7, r1
 8004810:	f105 0e04 	add.w	lr, r5, #4
 8004814:	4576      	cmp	r6, lr
 8004816:	46f4      	mov	ip, lr
 8004818:	d816      	bhi.n	8004848 <rshift+0x80>
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009a      	lsls	r2, r3, #2
 800481e:	3a04      	subs	r2, #4
 8004820:	3501      	adds	r5, #1
 8004822:	42ae      	cmp	r6, r5
 8004824:	bf38      	it	cc
 8004826:	2200      	movcc	r2, #0
 8004828:	18a3      	adds	r3, r4, r2
 800482a:	50a7      	str	r7, [r4, r2]
 800482c:	b107      	cbz	r7, 8004830 <rshift+0x68>
 800482e:	3304      	adds	r3, #4
 8004830:	42a3      	cmp	r3, r4
 8004832:	eba3 0204 	sub.w	r2, r3, r4
 8004836:	bf08      	it	eq
 8004838:	2300      	moveq	r3, #0
 800483a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800483e:	6102      	str	r2, [r0, #16]
 8004840:	bf08      	it	eq
 8004842:	6143      	streq	r3, [r0, #20]
 8004844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004848:	f8dc c000 	ldr.w	ip, [ip]
 800484c:	fa0c fc08 	lsl.w	ip, ip, r8
 8004850:	ea4c 0707 	orr.w	r7, ip, r7
 8004854:	f849 7b04 	str.w	r7, [r9], #4
 8004858:	f85e 7b04 	ldr.w	r7, [lr], #4
 800485c:	40cf      	lsrs	r7, r1
 800485e:	e7d9      	b.n	8004814 <rshift+0x4c>
 8004860:	f851 cb04 	ldr.w	ip, [r1], #4
 8004864:	f847 cf04 	str.w	ip, [r7, #4]!
 8004868:	e7c2      	b.n	80047f0 <rshift+0x28>
 800486a:	4623      	mov	r3, r4
 800486c:	e7e0      	b.n	8004830 <rshift+0x68>

0800486e <__hexdig_fun>:
 800486e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004872:	2b09      	cmp	r3, #9
 8004874:	d802      	bhi.n	800487c <__hexdig_fun+0xe>
 8004876:	3820      	subs	r0, #32
 8004878:	b2c0      	uxtb	r0, r0
 800487a:	4770      	bx	lr
 800487c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004880:	2b05      	cmp	r3, #5
 8004882:	d801      	bhi.n	8004888 <__hexdig_fun+0x1a>
 8004884:	3847      	subs	r0, #71	; 0x47
 8004886:	e7f7      	b.n	8004878 <__hexdig_fun+0xa>
 8004888:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800488c:	2b05      	cmp	r3, #5
 800488e:	d801      	bhi.n	8004894 <__hexdig_fun+0x26>
 8004890:	3827      	subs	r0, #39	; 0x27
 8004892:	e7f1      	b.n	8004878 <__hexdig_fun+0xa>
 8004894:	2000      	movs	r0, #0
 8004896:	4770      	bx	lr

08004898 <__gethex>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	b08b      	sub	sp, #44	; 0x2c
 800489e:	9306      	str	r3, [sp, #24]
 80048a0:	4bb9      	ldr	r3, [pc, #740]	; (8004b88 <__gethex+0x2f0>)
 80048a2:	9002      	str	r0, [sp, #8]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	468b      	mov	fp, r1
 80048a8:	4618      	mov	r0, r3
 80048aa:	4690      	mov	r8, r2
 80048ac:	9303      	str	r3, [sp, #12]
 80048ae:	f7fb fc4f 	bl	8000150 <strlen>
 80048b2:	4682      	mov	sl, r0
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	f8db 2000 	ldr.w	r2, [fp]
 80048ba:	4403      	add	r3, r0
 80048bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80048c0:	9307      	str	r3, [sp, #28]
 80048c2:	1c93      	adds	r3, r2, #2
 80048c4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80048c8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80048cc:	32fe      	adds	r2, #254	; 0xfe
 80048ce:	18d1      	adds	r1, r2, r3
 80048d0:	461f      	mov	r7, r3
 80048d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80048d6:	9101      	str	r1, [sp, #4]
 80048d8:	2830      	cmp	r0, #48	; 0x30
 80048da:	d0f8      	beq.n	80048ce <__gethex+0x36>
 80048dc:	f7ff ffc7 	bl	800486e <__hexdig_fun>
 80048e0:	4604      	mov	r4, r0
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d13a      	bne.n	800495c <__gethex+0xc4>
 80048e6:	4652      	mov	r2, sl
 80048e8:	4638      	mov	r0, r7
 80048ea:	9903      	ldr	r1, [sp, #12]
 80048ec:	f001 fc14 	bl	8006118 <strncmp>
 80048f0:	4605      	mov	r5, r0
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d166      	bne.n	80049c4 <__gethex+0x12c>
 80048f6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80048fa:	eb07 060a 	add.w	r6, r7, sl
 80048fe:	f7ff ffb6 	bl	800486e <__hexdig_fun>
 8004902:	2800      	cmp	r0, #0
 8004904:	d060      	beq.n	80049c8 <__gethex+0x130>
 8004906:	4633      	mov	r3, r6
 8004908:	7818      	ldrb	r0, [r3, #0]
 800490a:	461f      	mov	r7, r3
 800490c:	2830      	cmp	r0, #48	; 0x30
 800490e:	f103 0301 	add.w	r3, r3, #1
 8004912:	d0f9      	beq.n	8004908 <__gethex+0x70>
 8004914:	f7ff ffab 	bl	800486e <__hexdig_fun>
 8004918:	2301      	movs	r3, #1
 800491a:	fab0 f480 	clz	r4, r0
 800491e:	4635      	mov	r5, r6
 8004920:	0964      	lsrs	r4, r4, #5
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	463a      	mov	r2, r7
 8004926:	4616      	mov	r6, r2
 8004928:	7830      	ldrb	r0, [r6, #0]
 800492a:	3201      	adds	r2, #1
 800492c:	f7ff ff9f 	bl	800486e <__hexdig_fun>
 8004930:	2800      	cmp	r0, #0
 8004932:	d1f8      	bne.n	8004926 <__gethex+0x8e>
 8004934:	4652      	mov	r2, sl
 8004936:	4630      	mov	r0, r6
 8004938:	9903      	ldr	r1, [sp, #12]
 800493a:	f001 fbed 	bl	8006118 <strncmp>
 800493e:	b980      	cbnz	r0, 8004962 <__gethex+0xca>
 8004940:	b94d      	cbnz	r5, 8004956 <__gethex+0xbe>
 8004942:	eb06 050a 	add.w	r5, r6, sl
 8004946:	462a      	mov	r2, r5
 8004948:	4616      	mov	r6, r2
 800494a:	7830      	ldrb	r0, [r6, #0]
 800494c:	3201      	adds	r2, #1
 800494e:	f7ff ff8e 	bl	800486e <__hexdig_fun>
 8004952:	2800      	cmp	r0, #0
 8004954:	d1f8      	bne.n	8004948 <__gethex+0xb0>
 8004956:	1bad      	subs	r5, r5, r6
 8004958:	00ad      	lsls	r5, r5, #2
 800495a:	e004      	b.n	8004966 <__gethex+0xce>
 800495c:	2400      	movs	r4, #0
 800495e:	4625      	mov	r5, r4
 8004960:	e7e0      	b.n	8004924 <__gethex+0x8c>
 8004962:	2d00      	cmp	r5, #0
 8004964:	d1f7      	bne.n	8004956 <__gethex+0xbe>
 8004966:	7833      	ldrb	r3, [r6, #0]
 8004968:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800496c:	2b50      	cmp	r3, #80	; 0x50
 800496e:	d139      	bne.n	80049e4 <__gethex+0x14c>
 8004970:	7873      	ldrb	r3, [r6, #1]
 8004972:	2b2b      	cmp	r3, #43	; 0x2b
 8004974:	d02a      	beq.n	80049cc <__gethex+0x134>
 8004976:	2b2d      	cmp	r3, #45	; 0x2d
 8004978:	d02c      	beq.n	80049d4 <__gethex+0x13c>
 800497a:	f04f 0900 	mov.w	r9, #0
 800497e:	1c71      	adds	r1, r6, #1
 8004980:	7808      	ldrb	r0, [r1, #0]
 8004982:	f7ff ff74 	bl	800486e <__hexdig_fun>
 8004986:	1e43      	subs	r3, r0, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b18      	cmp	r3, #24
 800498c:	d82a      	bhi.n	80049e4 <__gethex+0x14c>
 800498e:	f1a0 0210 	sub.w	r2, r0, #16
 8004992:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004996:	f7ff ff6a 	bl	800486e <__hexdig_fun>
 800499a:	1e43      	subs	r3, r0, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b18      	cmp	r3, #24
 80049a0:	d91b      	bls.n	80049da <__gethex+0x142>
 80049a2:	f1b9 0f00 	cmp.w	r9, #0
 80049a6:	d000      	beq.n	80049aa <__gethex+0x112>
 80049a8:	4252      	negs	r2, r2
 80049aa:	4415      	add	r5, r2
 80049ac:	f8cb 1000 	str.w	r1, [fp]
 80049b0:	b1d4      	cbz	r4, 80049e8 <__gethex+0x150>
 80049b2:	9b01      	ldr	r3, [sp, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf14      	ite	ne
 80049b8:	2700      	movne	r7, #0
 80049ba:	2706      	moveq	r7, #6
 80049bc:	4638      	mov	r0, r7
 80049be:	b00b      	add	sp, #44	; 0x2c
 80049c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c4:	463e      	mov	r6, r7
 80049c6:	4625      	mov	r5, r4
 80049c8:	2401      	movs	r4, #1
 80049ca:	e7cc      	b.n	8004966 <__gethex+0xce>
 80049cc:	f04f 0900 	mov.w	r9, #0
 80049d0:	1cb1      	adds	r1, r6, #2
 80049d2:	e7d5      	b.n	8004980 <__gethex+0xe8>
 80049d4:	f04f 0901 	mov.w	r9, #1
 80049d8:	e7fa      	b.n	80049d0 <__gethex+0x138>
 80049da:	230a      	movs	r3, #10
 80049dc:	fb03 0202 	mla	r2, r3, r2, r0
 80049e0:	3a10      	subs	r2, #16
 80049e2:	e7d6      	b.n	8004992 <__gethex+0xfa>
 80049e4:	4631      	mov	r1, r6
 80049e6:	e7e1      	b.n	80049ac <__gethex+0x114>
 80049e8:	4621      	mov	r1, r4
 80049ea:	1bf3      	subs	r3, r6, r7
 80049ec:	3b01      	subs	r3, #1
 80049ee:	2b07      	cmp	r3, #7
 80049f0:	dc0a      	bgt.n	8004a08 <__gethex+0x170>
 80049f2:	9802      	ldr	r0, [sp, #8]
 80049f4:	f000 fa7a 	bl	8004eec <_Balloc>
 80049f8:	4604      	mov	r4, r0
 80049fa:	b940      	cbnz	r0, 8004a0e <__gethex+0x176>
 80049fc:	4602      	mov	r2, r0
 80049fe:	21de      	movs	r1, #222	; 0xde
 8004a00:	4b62      	ldr	r3, [pc, #392]	; (8004b8c <__gethex+0x2f4>)
 8004a02:	4863      	ldr	r0, [pc, #396]	; (8004b90 <__gethex+0x2f8>)
 8004a04:	f7ff feb0 	bl	8004768 <__assert_func>
 8004a08:	3101      	adds	r1, #1
 8004a0a:	105b      	asrs	r3, r3, #1
 8004a0c:	e7ef      	b.n	80049ee <__gethex+0x156>
 8004a0e:	f04f 0b00 	mov.w	fp, #0
 8004a12:	f100 0914 	add.w	r9, r0, #20
 8004a16:	f1ca 0301 	rsb	r3, sl, #1
 8004a1a:	f8cd 9010 	str.w	r9, [sp, #16]
 8004a1e:	f8cd b004 	str.w	fp, [sp, #4]
 8004a22:	9308      	str	r3, [sp, #32]
 8004a24:	42b7      	cmp	r7, r6
 8004a26:	d33f      	bcc.n	8004aa8 <__gethex+0x210>
 8004a28:	9f04      	ldr	r7, [sp, #16]
 8004a2a:	9b01      	ldr	r3, [sp, #4]
 8004a2c:	f847 3b04 	str.w	r3, [r7], #4
 8004a30:	eba7 0709 	sub.w	r7, r7, r9
 8004a34:	10bf      	asrs	r7, r7, #2
 8004a36:	6127      	str	r7, [r4, #16]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fb4d 	bl	80050d8 <__hi0bits>
 8004a3e:	017f      	lsls	r7, r7, #5
 8004a40:	f8d8 6000 	ldr.w	r6, [r8]
 8004a44:	1a3f      	subs	r7, r7, r0
 8004a46:	42b7      	cmp	r7, r6
 8004a48:	dd62      	ble.n	8004b10 <__gethex+0x278>
 8004a4a:	1bbf      	subs	r7, r7, r6
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f000 fee3 	bl	800581a <__any_on>
 8004a54:	4682      	mov	sl, r0
 8004a56:	b1a8      	cbz	r0, 8004a84 <__gethex+0x1ec>
 8004a58:	f04f 0a01 	mov.w	sl, #1
 8004a5c:	1e7b      	subs	r3, r7, #1
 8004a5e:	1159      	asrs	r1, r3, #5
 8004a60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004a64:	f003 021f 	and.w	r2, r3, #31
 8004a68:	fa0a f202 	lsl.w	r2, sl, r2
 8004a6c:	420a      	tst	r2, r1
 8004a6e:	d009      	beq.n	8004a84 <__gethex+0x1ec>
 8004a70:	4553      	cmp	r3, sl
 8004a72:	dd05      	ble.n	8004a80 <__gethex+0x1e8>
 8004a74:	4620      	mov	r0, r4
 8004a76:	1eb9      	subs	r1, r7, #2
 8004a78:	f000 fecf 	bl	800581a <__any_on>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d144      	bne.n	8004b0a <__gethex+0x272>
 8004a80:	f04f 0a02 	mov.w	sl, #2
 8004a84:	4639      	mov	r1, r7
 8004a86:	4620      	mov	r0, r4
 8004a88:	f7ff fe9e 	bl	80047c8 <rshift>
 8004a8c:	443d      	add	r5, r7
 8004a8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004a92:	42ab      	cmp	r3, r5
 8004a94:	da4a      	bge.n	8004b2c <__gethex+0x294>
 8004a96:	4621      	mov	r1, r4
 8004a98:	9802      	ldr	r0, [sp, #8]
 8004a9a:	f000 fa67 	bl	8004f6c <_Bfree>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004aa2:	27a3      	movs	r7, #163	; 0xa3
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e789      	b.n	80049bc <__gethex+0x124>
 8004aa8:	1e73      	subs	r3, r6, #1
 8004aaa:	9a07      	ldr	r2, [sp, #28]
 8004aac:	9305      	str	r3, [sp, #20]
 8004aae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d019      	beq.n	8004aea <__gethex+0x252>
 8004ab6:	f1bb 0f20 	cmp.w	fp, #32
 8004aba:	d107      	bne.n	8004acc <__gethex+0x234>
 8004abc:	9b04      	ldr	r3, [sp, #16]
 8004abe:	9a01      	ldr	r2, [sp, #4]
 8004ac0:	f843 2b04 	str.w	r2, [r3], #4
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	469b      	mov	fp, r3
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004ad0:	f7ff fecd 	bl	800486e <__hexdig_fun>
 8004ad4:	9b01      	ldr	r3, [sp, #4]
 8004ad6:	f000 000f 	and.w	r0, r0, #15
 8004ada:	fa00 f00b 	lsl.w	r0, r0, fp
 8004ade:	4303      	orrs	r3, r0
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	f10b 0b04 	add.w	fp, fp, #4
 8004ae6:	9b05      	ldr	r3, [sp, #20]
 8004ae8:	e00d      	b.n	8004b06 <__gethex+0x26e>
 8004aea:	9b05      	ldr	r3, [sp, #20]
 8004aec:	9a08      	ldr	r2, [sp, #32]
 8004aee:	4413      	add	r3, r2
 8004af0:	42bb      	cmp	r3, r7
 8004af2:	d3e0      	bcc.n	8004ab6 <__gethex+0x21e>
 8004af4:	4618      	mov	r0, r3
 8004af6:	4652      	mov	r2, sl
 8004af8:	9903      	ldr	r1, [sp, #12]
 8004afa:	9309      	str	r3, [sp, #36]	; 0x24
 8004afc:	f001 fb0c 	bl	8006118 <strncmp>
 8004b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d1d7      	bne.n	8004ab6 <__gethex+0x21e>
 8004b06:	461e      	mov	r6, r3
 8004b08:	e78c      	b.n	8004a24 <__gethex+0x18c>
 8004b0a:	f04f 0a03 	mov.w	sl, #3
 8004b0e:	e7b9      	b.n	8004a84 <__gethex+0x1ec>
 8004b10:	da09      	bge.n	8004b26 <__gethex+0x28e>
 8004b12:	1bf7      	subs	r7, r6, r7
 8004b14:	4621      	mov	r1, r4
 8004b16:	463a      	mov	r2, r7
 8004b18:	9802      	ldr	r0, [sp, #8]
 8004b1a:	f000 fc3f 	bl	800539c <__lshift>
 8004b1e:	4604      	mov	r4, r0
 8004b20:	1bed      	subs	r5, r5, r7
 8004b22:	f100 0914 	add.w	r9, r0, #20
 8004b26:	f04f 0a00 	mov.w	sl, #0
 8004b2a:	e7b0      	b.n	8004a8e <__gethex+0x1f6>
 8004b2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004b30:	42a8      	cmp	r0, r5
 8004b32:	dd71      	ble.n	8004c18 <__gethex+0x380>
 8004b34:	1b45      	subs	r5, r0, r5
 8004b36:	42ae      	cmp	r6, r5
 8004b38:	dc34      	bgt.n	8004ba4 <__gethex+0x30c>
 8004b3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d028      	beq.n	8004b94 <__gethex+0x2fc>
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d02a      	beq.n	8004b9c <__gethex+0x304>
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d115      	bne.n	8004b76 <__gethex+0x2de>
 8004b4a:	42ae      	cmp	r6, r5
 8004b4c:	d113      	bne.n	8004b76 <__gethex+0x2de>
 8004b4e:	2e01      	cmp	r6, #1
 8004b50:	d10b      	bne.n	8004b6a <__gethex+0x2d2>
 8004b52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004b56:	9a06      	ldr	r2, [sp, #24]
 8004b58:	2762      	movs	r7, #98	; 0x62
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	6123      	str	r3, [r4, #16]
 8004b60:	f8c9 3000 	str.w	r3, [r9]
 8004b64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b66:	601c      	str	r4, [r3, #0]
 8004b68:	e728      	b.n	80049bc <__gethex+0x124>
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	1e71      	subs	r1, r6, #1
 8004b6e:	f000 fe54 	bl	800581a <__any_on>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d1ed      	bne.n	8004b52 <__gethex+0x2ba>
 8004b76:	4621      	mov	r1, r4
 8004b78:	9802      	ldr	r0, [sp, #8]
 8004b7a:	f000 f9f7 	bl	8004f6c <_Bfree>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b82:	2750      	movs	r7, #80	; 0x50
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e719      	b.n	80049bc <__gethex+0x124>
 8004b88:	08007d90 	.word	0x08007d90
 8004b8c:	08007d14 	.word	0x08007d14
 8004b90:	08007d25 	.word	0x08007d25
 8004b94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1ed      	bne.n	8004b76 <__gethex+0x2de>
 8004b9a:	e7da      	b.n	8004b52 <__gethex+0x2ba>
 8004b9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1d7      	bne.n	8004b52 <__gethex+0x2ba>
 8004ba2:	e7e8      	b.n	8004b76 <__gethex+0x2de>
 8004ba4:	1e6f      	subs	r7, r5, #1
 8004ba6:	f1ba 0f00 	cmp.w	sl, #0
 8004baa:	d132      	bne.n	8004c12 <__gethex+0x37a>
 8004bac:	b127      	cbz	r7, 8004bb8 <__gethex+0x320>
 8004bae:	4639      	mov	r1, r7
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 fe32 	bl	800581a <__any_on>
 8004bb6:	4682      	mov	sl, r0
 8004bb8:	2101      	movs	r1, #1
 8004bba:	117b      	asrs	r3, r7, #5
 8004bbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004bc0:	f007 071f 	and.w	r7, r7, #31
 8004bc4:	fa01 f707 	lsl.w	r7, r1, r7
 8004bc8:	421f      	tst	r7, r3
 8004bca:	f04f 0702 	mov.w	r7, #2
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	bf18      	it	ne
 8004bd4:	f04a 0a02 	orrne.w	sl, sl, #2
 8004bd8:	1b76      	subs	r6, r6, r5
 8004bda:	f7ff fdf5 	bl	80047c8 <rshift>
 8004bde:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004be2:	f1ba 0f00 	cmp.w	sl, #0
 8004be6:	d048      	beq.n	8004c7a <__gethex+0x3e2>
 8004be8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d015      	beq.n	8004c1c <__gethex+0x384>
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d017      	beq.n	8004c24 <__gethex+0x38c>
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d109      	bne.n	8004c0c <__gethex+0x374>
 8004bf8:	f01a 0f02 	tst.w	sl, #2
 8004bfc:	d006      	beq.n	8004c0c <__gethex+0x374>
 8004bfe:	f8d9 0000 	ldr.w	r0, [r9]
 8004c02:	ea4a 0a00 	orr.w	sl, sl, r0
 8004c06:	f01a 0f01 	tst.w	sl, #1
 8004c0a:	d10e      	bne.n	8004c2a <__gethex+0x392>
 8004c0c:	f047 0710 	orr.w	r7, r7, #16
 8004c10:	e033      	b.n	8004c7a <__gethex+0x3e2>
 8004c12:	f04f 0a01 	mov.w	sl, #1
 8004c16:	e7cf      	b.n	8004bb8 <__gethex+0x320>
 8004c18:	2701      	movs	r7, #1
 8004c1a:	e7e2      	b.n	8004be2 <__gethex+0x34a>
 8004c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c1e:	f1c3 0301 	rsb	r3, r3, #1
 8004c22:	9315      	str	r3, [sp, #84]	; 0x54
 8004c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <__gethex+0x374>
 8004c2a:	f04f 0c00 	mov.w	ip, #0
 8004c2e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004c32:	f104 0314 	add.w	r3, r4, #20
 8004c36:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004c3a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004c48:	d01c      	beq.n	8004c84 <__gethex+0x3ec>
 8004c4a:	3201      	adds	r2, #1
 8004c4c:	6002      	str	r2, [r0, #0]
 8004c4e:	2f02      	cmp	r7, #2
 8004c50:	f104 0314 	add.w	r3, r4, #20
 8004c54:	d13d      	bne.n	8004cd2 <__gethex+0x43a>
 8004c56:	f8d8 2000 	ldr.w	r2, [r8]
 8004c5a:	3a01      	subs	r2, #1
 8004c5c:	42b2      	cmp	r2, r6
 8004c5e:	d10a      	bne.n	8004c76 <__gethex+0x3de>
 8004c60:	2201      	movs	r2, #1
 8004c62:	1171      	asrs	r1, r6, #5
 8004c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004c68:	f006 061f 	and.w	r6, r6, #31
 8004c6c:	fa02 f606 	lsl.w	r6, r2, r6
 8004c70:	421e      	tst	r6, r3
 8004c72:	bf18      	it	ne
 8004c74:	4617      	movne	r7, r2
 8004c76:	f047 0720 	orr.w	r7, r7, #32
 8004c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c7c:	601c      	str	r4, [r3, #0]
 8004c7e:	9b06      	ldr	r3, [sp, #24]
 8004c80:	601d      	str	r5, [r3, #0]
 8004c82:	e69b      	b.n	80049bc <__gethex+0x124>
 8004c84:	4299      	cmp	r1, r3
 8004c86:	f843 cc04 	str.w	ip, [r3, #-4]
 8004c8a:	d8d8      	bhi.n	8004c3e <__gethex+0x3a6>
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	459b      	cmp	fp, r3
 8004c90:	db17      	blt.n	8004cc2 <__gethex+0x42a>
 8004c92:	6861      	ldr	r1, [r4, #4]
 8004c94:	9802      	ldr	r0, [sp, #8]
 8004c96:	3101      	adds	r1, #1
 8004c98:	f000 f928 	bl	8004eec <_Balloc>
 8004c9c:	4681      	mov	r9, r0
 8004c9e:	b918      	cbnz	r0, 8004ca8 <__gethex+0x410>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	2184      	movs	r1, #132	; 0x84
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <__gethex+0x474>)
 8004ca6:	e6ac      	b.n	8004a02 <__gethex+0x16a>
 8004ca8:	6922      	ldr	r2, [r4, #16]
 8004caa:	f104 010c 	add.w	r1, r4, #12
 8004cae:	3202      	adds	r2, #2
 8004cb0:	0092      	lsls	r2, r2, #2
 8004cb2:	300c      	adds	r0, #12
 8004cb4:	f000 f900 	bl	8004eb8 <memcpy>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	9802      	ldr	r0, [sp, #8]
 8004cbc:	f000 f956 	bl	8004f6c <_Bfree>
 8004cc0:	464c      	mov	r4, r9
 8004cc2:	6923      	ldr	r3, [r4, #16]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	6122      	str	r2, [r4, #16]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cce:	615a      	str	r2, [r3, #20]
 8004cd0:	e7bd      	b.n	8004c4e <__gethex+0x3b6>
 8004cd2:	6922      	ldr	r2, [r4, #16]
 8004cd4:	455a      	cmp	r2, fp
 8004cd6:	dd0b      	ble.n	8004cf0 <__gethex+0x458>
 8004cd8:	2101      	movs	r1, #1
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7ff fd74 	bl	80047c8 <rshift>
 8004ce0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004ce4:	3501      	adds	r5, #1
 8004ce6:	42ab      	cmp	r3, r5
 8004ce8:	f6ff aed5 	blt.w	8004a96 <__gethex+0x1fe>
 8004cec:	2701      	movs	r7, #1
 8004cee:	e7c2      	b.n	8004c76 <__gethex+0x3de>
 8004cf0:	f016 061f 	ands.w	r6, r6, #31
 8004cf4:	d0fa      	beq.n	8004cec <__gethex+0x454>
 8004cf6:	449a      	add	sl, r3
 8004cf8:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004cfc:	f000 f9ec 	bl	80050d8 <__hi0bits>
 8004d00:	f1c6 0620 	rsb	r6, r6, #32
 8004d04:	42b0      	cmp	r0, r6
 8004d06:	dbe7      	blt.n	8004cd8 <__gethex+0x440>
 8004d08:	e7f0      	b.n	8004cec <__gethex+0x454>
 8004d0a:	bf00      	nop
 8004d0c:	08007d14 	.word	0x08007d14

08004d10 <L_shift>:
 8004d10:	f1c2 0208 	rsb	r2, r2, #8
 8004d14:	0092      	lsls	r2, r2, #2
 8004d16:	b570      	push	{r4, r5, r6, lr}
 8004d18:	f1c2 0620 	rsb	r6, r2, #32
 8004d1c:	6843      	ldr	r3, [r0, #4]
 8004d1e:	6804      	ldr	r4, [r0, #0]
 8004d20:	fa03 f506 	lsl.w	r5, r3, r6
 8004d24:	432c      	orrs	r4, r5
 8004d26:	40d3      	lsrs	r3, r2
 8004d28:	6004      	str	r4, [r0, #0]
 8004d2a:	f840 3f04 	str.w	r3, [r0, #4]!
 8004d2e:	4288      	cmp	r0, r1
 8004d30:	d3f4      	bcc.n	8004d1c <L_shift+0xc>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}

08004d34 <__match>:
 8004d34:	b530      	push	{r4, r5, lr}
 8004d36:	6803      	ldr	r3, [r0, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d3e:	b914      	cbnz	r4, 8004d46 <__match+0x12>
 8004d40:	6003      	str	r3, [r0, #0]
 8004d42:	2001      	movs	r0, #1
 8004d44:	bd30      	pop	{r4, r5, pc}
 8004d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004d4e:	2d19      	cmp	r5, #25
 8004d50:	bf98      	it	ls
 8004d52:	3220      	addls	r2, #32
 8004d54:	42a2      	cmp	r2, r4
 8004d56:	d0f0      	beq.n	8004d3a <__match+0x6>
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e7f3      	b.n	8004d44 <__match+0x10>

08004d5c <__hexnan>:
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	2500      	movs	r5, #0
 8004d62:	680b      	ldr	r3, [r1, #0]
 8004d64:	4682      	mov	sl, r0
 8004d66:	115e      	asrs	r6, r3, #5
 8004d68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004d6c:	f013 031f 	ands.w	r3, r3, #31
 8004d70:	bf18      	it	ne
 8004d72:	3604      	addne	r6, #4
 8004d74:	1f37      	subs	r7, r6, #4
 8004d76:	4690      	mov	r8, r2
 8004d78:	46b9      	mov	r9, r7
 8004d7a:	463c      	mov	r4, r7
 8004d7c:	46ab      	mov	fp, r5
 8004d7e:	b087      	sub	sp, #28
 8004d80:	6801      	ldr	r1, [r0, #0]
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	f846 5c04 	str.w	r5, [r6, #-4]
 8004d88:	9502      	str	r5, [sp, #8]
 8004d8a:	784a      	ldrb	r2, [r1, #1]
 8004d8c:	1c4b      	adds	r3, r1, #1
 8004d8e:	9303      	str	r3, [sp, #12]
 8004d90:	b342      	cbz	r2, 8004de4 <__hexnan+0x88>
 8004d92:	4610      	mov	r0, r2
 8004d94:	9105      	str	r1, [sp, #20]
 8004d96:	9204      	str	r2, [sp, #16]
 8004d98:	f7ff fd69 	bl	800486e <__hexdig_fun>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d14f      	bne.n	8004e40 <__hexnan+0xe4>
 8004da0:	9a04      	ldr	r2, [sp, #16]
 8004da2:	9905      	ldr	r1, [sp, #20]
 8004da4:	2a20      	cmp	r2, #32
 8004da6:	d818      	bhi.n	8004dda <__hexnan+0x7e>
 8004da8:	9b02      	ldr	r3, [sp, #8]
 8004daa:	459b      	cmp	fp, r3
 8004dac:	dd13      	ble.n	8004dd6 <__hexnan+0x7a>
 8004dae:	454c      	cmp	r4, r9
 8004db0:	d206      	bcs.n	8004dc0 <__hexnan+0x64>
 8004db2:	2d07      	cmp	r5, #7
 8004db4:	dc04      	bgt.n	8004dc0 <__hexnan+0x64>
 8004db6:	462a      	mov	r2, r5
 8004db8:	4649      	mov	r1, r9
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f7ff ffa8 	bl	8004d10 <L_shift>
 8004dc0:	4544      	cmp	r4, r8
 8004dc2:	d950      	bls.n	8004e66 <__hexnan+0x10a>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f1a4 0904 	sub.w	r9, r4, #4
 8004dca:	f844 3c04 	str.w	r3, [r4, #-4]
 8004dce:	461d      	mov	r5, r3
 8004dd0:	464c      	mov	r4, r9
 8004dd2:	f8cd b008 	str.w	fp, [sp, #8]
 8004dd6:	9903      	ldr	r1, [sp, #12]
 8004dd8:	e7d7      	b.n	8004d8a <__hexnan+0x2e>
 8004dda:	2a29      	cmp	r2, #41	; 0x29
 8004ddc:	d156      	bne.n	8004e8c <__hexnan+0x130>
 8004dde:	3102      	adds	r1, #2
 8004de0:	f8ca 1000 	str.w	r1, [sl]
 8004de4:	f1bb 0f00 	cmp.w	fp, #0
 8004de8:	d050      	beq.n	8004e8c <__hexnan+0x130>
 8004dea:	454c      	cmp	r4, r9
 8004dec:	d206      	bcs.n	8004dfc <__hexnan+0xa0>
 8004dee:	2d07      	cmp	r5, #7
 8004df0:	dc04      	bgt.n	8004dfc <__hexnan+0xa0>
 8004df2:	462a      	mov	r2, r5
 8004df4:	4649      	mov	r1, r9
 8004df6:	4620      	mov	r0, r4
 8004df8:	f7ff ff8a 	bl	8004d10 <L_shift>
 8004dfc:	4544      	cmp	r4, r8
 8004dfe:	d934      	bls.n	8004e6a <__hexnan+0x10e>
 8004e00:	4623      	mov	r3, r4
 8004e02:	f1a8 0204 	sub.w	r2, r8, #4
 8004e06:	f853 1b04 	ldr.w	r1, [r3], #4
 8004e0a:	429f      	cmp	r7, r3
 8004e0c:	f842 1f04 	str.w	r1, [r2, #4]!
 8004e10:	d2f9      	bcs.n	8004e06 <__hexnan+0xaa>
 8004e12:	1b3b      	subs	r3, r7, r4
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	3304      	adds	r3, #4
 8004e1a:	3401      	adds	r4, #1
 8004e1c:	3e03      	subs	r6, #3
 8004e1e:	42b4      	cmp	r4, r6
 8004e20:	bf88      	it	hi
 8004e22:	2304      	movhi	r3, #4
 8004e24:	2200      	movs	r2, #0
 8004e26:	4443      	add	r3, r8
 8004e28:	f843 2b04 	str.w	r2, [r3], #4
 8004e2c:	429f      	cmp	r7, r3
 8004e2e:	d2fb      	bcs.n	8004e28 <__hexnan+0xcc>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	b91b      	cbnz	r3, 8004e3c <__hexnan+0xe0>
 8004e34:	4547      	cmp	r7, r8
 8004e36:	d127      	bne.n	8004e88 <__hexnan+0x12c>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	2005      	movs	r0, #5
 8004e3e:	e026      	b.n	8004e8e <__hexnan+0x132>
 8004e40:	3501      	adds	r5, #1
 8004e42:	2d08      	cmp	r5, #8
 8004e44:	f10b 0b01 	add.w	fp, fp, #1
 8004e48:	dd06      	ble.n	8004e58 <__hexnan+0xfc>
 8004e4a:	4544      	cmp	r4, r8
 8004e4c:	d9c3      	bls.n	8004dd6 <__hexnan+0x7a>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2501      	movs	r5, #1
 8004e52:	f844 3c04 	str.w	r3, [r4, #-4]
 8004e56:	3c04      	subs	r4, #4
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	f000 000f 	and.w	r0, r0, #15
 8004e5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004e62:	6022      	str	r2, [r4, #0]
 8004e64:	e7b7      	b.n	8004dd6 <__hexnan+0x7a>
 8004e66:	2508      	movs	r5, #8
 8004e68:	e7b5      	b.n	8004dd6 <__hexnan+0x7a>
 8004e6a:	9b01      	ldr	r3, [sp, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0df      	beq.n	8004e30 <__hexnan+0xd4>
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	f1c3 0320 	rsb	r3, r3, #32
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004e80:	401a      	ands	r2, r3
 8004e82:	f846 2c04 	str.w	r2, [r6, #-4]
 8004e86:	e7d3      	b.n	8004e30 <__hexnan+0xd4>
 8004e88:	3f04      	subs	r7, #4
 8004e8a:	e7d1      	b.n	8004e30 <__hexnan+0xd4>
 8004e8c:	2004      	movs	r0, #4
 8004e8e:	b007      	add	sp, #28
 8004e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e94 <__ascii_mbtowc>:
 8004e94:	b082      	sub	sp, #8
 8004e96:	b901      	cbnz	r1, 8004e9a <__ascii_mbtowc+0x6>
 8004e98:	a901      	add	r1, sp, #4
 8004e9a:	b142      	cbz	r2, 8004eae <__ascii_mbtowc+0x1a>
 8004e9c:	b14b      	cbz	r3, 8004eb2 <__ascii_mbtowc+0x1e>
 8004e9e:	7813      	ldrb	r3, [r2, #0]
 8004ea0:	600b      	str	r3, [r1, #0]
 8004ea2:	7812      	ldrb	r2, [r2, #0]
 8004ea4:	1e10      	subs	r0, r2, #0
 8004ea6:	bf18      	it	ne
 8004ea8:	2001      	movne	r0, #1
 8004eaa:	b002      	add	sp, #8
 8004eac:	4770      	bx	lr
 8004eae:	4610      	mov	r0, r2
 8004eb0:	e7fb      	b.n	8004eaa <__ascii_mbtowc+0x16>
 8004eb2:	f06f 0001 	mvn.w	r0, #1
 8004eb6:	e7f8      	b.n	8004eaa <__ascii_mbtowc+0x16>

08004eb8 <memcpy>:
 8004eb8:	440a      	add	r2, r1
 8004eba:	4291      	cmp	r1, r2
 8004ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec0:	d100      	bne.n	8004ec4 <memcpy+0xc>
 8004ec2:	4770      	bx	lr
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ed0:	d1f9      	bne.n	8004ec6 <memcpy+0xe>
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <__malloc_lock>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	; (8004edc <__malloc_lock+0x8>)
 8004ed6:	f001 bbbf 	b.w	8006658 <__retarget_lock_acquire_recursive>
 8004eda:	bf00      	nop
 8004edc:	200003c4 	.word	0x200003c4

08004ee0 <__malloc_unlock>:
 8004ee0:	4801      	ldr	r0, [pc, #4]	; (8004ee8 <__malloc_unlock+0x8>)
 8004ee2:	f001 bbba 	b.w	800665a <__retarget_lock_release_recursive>
 8004ee6:	bf00      	nop
 8004ee8:	200003c4 	.word	0x200003c4

08004eec <_Balloc>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	b976      	cbnz	r6, 8004f14 <_Balloc+0x28>
 8004ef6:	2010      	movs	r0, #16
 8004ef8:	f7fe fcac 	bl	8003854 <malloc>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6260      	str	r0, [r4, #36]	; 0x24
 8004f00:	b920      	cbnz	r0, 8004f0c <_Balloc+0x20>
 8004f02:	2166      	movs	r1, #102	; 0x66
 8004f04:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <_Balloc+0x78>)
 8004f06:	4818      	ldr	r0, [pc, #96]	; (8004f68 <_Balloc+0x7c>)
 8004f08:	f7ff fc2e 	bl	8004768 <__assert_func>
 8004f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f10:	6006      	str	r6, [r0, #0]
 8004f12:	60c6      	str	r6, [r0, #12]
 8004f14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f16:	68f3      	ldr	r3, [r6, #12]
 8004f18:	b183      	cbz	r3, 8004f3c <_Balloc+0x50>
 8004f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f22:	b9b8      	cbnz	r0, 8004f54 <_Balloc+0x68>
 8004f24:	2101      	movs	r1, #1
 8004f26:	fa01 f605 	lsl.w	r6, r1, r5
 8004f2a:	1d72      	adds	r2, r6, #5
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	0092      	lsls	r2, r2, #2
 8004f30:	f000 fc94 	bl	800585c <_calloc_r>
 8004f34:	b160      	cbz	r0, 8004f50 <_Balloc+0x64>
 8004f36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f3a:	e00e      	b.n	8004f5a <_Balloc+0x6e>
 8004f3c:	2221      	movs	r2, #33	; 0x21
 8004f3e:	2104      	movs	r1, #4
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 fc8b 	bl	800585c <_calloc_r>
 8004f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f48:	60f0      	str	r0, [r6, #12]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e4      	bne.n	8004f1a <_Balloc+0x2e>
 8004f50:	2000      	movs	r0, #0
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	6802      	ldr	r2, [r0, #0]
 8004f56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f60:	e7f7      	b.n	8004f52 <_Balloc+0x66>
 8004f62:	bf00      	nop
 8004f64:	08007c60 	.word	0x08007c60
 8004f68:	08007da4 	.word	0x08007da4

08004f6c <_Bfree>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f70:	4605      	mov	r5, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	b976      	cbnz	r6, 8004f94 <_Bfree+0x28>
 8004f76:	2010      	movs	r0, #16
 8004f78:	f7fe fc6c 	bl	8003854 <malloc>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6268      	str	r0, [r5, #36]	; 0x24
 8004f80:	b920      	cbnz	r0, 8004f8c <_Bfree+0x20>
 8004f82:	218a      	movs	r1, #138	; 0x8a
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <_Bfree+0x3c>)
 8004f86:	4809      	ldr	r0, [pc, #36]	; (8004fac <_Bfree+0x40>)
 8004f88:	f7ff fbee 	bl	8004768 <__assert_func>
 8004f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f90:	6006      	str	r6, [r0, #0]
 8004f92:	60c6      	str	r6, [r0, #12]
 8004f94:	b13c      	cbz	r4, 8004fa6 <_Bfree+0x3a>
 8004f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f98:	6862      	ldr	r2, [r4, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fa0:	6021      	str	r1, [r4, #0]
 8004fa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	08007c60 	.word	0x08007c60
 8004fac:	08007da4 	.word	0x08007da4

08004fb0 <__multadd>:
 8004fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb4:	4698      	mov	r8, r3
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	2300      	movs	r3, #0
 8004fba:	690e      	ldr	r6, [r1, #16]
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	f101 0014 	add.w	r0, r1, #20
 8004fc2:	6805      	ldr	r5, [r0, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	b2a9      	uxth	r1, r5
 8004fc8:	fb02 8101 	mla	r1, r2, r1, r8
 8004fcc:	0c2d      	lsrs	r5, r5, #16
 8004fce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004fd2:	fb02 c505 	mla	r5, r2, r5, ip
 8004fd6:	b289      	uxth	r1, r1
 8004fd8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004fdc:	429e      	cmp	r6, r3
 8004fde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004fe2:	f840 1b04 	str.w	r1, [r0], #4
 8004fe6:	dcec      	bgt.n	8004fc2 <__multadd+0x12>
 8004fe8:	f1b8 0f00 	cmp.w	r8, #0
 8004fec:	d022      	beq.n	8005034 <__multadd+0x84>
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	42b3      	cmp	r3, r6
 8004ff2:	dc19      	bgt.n	8005028 <__multadd+0x78>
 8004ff4:	6861      	ldr	r1, [r4, #4]
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	3101      	adds	r1, #1
 8004ffa:	f7ff ff77 	bl	8004eec <_Balloc>
 8004ffe:	4605      	mov	r5, r0
 8005000:	b928      	cbnz	r0, 800500e <__multadd+0x5e>
 8005002:	4602      	mov	r2, r0
 8005004:	21b5      	movs	r1, #181	; 0xb5
 8005006:	4b0d      	ldr	r3, [pc, #52]	; (800503c <__multadd+0x8c>)
 8005008:	480d      	ldr	r0, [pc, #52]	; (8005040 <__multadd+0x90>)
 800500a:	f7ff fbad 	bl	8004768 <__assert_func>
 800500e:	6922      	ldr	r2, [r4, #16]
 8005010:	f104 010c 	add.w	r1, r4, #12
 8005014:	3202      	adds	r2, #2
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	300c      	adds	r0, #12
 800501a:	f7ff ff4d 	bl	8004eb8 <memcpy>
 800501e:	4621      	mov	r1, r4
 8005020:	4638      	mov	r0, r7
 8005022:	f7ff ffa3 	bl	8004f6c <_Bfree>
 8005026:	462c      	mov	r4, r5
 8005028:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800502c:	3601      	adds	r6, #1
 800502e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005032:	6126      	str	r6, [r4, #16]
 8005034:	4620      	mov	r0, r4
 8005036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800503a:	bf00      	nop
 800503c:	08007d14 	.word	0x08007d14
 8005040:	08007da4 	.word	0x08007da4

08005044 <__s2b>:
 8005044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005048:	4615      	mov	r5, r2
 800504a:	2209      	movs	r2, #9
 800504c:	461f      	mov	r7, r3
 800504e:	3308      	adds	r3, #8
 8005050:	460c      	mov	r4, r1
 8005052:	fb93 f3f2 	sdiv	r3, r3, r2
 8005056:	4606      	mov	r6, r0
 8005058:	2201      	movs	r2, #1
 800505a:	2100      	movs	r1, #0
 800505c:	429a      	cmp	r2, r3
 800505e:	db09      	blt.n	8005074 <__s2b+0x30>
 8005060:	4630      	mov	r0, r6
 8005062:	f7ff ff43 	bl	8004eec <_Balloc>
 8005066:	b940      	cbnz	r0, 800507a <__s2b+0x36>
 8005068:	4602      	mov	r2, r0
 800506a:	21ce      	movs	r1, #206	; 0xce
 800506c:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <__s2b+0x8c>)
 800506e:	4819      	ldr	r0, [pc, #100]	; (80050d4 <__s2b+0x90>)
 8005070:	f7ff fb7a 	bl	8004768 <__assert_func>
 8005074:	0052      	lsls	r2, r2, #1
 8005076:	3101      	adds	r1, #1
 8005078:	e7f0      	b.n	800505c <__s2b+0x18>
 800507a:	9b08      	ldr	r3, [sp, #32]
 800507c:	2d09      	cmp	r5, #9
 800507e:	6143      	str	r3, [r0, #20]
 8005080:	f04f 0301 	mov.w	r3, #1
 8005084:	6103      	str	r3, [r0, #16]
 8005086:	dd16      	ble.n	80050b6 <__s2b+0x72>
 8005088:	f104 0909 	add.w	r9, r4, #9
 800508c:	46c8      	mov	r8, r9
 800508e:	442c      	add	r4, r5
 8005090:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005094:	4601      	mov	r1, r0
 8005096:	220a      	movs	r2, #10
 8005098:	4630      	mov	r0, r6
 800509a:	3b30      	subs	r3, #48	; 0x30
 800509c:	f7ff ff88 	bl	8004fb0 <__multadd>
 80050a0:	45a0      	cmp	r8, r4
 80050a2:	d1f5      	bne.n	8005090 <__s2b+0x4c>
 80050a4:	f1a5 0408 	sub.w	r4, r5, #8
 80050a8:	444c      	add	r4, r9
 80050aa:	1b2d      	subs	r5, r5, r4
 80050ac:	1963      	adds	r3, r4, r5
 80050ae:	42bb      	cmp	r3, r7
 80050b0:	db04      	blt.n	80050bc <__s2b+0x78>
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b6:	2509      	movs	r5, #9
 80050b8:	340a      	adds	r4, #10
 80050ba:	e7f6      	b.n	80050aa <__s2b+0x66>
 80050bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050c0:	4601      	mov	r1, r0
 80050c2:	220a      	movs	r2, #10
 80050c4:	4630      	mov	r0, r6
 80050c6:	3b30      	subs	r3, #48	; 0x30
 80050c8:	f7ff ff72 	bl	8004fb0 <__multadd>
 80050cc:	e7ee      	b.n	80050ac <__s2b+0x68>
 80050ce:	bf00      	nop
 80050d0:	08007d14 	.word	0x08007d14
 80050d4:	08007da4 	.word	0x08007da4

080050d8 <__hi0bits>:
 80050d8:	0c02      	lsrs	r2, r0, #16
 80050da:	0412      	lsls	r2, r2, #16
 80050dc:	4603      	mov	r3, r0
 80050de:	b9ca      	cbnz	r2, 8005114 <__hi0bits+0x3c>
 80050e0:	0403      	lsls	r3, r0, #16
 80050e2:	2010      	movs	r0, #16
 80050e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80050e8:	bf04      	itt	eq
 80050ea:	021b      	lsleq	r3, r3, #8
 80050ec:	3008      	addeq	r0, #8
 80050ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80050f2:	bf04      	itt	eq
 80050f4:	011b      	lsleq	r3, r3, #4
 80050f6:	3004      	addeq	r0, #4
 80050f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80050fc:	bf04      	itt	eq
 80050fe:	009b      	lsleq	r3, r3, #2
 8005100:	3002      	addeq	r0, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	db05      	blt.n	8005112 <__hi0bits+0x3a>
 8005106:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800510a:	f100 0001 	add.w	r0, r0, #1
 800510e:	bf08      	it	eq
 8005110:	2020      	moveq	r0, #32
 8005112:	4770      	bx	lr
 8005114:	2000      	movs	r0, #0
 8005116:	e7e5      	b.n	80050e4 <__hi0bits+0xc>

08005118 <__lo0bits>:
 8005118:	6803      	ldr	r3, [r0, #0]
 800511a:	4602      	mov	r2, r0
 800511c:	f013 0007 	ands.w	r0, r3, #7
 8005120:	d00b      	beq.n	800513a <__lo0bits+0x22>
 8005122:	07d9      	lsls	r1, r3, #31
 8005124:	d422      	bmi.n	800516c <__lo0bits+0x54>
 8005126:	0798      	lsls	r0, r3, #30
 8005128:	bf49      	itett	mi
 800512a:	085b      	lsrmi	r3, r3, #1
 800512c:	089b      	lsrpl	r3, r3, #2
 800512e:	2001      	movmi	r0, #1
 8005130:	6013      	strmi	r3, [r2, #0]
 8005132:	bf5c      	itt	pl
 8005134:	2002      	movpl	r0, #2
 8005136:	6013      	strpl	r3, [r2, #0]
 8005138:	4770      	bx	lr
 800513a:	b299      	uxth	r1, r3
 800513c:	b909      	cbnz	r1, 8005142 <__lo0bits+0x2a>
 800513e:	2010      	movs	r0, #16
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005146:	bf04      	itt	eq
 8005148:	0a1b      	lsreq	r3, r3, #8
 800514a:	3008      	addeq	r0, #8
 800514c:	0719      	lsls	r1, r3, #28
 800514e:	bf04      	itt	eq
 8005150:	091b      	lsreq	r3, r3, #4
 8005152:	3004      	addeq	r0, #4
 8005154:	0799      	lsls	r1, r3, #30
 8005156:	bf04      	itt	eq
 8005158:	089b      	lsreq	r3, r3, #2
 800515a:	3002      	addeq	r0, #2
 800515c:	07d9      	lsls	r1, r3, #31
 800515e:	d403      	bmi.n	8005168 <__lo0bits+0x50>
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	f100 0001 	add.w	r0, r0, #1
 8005166:	d003      	beq.n	8005170 <__lo0bits+0x58>
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4770      	bx	lr
 800516c:	2000      	movs	r0, #0
 800516e:	4770      	bx	lr
 8005170:	2020      	movs	r0, #32
 8005172:	4770      	bx	lr

08005174 <__i2b>:
 8005174:	b510      	push	{r4, lr}
 8005176:	460c      	mov	r4, r1
 8005178:	2101      	movs	r1, #1
 800517a:	f7ff feb7 	bl	8004eec <_Balloc>
 800517e:	4602      	mov	r2, r0
 8005180:	b928      	cbnz	r0, 800518e <__i2b+0x1a>
 8005182:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005186:	4b04      	ldr	r3, [pc, #16]	; (8005198 <__i2b+0x24>)
 8005188:	4804      	ldr	r0, [pc, #16]	; (800519c <__i2b+0x28>)
 800518a:	f7ff faed 	bl	8004768 <__assert_func>
 800518e:	2301      	movs	r3, #1
 8005190:	6144      	str	r4, [r0, #20]
 8005192:	6103      	str	r3, [r0, #16]
 8005194:	bd10      	pop	{r4, pc}
 8005196:	bf00      	nop
 8005198:	08007d14 	.word	0x08007d14
 800519c:	08007da4 	.word	0x08007da4

080051a0 <__multiply>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	4614      	mov	r4, r2
 80051a6:	690a      	ldr	r2, [r1, #16]
 80051a8:	6923      	ldr	r3, [r4, #16]
 80051aa:	460d      	mov	r5, r1
 80051ac:	429a      	cmp	r2, r3
 80051ae:	bfbe      	ittt	lt
 80051b0:	460b      	movlt	r3, r1
 80051b2:	4625      	movlt	r5, r4
 80051b4:	461c      	movlt	r4, r3
 80051b6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80051ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80051be:	68ab      	ldr	r3, [r5, #8]
 80051c0:	6869      	ldr	r1, [r5, #4]
 80051c2:	eb0a 0709 	add.w	r7, sl, r9
 80051c6:	42bb      	cmp	r3, r7
 80051c8:	b085      	sub	sp, #20
 80051ca:	bfb8      	it	lt
 80051cc:	3101      	addlt	r1, #1
 80051ce:	f7ff fe8d 	bl	8004eec <_Balloc>
 80051d2:	b930      	cbnz	r0, 80051e2 <__multiply+0x42>
 80051d4:	4602      	mov	r2, r0
 80051d6:	f240 115d 	movw	r1, #349	; 0x15d
 80051da:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <__multiply+0x140>)
 80051dc:	4841      	ldr	r0, [pc, #260]	; (80052e4 <__multiply+0x144>)
 80051de:	f7ff fac3 	bl	8004768 <__assert_func>
 80051e2:	f100 0614 	add.w	r6, r0, #20
 80051e6:	4633      	mov	r3, r6
 80051e8:	2200      	movs	r2, #0
 80051ea:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80051ee:	4543      	cmp	r3, r8
 80051f0:	d31e      	bcc.n	8005230 <__multiply+0x90>
 80051f2:	f105 0c14 	add.w	ip, r5, #20
 80051f6:	f104 0314 	add.w	r3, r4, #20
 80051fa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80051fe:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005202:	9202      	str	r2, [sp, #8]
 8005204:	ebac 0205 	sub.w	r2, ip, r5
 8005208:	3a15      	subs	r2, #21
 800520a:	f022 0203 	bic.w	r2, r2, #3
 800520e:	3204      	adds	r2, #4
 8005210:	f105 0115 	add.w	r1, r5, #21
 8005214:	458c      	cmp	ip, r1
 8005216:	bf38      	it	cc
 8005218:	2204      	movcc	r2, #4
 800521a:	9201      	str	r2, [sp, #4]
 800521c:	9a02      	ldr	r2, [sp, #8]
 800521e:	9303      	str	r3, [sp, #12]
 8005220:	429a      	cmp	r2, r3
 8005222:	d808      	bhi.n	8005236 <__multiply+0x96>
 8005224:	2f00      	cmp	r7, #0
 8005226:	dc55      	bgt.n	80052d4 <__multiply+0x134>
 8005228:	6107      	str	r7, [r0, #16]
 800522a:	b005      	add	sp, #20
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005230:	f843 2b04 	str.w	r2, [r3], #4
 8005234:	e7db      	b.n	80051ee <__multiply+0x4e>
 8005236:	f8b3 a000 	ldrh.w	sl, [r3]
 800523a:	f1ba 0f00 	cmp.w	sl, #0
 800523e:	d020      	beq.n	8005282 <__multiply+0xe2>
 8005240:	46b1      	mov	r9, r6
 8005242:	2200      	movs	r2, #0
 8005244:	f105 0e14 	add.w	lr, r5, #20
 8005248:	f85e 4b04 	ldr.w	r4, [lr], #4
 800524c:	f8d9 b000 	ldr.w	fp, [r9]
 8005250:	b2a1      	uxth	r1, r4
 8005252:	fa1f fb8b 	uxth.w	fp, fp
 8005256:	fb0a b101 	mla	r1, sl, r1, fp
 800525a:	4411      	add	r1, r2
 800525c:	f8d9 2000 	ldr.w	r2, [r9]
 8005260:	0c24      	lsrs	r4, r4, #16
 8005262:	0c12      	lsrs	r2, r2, #16
 8005264:	fb0a 2404 	mla	r4, sl, r4, r2
 8005268:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800526c:	b289      	uxth	r1, r1
 800526e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005272:	45f4      	cmp	ip, lr
 8005274:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005278:	f849 1b04 	str.w	r1, [r9], #4
 800527c:	d8e4      	bhi.n	8005248 <__multiply+0xa8>
 800527e:	9901      	ldr	r1, [sp, #4]
 8005280:	5072      	str	r2, [r6, r1]
 8005282:	9a03      	ldr	r2, [sp, #12]
 8005284:	3304      	adds	r3, #4
 8005286:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800528a:	f1b9 0f00 	cmp.w	r9, #0
 800528e:	d01f      	beq.n	80052d0 <__multiply+0x130>
 8005290:	46b6      	mov	lr, r6
 8005292:	f04f 0a00 	mov.w	sl, #0
 8005296:	6834      	ldr	r4, [r6, #0]
 8005298:	f105 0114 	add.w	r1, r5, #20
 800529c:	880a      	ldrh	r2, [r1, #0]
 800529e:	f8be b002 	ldrh.w	fp, [lr, #2]
 80052a2:	b2a4      	uxth	r4, r4
 80052a4:	fb09 b202 	mla	r2, r9, r2, fp
 80052a8:	4492      	add	sl, r2
 80052aa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80052ae:	f84e 4b04 	str.w	r4, [lr], #4
 80052b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80052b6:	f8be 2000 	ldrh.w	r2, [lr]
 80052ba:	0c24      	lsrs	r4, r4, #16
 80052bc:	fb09 2404 	mla	r4, r9, r4, r2
 80052c0:	458c      	cmp	ip, r1
 80052c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80052c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80052ca:	d8e7      	bhi.n	800529c <__multiply+0xfc>
 80052cc:	9a01      	ldr	r2, [sp, #4]
 80052ce:	50b4      	str	r4, [r6, r2]
 80052d0:	3604      	adds	r6, #4
 80052d2:	e7a3      	b.n	800521c <__multiply+0x7c>
 80052d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1a5      	bne.n	8005228 <__multiply+0x88>
 80052dc:	3f01      	subs	r7, #1
 80052de:	e7a1      	b.n	8005224 <__multiply+0x84>
 80052e0:	08007d14 	.word	0x08007d14
 80052e4:	08007da4 	.word	0x08007da4

080052e8 <__pow5mult>:
 80052e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ec:	4615      	mov	r5, r2
 80052ee:	f012 0203 	ands.w	r2, r2, #3
 80052f2:	4606      	mov	r6, r0
 80052f4:	460f      	mov	r7, r1
 80052f6:	d007      	beq.n	8005308 <__pow5mult+0x20>
 80052f8:	4c25      	ldr	r4, [pc, #148]	; (8005390 <__pow5mult+0xa8>)
 80052fa:	3a01      	subs	r2, #1
 80052fc:	2300      	movs	r3, #0
 80052fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005302:	f7ff fe55 	bl	8004fb0 <__multadd>
 8005306:	4607      	mov	r7, r0
 8005308:	10ad      	asrs	r5, r5, #2
 800530a:	d03d      	beq.n	8005388 <__pow5mult+0xa0>
 800530c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800530e:	b97c      	cbnz	r4, 8005330 <__pow5mult+0x48>
 8005310:	2010      	movs	r0, #16
 8005312:	f7fe fa9f 	bl	8003854 <malloc>
 8005316:	4602      	mov	r2, r0
 8005318:	6270      	str	r0, [r6, #36]	; 0x24
 800531a:	b928      	cbnz	r0, 8005328 <__pow5mult+0x40>
 800531c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <__pow5mult+0xac>)
 8005322:	481d      	ldr	r0, [pc, #116]	; (8005398 <__pow5mult+0xb0>)
 8005324:	f7ff fa20 	bl	8004768 <__assert_func>
 8005328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800532c:	6004      	str	r4, [r0, #0]
 800532e:	60c4      	str	r4, [r0, #12]
 8005330:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005338:	b94c      	cbnz	r4, 800534e <__pow5mult+0x66>
 800533a:	f240 2171 	movw	r1, #625	; 0x271
 800533e:	4630      	mov	r0, r6
 8005340:	f7ff ff18 	bl	8005174 <__i2b>
 8005344:	2300      	movs	r3, #0
 8005346:	4604      	mov	r4, r0
 8005348:	f8c8 0008 	str.w	r0, [r8, #8]
 800534c:	6003      	str	r3, [r0, #0]
 800534e:	f04f 0900 	mov.w	r9, #0
 8005352:	07eb      	lsls	r3, r5, #31
 8005354:	d50a      	bpl.n	800536c <__pow5mult+0x84>
 8005356:	4639      	mov	r1, r7
 8005358:	4622      	mov	r2, r4
 800535a:	4630      	mov	r0, r6
 800535c:	f7ff ff20 	bl	80051a0 <__multiply>
 8005360:	4680      	mov	r8, r0
 8005362:	4639      	mov	r1, r7
 8005364:	4630      	mov	r0, r6
 8005366:	f7ff fe01 	bl	8004f6c <_Bfree>
 800536a:	4647      	mov	r7, r8
 800536c:	106d      	asrs	r5, r5, #1
 800536e:	d00b      	beq.n	8005388 <__pow5mult+0xa0>
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	b938      	cbnz	r0, 8005384 <__pow5mult+0x9c>
 8005374:	4622      	mov	r2, r4
 8005376:	4621      	mov	r1, r4
 8005378:	4630      	mov	r0, r6
 800537a:	f7ff ff11 	bl	80051a0 <__multiply>
 800537e:	6020      	str	r0, [r4, #0]
 8005380:	f8c0 9000 	str.w	r9, [r0]
 8005384:	4604      	mov	r4, r0
 8005386:	e7e4      	b.n	8005352 <__pow5mult+0x6a>
 8005388:	4638      	mov	r0, r7
 800538a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800538e:	bf00      	nop
 8005390:	08007ef8 	.word	0x08007ef8
 8005394:	08007c60 	.word	0x08007c60
 8005398:	08007da4 	.word	0x08007da4

0800539c <__lshift>:
 800539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	460c      	mov	r4, r1
 80053a2:	4607      	mov	r7, r0
 80053a4:	4691      	mov	r9, r2
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	6849      	ldr	r1, [r1, #4]
 80053aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053ae:	68a3      	ldr	r3, [r4, #8]
 80053b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053b4:	f108 0601 	add.w	r6, r8, #1
 80053b8:	42b3      	cmp	r3, r6
 80053ba:	db0b      	blt.n	80053d4 <__lshift+0x38>
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff fd95 	bl	8004eec <_Balloc>
 80053c2:	4605      	mov	r5, r0
 80053c4:	b948      	cbnz	r0, 80053da <__lshift+0x3e>
 80053c6:	4602      	mov	r2, r0
 80053c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80053cc:	4b27      	ldr	r3, [pc, #156]	; (800546c <__lshift+0xd0>)
 80053ce:	4828      	ldr	r0, [pc, #160]	; (8005470 <__lshift+0xd4>)
 80053d0:	f7ff f9ca 	bl	8004768 <__assert_func>
 80053d4:	3101      	adds	r1, #1
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	e7ee      	b.n	80053b8 <__lshift+0x1c>
 80053da:	2300      	movs	r3, #0
 80053dc:	f100 0114 	add.w	r1, r0, #20
 80053e0:	f100 0210 	add.w	r2, r0, #16
 80053e4:	4618      	mov	r0, r3
 80053e6:	4553      	cmp	r3, sl
 80053e8:	db33      	blt.n	8005452 <__lshift+0xb6>
 80053ea:	6920      	ldr	r0, [r4, #16]
 80053ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053f0:	f104 0314 	add.w	r3, r4, #20
 80053f4:	f019 091f 	ands.w	r9, r9, #31
 80053f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005400:	d02b      	beq.n	800545a <__lshift+0xbe>
 8005402:	468a      	mov	sl, r1
 8005404:	2200      	movs	r2, #0
 8005406:	f1c9 0e20 	rsb	lr, r9, #32
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	fa00 f009 	lsl.w	r0, r0, r9
 8005410:	4302      	orrs	r2, r0
 8005412:	f84a 2b04 	str.w	r2, [sl], #4
 8005416:	f853 2b04 	ldr.w	r2, [r3], #4
 800541a:	459c      	cmp	ip, r3
 800541c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005420:	d8f3      	bhi.n	800540a <__lshift+0x6e>
 8005422:	ebac 0304 	sub.w	r3, ip, r4
 8005426:	3b15      	subs	r3, #21
 8005428:	f023 0303 	bic.w	r3, r3, #3
 800542c:	3304      	adds	r3, #4
 800542e:	f104 0015 	add.w	r0, r4, #21
 8005432:	4584      	cmp	ip, r0
 8005434:	bf38      	it	cc
 8005436:	2304      	movcc	r3, #4
 8005438:	50ca      	str	r2, [r1, r3]
 800543a:	b10a      	cbz	r2, 8005440 <__lshift+0xa4>
 800543c:	f108 0602 	add.w	r6, r8, #2
 8005440:	3e01      	subs	r6, #1
 8005442:	4638      	mov	r0, r7
 8005444:	4621      	mov	r1, r4
 8005446:	612e      	str	r6, [r5, #16]
 8005448:	f7ff fd90 	bl	8004f6c <_Bfree>
 800544c:	4628      	mov	r0, r5
 800544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005452:	f842 0f04 	str.w	r0, [r2, #4]!
 8005456:	3301      	adds	r3, #1
 8005458:	e7c5      	b.n	80053e6 <__lshift+0x4a>
 800545a:	3904      	subs	r1, #4
 800545c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005460:	459c      	cmp	ip, r3
 8005462:	f841 2f04 	str.w	r2, [r1, #4]!
 8005466:	d8f9      	bhi.n	800545c <__lshift+0xc0>
 8005468:	e7ea      	b.n	8005440 <__lshift+0xa4>
 800546a:	bf00      	nop
 800546c:	08007d14 	.word	0x08007d14
 8005470:	08007da4 	.word	0x08007da4

08005474 <__mcmp>:
 8005474:	4603      	mov	r3, r0
 8005476:	690a      	ldr	r2, [r1, #16]
 8005478:	6900      	ldr	r0, [r0, #16]
 800547a:	b530      	push	{r4, r5, lr}
 800547c:	1a80      	subs	r0, r0, r2
 800547e:	d10d      	bne.n	800549c <__mcmp+0x28>
 8005480:	3314      	adds	r3, #20
 8005482:	3114      	adds	r1, #20
 8005484:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005488:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800548c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005494:	4295      	cmp	r5, r2
 8005496:	d002      	beq.n	800549e <__mcmp+0x2a>
 8005498:	d304      	bcc.n	80054a4 <__mcmp+0x30>
 800549a:	2001      	movs	r0, #1
 800549c:	bd30      	pop	{r4, r5, pc}
 800549e:	42a3      	cmp	r3, r4
 80054a0:	d3f4      	bcc.n	800548c <__mcmp+0x18>
 80054a2:	e7fb      	b.n	800549c <__mcmp+0x28>
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	e7f8      	b.n	800549c <__mcmp+0x28>
	...

080054ac <__mdiff>:
 80054ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	460c      	mov	r4, r1
 80054b2:	4606      	mov	r6, r0
 80054b4:	4611      	mov	r1, r2
 80054b6:	4620      	mov	r0, r4
 80054b8:	4692      	mov	sl, r2
 80054ba:	f7ff ffdb 	bl	8005474 <__mcmp>
 80054be:	1e05      	subs	r5, r0, #0
 80054c0:	d111      	bne.n	80054e6 <__mdiff+0x3a>
 80054c2:	4629      	mov	r1, r5
 80054c4:	4630      	mov	r0, r6
 80054c6:	f7ff fd11 	bl	8004eec <_Balloc>
 80054ca:	4602      	mov	r2, r0
 80054cc:	b928      	cbnz	r0, 80054da <__mdiff+0x2e>
 80054ce:	f240 2132 	movw	r1, #562	; 0x232
 80054d2:	4b3c      	ldr	r3, [pc, #240]	; (80055c4 <__mdiff+0x118>)
 80054d4:	483c      	ldr	r0, [pc, #240]	; (80055c8 <__mdiff+0x11c>)
 80054d6:	f7ff f947 	bl	8004768 <__assert_func>
 80054da:	2301      	movs	r3, #1
 80054dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054e0:	4610      	mov	r0, r2
 80054e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e6:	bfa4      	itt	ge
 80054e8:	4653      	movge	r3, sl
 80054ea:	46a2      	movge	sl, r4
 80054ec:	4630      	mov	r0, r6
 80054ee:	f8da 1004 	ldr.w	r1, [sl, #4]
 80054f2:	bfa6      	itte	ge
 80054f4:	461c      	movge	r4, r3
 80054f6:	2500      	movge	r5, #0
 80054f8:	2501      	movlt	r5, #1
 80054fa:	f7ff fcf7 	bl	8004eec <_Balloc>
 80054fe:	4602      	mov	r2, r0
 8005500:	b918      	cbnz	r0, 800550a <__mdiff+0x5e>
 8005502:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005506:	4b2f      	ldr	r3, [pc, #188]	; (80055c4 <__mdiff+0x118>)
 8005508:	e7e4      	b.n	80054d4 <__mdiff+0x28>
 800550a:	f100 0814 	add.w	r8, r0, #20
 800550e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005512:	60c5      	str	r5, [r0, #12]
 8005514:	f04f 0c00 	mov.w	ip, #0
 8005518:	f10a 0514 	add.w	r5, sl, #20
 800551c:	f10a 0010 	add.w	r0, sl, #16
 8005520:	46c2      	mov	sl, r8
 8005522:	6926      	ldr	r6, [r4, #16]
 8005524:	f104 0914 	add.w	r9, r4, #20
 8005528:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800552c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005530:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005534:	f859 3b04 	ldr.w	r3, [r9], #4
 8005538:	fa1f f18b 	uxth.w	r1, fp
 800553c:	4461      	add	r1, ip
 800553e:	fa1f fc83 	uxth.w	ip, r3
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	eba1 010c 	sub.w	r1, r1, ip
 8005548:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800554c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005550:	b289      	uxth	r1, r1
 8005552:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005556:	454e      	cmp	r6, r9
 8005558:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800555c:	f84a 3b04 	str.w	r3, [sl], #4
 8005560:	d8e6      	bhi.n	8005530 <__mdiff+0x84>
 8005562:	1b33      	subs	r3, r6, r4
 8005564:	3b15      	subs	r3, #21
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	3415      	adds	r4, #21
 800556c:	3304      	adds	r3, #4
 800556e:	42a6      	cmp	r6, r4
 8005570:	bf38      	it	cc
 8005572:	2304      	movcc	r3, #4
 8005574:	441d      	add	r5, r3
 8005576:	4443      	add	r3, r8
 8005578:	461e      	mov	r6, r3
 800557a:	462c      	mov	r4, r5
 800557c:	4574      	cmp	r4, lr
 800557e:	d30e      	bcc.n	800559e <__mdiff+0xf2>
 8005580:	f10e 0103 	add.w	r1, lr, #3
 8005584:	1b49      	subs	r1, r1, r5
 8005586:	f021 0103 	bic.w	r1, r1, #3
 800558a:	3d03      	subs	r5, #3
 800558c:	45ae      	cmp	lr, r5
 800558e:	bf38      	it	cc
 8005590:	2100      	movcc	r1, #0
 8005592:	4419      	add	r1, r3
 8005594:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005598:	b18b      	cbz	r3, 80055be <__mdiff+0x112>
 800559a:	6117      	str	r7, [r2, #16]
 800559c:	e7a0      	b.n	80054e0 <__mdiff+0x34>
 800559e:	f854 8b04 	ldr.w	r8, [r4], #4
 80055a2:	fa1f f188 	uxth.w	r1, r8
 80055a6:	4461      	add	r1, ip
 80055a8:	1408      	asrs	r0, r1, #16
 80055aa:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80055ae:	b289      	uxth	r1, r1
 80055b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80055b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80055b8:	f846 1b04 	str.w	r1, [r6], #4
 80055bc:	e7de      	b.n	800557c <__mdiff+0xd0>
 80055be:	3f01      	subs	r7, #1
 80055c0:	e7e8      	b.n	8005594 <__mdiff+0xe8>
 80055c2:	bf00      	nop
 80055c4:	08007d14 	.word	0x08007d14
 80055c8:	08007da4 	.word	0x08007da4

080055cc <__ulp>:
 80055cc:	4b11      	ldr	r3, [pc, #68]	; (8005614 <__ulp+0x48>)
 80055ce:	400b      	ands	r3, r1
 80055d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	dd02      	ble.n	80055de <__ulp+0x12>
 80055d8:	2000      	movs	r0, #0
 80055da:	4619      	mov	r1, r3
 80055dc:	4770      	bx	lr
 80055de:	425b      	negs	r3, r3
 80055e0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f04f 0100 	mov.w	r1, #0
 80055ec:	ea4f 5223 	mov.w	r2, r3, asr #20
 80055f0:	da04      	bge.n	80055fc <__ulp+0x30>
 80055f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80055f6:	fa43 f102 	asr.w	r1, r3, r2
 80055fa:	4770      	bx	lr
 80055fc:	f1a2 0314 	sub.w	r3, r2, #20
 8005600:	2b1e      	cmp	r3, #30
 8005602:	bfd6      	itet	le
 8005604:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005608:	2301      	movgt	r3, #1
 800560a:	fa22 f303 	lsrle.w	r3, r2, r3
 800560e:	4618      	mov	r0, r3
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	7ff00000 	.word	0x7ff00000

08005618 <__b2d>:
 8005618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800561c:	6907      	ldr	r7, [r0, #16]
 800561e:	f100 0914 	add.w	r9, r0, #20
 8005622:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005626:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800562a:	f1a7 0804 	sub.w	r8, r7, #4
 800562e:	4630      	mov	r0, r6
 8005630:	f7ff fd52 	bl	80050d8 <__hi0bits>
 8005634:	f1c0 0320 	rsb	r3, r0, #32
 8005638:	280a      	cmp	r0, #10
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	491f      	ldr	r1, [pc, #124]	; (80056bc <__b2d+0xa4>)
 800563e:	dc17      	bgt.n	8005670 <__b2d+0x58>
 8005640:	45c1      	cmp	r9, r8
 8005642:	bf28      	it	cs
 8005644:	2200      	movcs	r2, #0
 8005646:	f1c0 0c0b 	rsb	ip, r0, #11
 800564a:	fa26 f30c 	lsr.w	r3, r6, ip
 800564e:	bf38      	it	cc
 8005650:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005654:	ea43 0501 	orr.w	r5, r3, r1
 8005658:	f100 0315 	add.w	r3, r0, #21
 800565c:	fa06 f303 	lsl.w	r3, r6, r3
 8005660:	fa22 f20c 	lsr.w	r2, r2, ip
 8005664:	ea43 0402 	orr.w	r4, r3, r2
 8005668:	4620      	mov	r0, r4
 800566a:	4629      	mov	r1, r5
 800566c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005670:	45c1      	cmp	r9, r8
 8005672:	bf2e      	itee	cs
 8005674:	2200      	movcs	r2, #0
 8005676:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800567a:	f1a7 0808 	subcc.w	r8, r7, #8
 800567e:	f1b0 030b 	subs.w	r3, r0, #11
 8005682:	d016      	beq.n	80056b2 <__b2d+0x9a>
 8005684:	f1c3 0720 	rsb	r7, r3, #32
 8005688:	fa22 f107 	lsr.w	r1, r2, r7
 800568c:	45c8      	cmp	r8, r9
 800568e:	fa06 f603 	lsl.w	r6, r6, r3
 8005692:	ea46 0601 	orr.w	r6, r6, r1
 8005696:	bf94      	ite	ls
 8005698:	2100      	movls	r1, #0
 800569a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800569e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80056a2:	fa02 f003 	lsl.w	r0, r2, r3
 80056a6:	40f9      	lsrs	r1, r7
 80056a8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80056ac:	ea40 0401 	orr.w	r4, r0, r1
 80056b0:	e7da      	b.n	8005668 <__b2d+0x50>
 80056b2:	4614      	mov	r4, r2
 80056b4:	ea46 0501 	orr.w	r5, r6, r1
 80056b8:	e7d6      	b.n	8005668 <__b2d+0x50>
 80056ba:	bf00      	nop
 80056bc:	3ff00000 	.word	0x3ff00000

080056c0 <__d2b>:
 80056c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80056c4:	2101      	movs	r1, #1
 80056c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80056ca:	4690      	mov	r8, r2
 80056cc:	461d      	mov	r5, r3
 80056ce:	f7ff fc0d 	bl	8004eec <_Balloc>
 80056d2:	4604      	mov	r4, r0
 80056d4:	b930      	cbnz	r0, 80056e4 <__d2b+0x24>
 80056d6:	4602      	mov	r2, r0
 80056d8:	f240 310a 	movw	r1, #778	; 0x30a
 80056dc:	4b24      	ldr	r3, [pc, #144]	; (8005770 <__d2b+0xb0>)
 80056de:	4825      	ldr	r0, [pc, #148]	; (8005774 <__d2b+0xb4>)
 80056e0:	f7ff f842 	bl	8004768 <__assert_func>
 80056e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80056e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80056ec:	bb2d      	cbnz	r5, 800573a <__d2b+0x7a>
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	f1b8 0300 	subs.w	r3, r8, #0
 80056f4:	d026      	beq.n	8005744 <__d2b+0x84>
 80056f6:	4668      	mov	r0, sp
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	f7ff fd0d 	bl	8005118 <__lo0bits>
 80056fe:	9900      	ldr	r1, [sp, #0]
 8005700:	b1f0      	cbz	r0, 8005740 <__d2b+0x80>
 8005702:	9a01      	ldr	r2, [sp, #4]
 8005704:	f1c0 0320 	rsb	r3, r0, #32
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	430b      	orrs	r3, r1
 800570e:	40c2      	lsrs	r2, r0
 8005710:	6163      	str	r3, [r4, #20]
 8005712:	9201      	str	r2, [sp, #4]
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	bf14      	ite	ne
 800571a:	2102      	movne	r1, #2
 800571c:	2101      	moveq	r1, #1
 800571e:	61a3      	str	r3, [r4, #24]
 8005720:	6121      	str	r1, [r4, #16]
 8005722:	b1c5      	cbz	r5, 8005756 <__d2b+0x96>
 8005724:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005728:	4405      	add	r5, r0
 800572a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800572e:	603d      	str	r5, [r7, #0]
 8005730:	6030      	str	r0, [r6, #0]
 8005732:	4620      	mov	r0, r4
 8005734:	b002      	add	sp, #8
 8005736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573e:	e7d6      	b.n	80056ee <__d2b+0x2e>
 8005740:	6161      	str	r1, [r4, #20]
 8005742:	e7e7      	b.n	8005714 <__d2b+0x54>
 8005744:	a801      	add	r0, sp, #4
 8005746:	f7ff fce7 	bl	8005118 <__lo0bits>
 800574a:	2101      	movs	r1, #1
 800574c:	9b01      	ldr	r3, [sp, #4]
 800574e:	6121      	str	r1, [r4, #16]
 8005750:	6163      	str	r3, [r4, #20]
 8005752:	3020      	adds	r0, #32
 8005754:	e7e5      	b.n	8005722 <__d2b+0x62>
 8005756:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800575a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800575e:	6038      	str	r0, [r7, #0]
 8005760:	6918      	ldr	r0, [r3, #16]
 8005762:	f7ff fcb9 	bl	80050d8 <__hi0bits>
 8005766:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800576a:	6031      	str	r1, [r6, #0]
 800576c:	e7e1      	b.n	8005732 <__d2b+0x72>
 800576e:	bf00      	nop
 8005770:	08007d14 	.word	0x08007d14
 8005774:	08007da4 	.word	0x08007da4

08005778 <__ratio>:
 8005778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	4688      	mov	r8, r1
 800577e:	4669      	mov	r1, sp
 8005780:	4681      	mov	r9, r0
 8005782:	f7ff ff49 	bl	8005618 <__b2d>
 8005786:	460f      	mov	r7, r1
 8005788:	4604      	mov	r4, r0
 800578a:	460d      	mov	r5, r1
 800578c:	4640      	mov	r0, r8
 800578e:	a901      	add	r1, sp, #4
 8005790:	f7ff ff42 	bl	8005618 <__b2d>
 8005794:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005798:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800579c:	468b      	mov	fp, r1
 800579e:	eba3 0c02 	sub.w	ip, r3, r2
 80057a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfd5      	itete	le
 80057b0:	460a      	movle	r2, r1
 80057b2:	462a      	movgt	r2, r5
 80057b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80057b8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80057bc:	bfd8      	it	le
 80057be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80057c2:	465b      	mov	r3, fp
 80057c4:	4602      	mov	r2, r0
 80057c6:	4639      	mov	r1, r7
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7fa ffaf 	bl	800072c <__aeabi_ddiv>
 80057ce:	b003      	add	sp, #12
 80057d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080057d4 <__copybits>:
 80057d4:	3901      	subs	r1, #1
 80057d6:	b570      	push	{r4, r5, r6, lr}
 80057d8:	1149      	asrs	r1, r1, #5
 80057da:	6914      	ldr	r4, [r2, #16]
 80057dc:	3101      	adds	r1, #1
 80057de:	f102 0314 	add.w	r3, r2, #20
 80057e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80057e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80057ea:	1f05      	subs	r5, r0, #4
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d30c      	bcc.n	800580a <__copybits+0x36>
 80057f0:	1aa3      	subs	r3, r4, r2
 80057f2:	3b11      	subs	r3, #17
 80057f4:	f023 0303 	bic.w	r3, r3, #3
 80057f8:	3211      	adds	r2, #17
 80057fa:	42a2      	cmp	r2, r4
 80057fc:	bf88      	it	hi
 80057fe:	2300      	movhi	r3, #0
 8005800:	4418      	add	r0, r3
 8005802:	2300      	movs	r3, #0
 8005804:	4288      	cmp	r0, r1
 8005806:	d305      	bcc.n	8005814 <__copybits+0x40>
 8005808:	bd70      	pop	{r4, r5, r6, pc}
 800580a:	f853 6b04 	ldr.w	r6, [r3], #4
 800580e:	f845 6f04 	str.w	r6, [r5, #4]!
 8005812:	e7eb      	b.n	80057ec <__copybits+0x18>
 8005814:	f840 3b04 	str.w	r3, [r0], #4
 8005818:	e7f4      	b.n	8005804 <__copybits+0x30>

0800581a <__any_on>:
 800581a:	f100 0214 	add.w	r2, r0, #20
 800581e:	6900      	ldr	r0, [r0, #16]
 8005820:	114b      	asrs	r3, r1, #5
 8005822:	4298      	cmp	r0, r3
 8005824:	b510      	push	{r4, lr}
 8005826:	db11      	blt.n	800584c <__any_on+0x32>
 8005828:	dd0a      	ble.n	8005840 <__any_on+0x26>
 800582a:	f011 011f 	ands.w	r1, r1, #31
 800582e:	d007      	beq.n	8005840 <__any_on+0x26>
 8005830:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005834:	fa24 f001 	lsr.w	r0, r4, r1
 8005838:	fa00 f101 	lsl.w	r1, r0, r1
 800583c:	428c      	cmp	r4, r1
 800583e:	d10b      	bne.n	8005858 <__any_on+0x3e>
 8005840:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005844:	4293      	cmp	r3, r2
 8005846:	d803      	bhi.n	8005850 <__any_on+0x36>
 8005848:	2000      	movs	r0, #0
 800584a:	bd10      	pop	{r4, pc}
 800584c:	4603      	mov	r3, r0
 800584e:	e7f7      	b.n	8005840 <__any_on+0x26>
 8005850:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005854:	2900      	cmp	r1, #0
 8005856:	d0f5      	beq.n	8005844 <__any_on+0x2a>
 8005858:	2001      	movs	r0, #1
 800585a:	e7f6      	b.n	800584a <__any_on+0x30>

0800585c <_calloc_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	fb02 f501 	mul.w	r5, r2, r1
 8005862:	4629      	mov	r1, r5
 8005864:	f7fe f85a 	bl	800391c <_malloc_r>
 8005868:	4604      	mov	r4, r0
 800586a:	b118      	cbz	r0, 8005874 <_calloc_r+0x18>
 800586c:	462a      	mov	r2, r5
 800586e:	2100      	movs	r1, #0
 8005870:	f7fe f800 	bl	8003874 <memset>
 8005874:	4620      	mov	r0, r4
 8005876:	bd38      	pop	{r3, r4, r5, pc}

08005878 <__ssputs_r>:
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	688e      	ldr	r6, [r1, #8]
 800587e:	4682      	mov	sl, r0
 8005880:	429e      	cmp	r6, r3
 8005882:	460c      	mov	r4, r1
 8005884:	4690      	mov	r8, r2
 8005886:	461f      	mov	r7, r3
 8005888:	d838      	bhi.n	80058fc <__ssputs_r+0x84>
 800588a:	898a      	ldrh	r2, [r1, #12]
 800588c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005890:	d032      	beq.n	80058f8 <__ssputs_r+0x80>
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	6909      	ldr	r1, [r1, #16]
 8005896:	3301      	adds	r3, #1
 8005898:	eba5 0901 	sub.w	r9, r5, r1
 800589c:	6965      	ldr	r5, [r4, #20]
 800589e:	444b      	add	r3, r9
 80058a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058a8:	106d      	asrs	r5, r5, #1
 80058aa:	429d      	cmp	r5, r3
 80058ac:	bf38      	it	cc
 80058ae:	461d      	movcc	r5, r3
 80058b0:	0553      	lsls	r3, r2, #21
 80058b2:	d531      	bpl.n	8005918 <__ssputs_r+0xa0>
 80058b4:	4629      	mov	r1, r5
 80058b6:	f7fe f831 	bl	800391c <_malloc_r>
 80058ba:	4606      	mov	r6, r0
 80058bc:	b950      	cbnz	r0, 80058d4 <__ssputs_r+0x5c>
 80058be:	230c      	movs	r3, #12
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	f8ca 3000 	str.w	r3, [sl]
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d4:	464a      	mov	r2, r9
 80058d6:	6921      	ldr	r1, [r4, #16]
 80058d8:	f7ff faee 	bl	8004eb8 <memcpy>
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e6:	81a3      	strh	r3, [r4, #12]
 80058e8:	6126      	str	r6, [r4, #16]
 80058ea:	444e      	add	r6, r9
 80058ec:	6026      	str	r6, [r4, #0]
 80058ee:	463e      	mov	r6, r7
 80058f0:	6165      	str	r5, [r4, #20]
 80058f2:	eba5 0509 	sub.w	r5, r5, r9
 80058f6:	60a5      	str	r5, [r4, #8]
 80058f8:	42be      	cmp	r6, r7
 80058fa:	d900      	bls.n	80058fe <__ssputs_r+0x86>
 80058fc:	463e      	mov	r6, r7
 80058fe:	4632      	mov	r2, r6
 8005900:	4641      	mov	r1, r8
 8005902:	6820      	ldr	r0, [r4, #0]
 8005904:	f000 ff1c 	bl	8006740 <memmove>
 8005908:	68a3      	ldr	r3, [r4, #8]
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	1b9b      	subs	r3, r3, r6
 800590e:	4432      	add	r2, r6
 8005910:	2000      	movs	r0, #0
 8005912:	60a3      	str	r3, [r4, #8]
 8005914:	6022      	str	r2, [r4, #0]
 8005916:	e7db      	b.n	80058d0 <__ssputs_r+0x58>
 8005918:	462a      	mov	r2, r5
 800591a:	f000 ff2b 	bl	8006774 <_realloc_r>
 800591e:	4606      	mov	r6, r0
 8005920:	2800      	cmp	r0, #0
 8005922:	d1e1      	bne.n	80058e8 <__ssputs_r+0x70>
 8005924:	4650      	mov	r0, sl
 8005926:	6921      	ldr	r1, [r4, #16]
 8005928:	f7fd ffac 	bl	8003884 <_free_r>
 800592c:	e7c7      	b.n	80058be <__ssputs_r+0x46>
	...

08005930 <_svfiprintf_r>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	4698      	mov	r8, r3
 8005936:	898b      	ldrh	r3, [r1, #12]
 8005938:	4607      	mov	r7, r0
 800593a:	061b      	lsls	r3, r3, #24
 800593c:	460d      	mov	r5, r1
 800593e:	4614      	mov	r4, r2
 8005940:	b09d      	sub	sp, #116	; 0x74
 8005942:	d50e      	bpl.n	8005962 <_svfiprintf_r+0x32>
 8005944:	690b      	ldr	r3, [r1, #16]
 8005946:	b963      	cbnz	r3, 8005962 <_svfiprintf_r+0x32>
 8005948:	2140      	movs	r1, #64	; 0x40
 800594a:	f7fd ffe7 	bl	800391c <_malloc_r>
 800594e:	6028      	str	r0, [r5, #0]
 8005950:	6128      	str	r0, [r5, #16]
 8005952:	b920      	cbnz	r0, 800595e <_svfiprintf_r+0x2e>
 8005954:	230c      	movs	r3, #12
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	e0d1      	b.n	8005b02 <_svfiprintf_r+0x1d2>
 800595e:	2340      	movs	r3, #64	; 0x40
 8005960:	616b      	str	r3, [r5, #20]
 8005962:	2300      	movs	r3, #0
 8005964:	9309      	str	r3, [sp, #36]	; 0x24
 8005966:	2320      	movs	r3, #32
 8005968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800596c:	2330      	movs	r3, #48	; 0x30
 800596e:	f04f 0901 	mov.w	r9, #1
 8005972:	f8cd 800c 	str.w	r8, [sp, #12]
 8005976:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b1c <_svfiprintf_r+0x1ec>
 800597a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800597e:	4623      	mov	r3, r4
 8005980:	469a      	mov	sl, r3
 8005982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005986:	b10a      	cbz	r2, 800598c <_svfiprintf_r+0x5c>
 8005988:	2a25      	cmp	r2, #37	; 0x25
 800598a:	d1f9      	bne.n	8005980 <_svfiprintf_r+0x50>
 800598c:	ebba 0b04 	subs.w	fp, sl, r4
 8005990:	d00b      	beq.n	80059aa <_svfiprintf_r+0x7a>
 8005992:	465b      	mov	r3, fp
 8005994:	4622      	mov	r2, r4
 8005996:	4629      	mov	r1, r5
 8005998:	4638      	mov	r0, r7
 800599a:	f7ff ff6d 	bl	8005878 <__ssputs_r>
 800599e:	3001      	adds	r0, #1
 80059a0:	f000 80aa 	beq.w	8005af8 <_svfiprintf_r+0x1c8>
 80059a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a6:	445a      	add	r2, fp
 80059a8:	9209      	str	r2, [sp, #36]	; 0x24
 80059aa:	f89a 3000 	ldrb.w	r3, [sl]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80a2 	beq.w	8005af8 <_svfiprintf_r+0x1c8>
 80059b4:	2300      	movs	r3, #0
 80059b6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059be:	f10a 0a01 	add.w	sl, sl, #1
 80059c2:	9304      	str	r3, [sp, #16]
 80059c4:	9307      	str	r3, [sp, #28]
 80059c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059ca:	931a      	str	r3, [sp, #104]	; 0x68
 80059cc:	4654      	mov	r4, sl
 80059ce:	2205      	movs	r2, #5
 80059d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d4:	4851      	ldr	r0, [pc, #324]	; (8005b1c <_svfiprintf_r+0x1ec>)
 80059d6:	f000 fea5 	bl	8006724 <memchr>
 80059da:	9a04      	ldr	r2, [sp, #16]
 80059dc:	b9d8      	cbnz	r0, 8005a16 <_svfiprintf_r+0xe6>
 80059de:	06d0      	lsls	r0, r2, #27
 80059e0:	bf44      	itt	mi
 80059e2:	2320      	movmi	r3, #32
 80059e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059e8:	0711      	lsls	r1, r2, #28
 80059ea:	bf44      	itt	mi
 80059ec:	232b      	movmi	r3, #43	; 0x2b
 80059ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f2:	f89a 3000 	ldrb.w	r3, [sl]
 80059f6:	2b2a      	cmp	r3, #42	; 0x2a
 80059f8:	d015      	beq.n	8005a26 <_svfiprintf_r+0xf6>
 80059fa:	4654      	mov	r4, sl
 80059fc:	2000      	movs	r0, #0
 80059fe:	f04f 0c0a 	mov.w	ip, #10
 8005a02:	9a07      	ldr	r2, [sp, #28]
 8005a04:	4621      	mov	r1, r4
 8005a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a0a:	3b30      	subs	r3, #48	; 0x30
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	d94e      	bls.n	8005aae <_svfiprintf_r+0x17e>
 8005a10:	b1b0      	cbz	r0, 8005a40 <_svfiprintf_r+0x110>
 8005a12:	9207      	str	r2, [sp, #28]
 8005a14:	e014      	b.n	8005a40 <_svfiprintf_r+0x110>
 8005a16:	eba0 0308 	sub.w	r3, r0, r8
 8005a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	46a2      	mov	sl, r4
 8005a22:	9304      	str	r3, [sp, #16]
 8005a24:	e7d2      	b.n	80059cc <_svfiprintf_r+0x9c>
 8005a26:	9b03      	ldr	r3, [sp, #12]
 8005a28:	1d19      	adds	r1, r3, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	9103      	str	r1, [sp, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bfbb      	ittet	lt
 8005a32:	425b      	neglt	r3, r3
 8005a34:	f042 0202 	orrlt.w	r2, r2, #2
 8005a38:	9307      	strge	r3, [sp, #28]
 8005a3a:	9307      	strlt	r3, [sp, #28]
 8005a3c:	bfb8      	it	lt
 8005a3e:	9204      	strlt	r2, [sp, #16]
 8005a40:	7823      	ldrb	r3, [r4, #0]
 8005a42:	2b2e      	cmp	r3, #46	; 0x2e
 8005a44:	d10c      	bne.n	8005a60 <_svfiprintf_r+0x130>
 8005a46:	7863      	ldrb	r3, [r4, #1]
 8005a48:	2b2a      	cmp	r3, #42	; 0x2a
 8005a4a:	d135      	bne.n	8005ab8 <_svfiprintf_r+0x188>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	3402      	adds	r4, #2
 8005a50:	1d1a      	adds	r2, r3, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	9203      	str	r2, [sp, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfb8      	it	lt
 8005a5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a5e:	9305      	str	r3, [sp, #20]
 8005a60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b2c <_svfiprintf_r+0x1fc>
 8005a64:	2203      	movs	r2, #3
 8005a66:	4650      	mov	r0, sl
 8005a68:	7821      	ldrb	r1, [r4, #0]
 8005a6a:	f000 fe5b 	bl	8006724 <memchr>
 8005a6e:	b140      	cbz	r0, 8005a82 <_svfiprintf_r+0x152>
 8005a70:	2340      	movs	r3, #64	; 0x40
 8005a72:	eba0 000a 	sub.w	r0, r0, sl
 8005a76:	fa03 f000 	lsl.w	r0, r3, r0
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	3401      	adds	r4, #1
 8005a7e:	4303      	orrs	r3, r0
 8005a80:	9304      	str	r3, [sp, #16]
 8005a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a86:	2206      	movs	r2, #6
 8005a88:	4825      	ldr	r0, [pc, #148]	; (8005b20 <_svfiprintf_r+0x1f0>)
 8005a8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a8e:	f000 fe49 	bl	8006724 <memchr>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d038      	beq.n	8005b08 <_svfiprintf_r+0x1d8>
 8005a96:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <_svfiprintf_r+0x1f4>)
 8005a98:	bb1b      	cbnz	r3, 8005ae2 <_svfiprintf_r+0x1b2>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	3307      	adds	r3, #7
 8005a9e:	f023 0307 	bic.w	r3, r3, #7
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	9303      	str	r3, [sp, #12]
 8005aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa8:	4433      	add	r3, r6
 8005aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005aac:	e767      	b.n	800597e <_svfiprintf_r+0x4e>
 8005aae:	460c      	mov	r4, r1
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ab6:	e7a5      	b.n	8005a04 <_svfiprintf_r+0xd4>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f04f 0c0a 	mov.w	ip, #10
 8005abe:	4619      	mov	r1, r3
 8005ac0:	3401      	adds	r4, #1
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aca:	3a30      	subs	r2, #48	; 0x30
 8005acc:	2a09      	cmp	r2, #9
 8005ace:	d903      	bls.n	8005ad8 <_svfiprintf_r+0x1a8>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0c5      	beq.n	8005a60 <_svfiprintf_r+0x130>
 8005ad4:	9105      	str	r1, [sp, #20]
 8005ad6:	e7c3      	b.n	8005a60 <_svfiprintf_r+0x130>
 8005ad8:	4604      	mov	r4, r0
 8005ada:	2301      	movs	r3, #1
 8005adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae0:	e7f0      	b.n	8005ac4 <_svfiprintf_r+0x194>
 8005ae2:	ab03      	add	r3, sp, #12
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	462a      	mov	r2, r5
 8005ae8:	4638      	mov	r0, r7
 8005aea:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <_svfiprintf_r+0x1f8>)
 8005aec:	a904      	add	r1, sp, #16
 8005aee:	f3af 8000 	nop.w
 8005af2:	1c42      	adds	r2, r0, #1
 8005af4:	4606      	mov	r6, r0
 8005af6:	d1d6      	bne.n	8005aa6 <_svfiprintf_r+0x176>
 8005af8:	89ab      	ldrh	r3, [r5, #12]
 8005afa:	065b      	lsls	r3, r3, #25
 8005afc:	f53f af2c 	bmi.w	8005958 <_svfiprintf_r+0x28>
 8005b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b02:	b01d      	add	sp, #116	; 0x74
 8005b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b08:	ab03      	add	r3, sp, #12
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	462a      	mov	r2, r5
 8005b0e:	4638      	mov	r0, r7
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <_svfiprintf_r+0x1f8>)
 8005b12:	a904      	add	r1, sp, #16
 8005b14:	f000 f9d4 	bl	8005ec0 <_printf_i>
 8005b18:	e7eb      	b.n	8005af2 <_svfiprintf_r+0x1c2>
 8005b1a:	bf00      	nop
 8005b1c:	08007f04 	.word	0x08007f04
 8005b20:	08007f0e 	.word	0x08007f0e
 8005b24:	00000000 	.word	0x00000000
 8005b28:	08005879 	.word	0x08005879
 8005b2c:	08007f0a 	.word	0x08007f0a

08005b30 <__sfputc_r>:
 8005b30:	6893      	ldr	r3, [r2, #8]
 8005b32:	b410      	push	{r4}
 8005b34:	3b01      	subs	r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	6093      	str	r3, [r2, #8]
 8005b3a:	da07      	bge.n	8005b4c <__sfputc_r+0x1c>
 8005b3c:	6994      	ldr	r4, [r2, #24]
 8005b3e:	42a3      	cmp	r3, r4
 8005b40:	db01      	blt.n	8005b46 <__sfputc_r+0x16>
 8005b42:	290a      	cmp	r1, #10
 8005b44:	d102      	bne.n	8005b4c <__sfputc_r+0x1c>
 8005b46:	bc10      	pop	{r4}
 8005b48:	f000 baf8 	b.w	800613c <__swbuf_r>
 8005b4c:	6813      	ldr	r3, [r2, #0]
 8005b4e:	1c58      	adds	r0, r3, #1
 8005b50:	6010      	str	r0, [r2, #0]
 8005b52:	7019      	strb	r1, [r3, #0]
 8005b54:	4608      	mov	r0, r1
 8005b56:	bc10      	pop	{r4}
 8005b58:	4770      	bx	lr

08005b5a <__sfputs_r>:
 8005b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	460f      	mov	r7, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	18d5      	adds	r5, r2, r3
 8005b64:	42ac      	cmp	r4, r5
 8005b66:	d101      	bne.n	8005b6c <__sfputs_r+0x12>
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e007      	b.n	8005b7c <__sfputs_r+0x22>
 8005b6c:	463a      	mov	r2, r7
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b74:	f7ff ffdc 	bl	8005b30 <__sfputc_r>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d1f3      	bne.n	8005b64 <__sfputs_r+0xa>
 8005b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b80 <_vfiprintf_r>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	460d      	mov	r5, r1
 8005b86:	4614      	mov	r4, r2
 8005b88:	4698      	mov	r8, r3
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	b09d      	sub	sp, #116	; 0x74
 8005b8e:	b118      	cbz	r0, 8005b98 <_vfiprintf_r+0x18>
 8005b90:	6983      	ldr	r3, [r0, #24]
 8005b92:	b90b      	cbnz	r3, 8005b98 <_vfiprintf_r+0x18>
 8005b94:	f000 fcc2 	bl	800651c <__sinit>
 8005b98:	4b89      	ldr	r3, [pc, #548]	; (8005dc0 <_vfiprintf_r+0x240>)
 8005b9a:	429d      	cmp	r5, r3
 8005b9c:	d11b      	bne.n	8005bd6 <_vfiprintf_r+0x56>
 8005b9e:	6875      	ldr	r5, [r6, #4]
 8005ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ba2:	07d9      	lsls	r1, r3, #31
 8005ba4:	d405      	bmi.n	8005bb2 <_vfiprintf_r+0x32>
 8005ba6:	89ab      	ldrh	r3, [r5, #12]
 8005ba8:	059a      	lsls	r2, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_vfiprintf_r+0x32>
 8005bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bae:	f000 fd53 	bl	8006658 <__retarget_lock_acquire_recursive>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	071b      	lsls	r3, r3, #28
 8005bb6:	d501      	bpl.n	8005bbc <_vfiprintf_r+0x3c>
 8005bb8:	692b      	ldr	r3, [r5, #16]
 8005bba:	b9eb      	cbnz	r3, 8005bf8 <_vfiprintf_r+0x78>
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f000 fb1c 	bl	80061fc <__swsetup_r>
 8005bc4:	b1c0      	cbz	r0, 8005bf8 <_vfiprintf_r+0x78>
 8005bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bc8:	07dc      	lsls	r4, r3, #31
 8005bca:	d50e      	bpl.n	8005bea <_vfiprintf_r+0x6a>
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	b01d      	add	sp, #116	; 0x74
 8005bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd6:	4b7b      	ldr	r3, [pc, #492]	; (8005dc4 <_vfiprintf_r+0x244>)
 8005bd8:	429d      	cmp	r5, r3
 8005bda:	d101      	bne.n	8005be0 <_vfiprintf_r+0x60>
 8005bdc:	68b5      	ldr	r5, [r6, #8]
 8005bde:	e7df      	b.n	8005ba0 <_vfiprintf_r+0x20>
 8005be0:	4b79      	ldr	r3, [pc, #484]	; (8005dc8 <_vfiprintf_r+0x248>)
 8005be2:	429d      	cmp	r5, r3
 8005be4:	bf08      	it	eq
 8005be6:	68f5      	ldreq	r5, [r6, #12]
 8005be8:	e7da      	b.n	8005ba0 <_vfiprintf_r+0x20>
 8005bea:	89ab      	ldrh	r3, [r5, #12]
 8005bec:	0598      	lsls	r0, r3, #22
 8005bee:	d4ed      	bmi.n	8005bcc <_vfiprintf_r+0x4c>
 8005bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bf2:	f000 fd32 	bl	800665a <__retarget_lock_release_recursive>
 8005bf6:	e7e9      	b.n	8005bcc <_vfiprintf_r+0x4c>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c02:	2330      	movs	r3, #48	; 0x30
 8005c04:	f04f 0901 	mov.w	r9, #1
 8005c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005dcc <_vfiprintf_r+0x24c>
 8005c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c14:	4623      	mov	r3, r4
 8005c16:	469a      	mov	sl, r3
 8005c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1c:	b10a      	cbz	r2, 8005c22 <_vfiprintf_r+0xa2>
 8005c1e:	2a25      	cmp	r2, #37	; 0x25
 8005c20:	d1f9      	bne.n	8005c16 <_vfiprintf_r+0x96>
 8005c22:	ebba 0b04 	subs.w	fp, sl, r4
 8005c26:	d00b      	beq.n	8005c40 <_vfiprintf_r+0xc0>
 8005c28:	465b      	mov	r3, fp
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f7ff ff93 	bl	8005b5a <__sfputs_r>
 8005c34:	3001      	adds	r0, #1
 8005c36:	f000 80aa 	beq.w	8005d8e <_vfiprintf_r+0x20e>
 8005c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c3c:	445a      	add	r2, fp
 8005c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c40:	f89a 3000 	ldrb.w	r3, [sl]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80a2 	beq.w	8005d8e <_vfiprintf_r+0x20e>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c54:	f10a 0a01 	add.w	sl, sl, #1
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	9307      	str	r3, [sp, #28]
 8005c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c60:	931a      	str	r3, [sp, #104]	; 0x68
 8005c62:	4654      	mov	r4, sl
 8005c64:	2205      	movs	r2, #5
 8005c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6a:	4858      	ldr	r0, [pc, #352]	; (8005dcc <_vfiprintf_r+0x24c>)
 8005c6c:	f000 fd5a 	bl	8006724 <memchr>
 8005c70:	9a04      	ldr	r2, [sp, #16]
 8005c72:	b9d8      	cbnz	r0, 8005cac <_vfiprintf_r+0x12c>
 8005c74:	06d1      	lsls	r1, r2, #27
 8005c76:	bf44      	itt	mi
 8005c78:	2320      	movmi	r3, #32
 8005c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c7e:	0713      	lsls	r3, r2, #28
 8005c80:	bf44      	itt	mi
 8005c82:	232b      	movmi	r3, #43	; 0x2b
 8005c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c88:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8e:	d015      	beq.n	8005cbc <_vfiprintf_r+0x13c>
 8005c90:	4654      	mov	r4, sl
 8005c92:	2000      	movs	r0, #0
 8005c94:	f04f 0c0a 	mov.w	ip, #10
 8005c98:	9a07      	ldr	r2, [sp, #28]
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ca0:	3b30      	subs	r3, #48	; 0x30
 8005ca2:	2b09      	cmp	r3, #9
 8005ca4:	d94e      	bls.n	8005d44 <_vfiprintf_r+0x1c4>
 8005ca6:	b1b0      	cbz	r0, 8005cd6 <_vfiprintf_r+0x156>
 8005ca8:	9207      	str	r2, [sp, #28]
 8005caa:	e014      	b.n	8005cd6 <_vfiprintf_r+0x156>
 8005cac:	eba0 0308 	sub.w	r3, r0, r8
 8005cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	46a2      	mov	sl, r4
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	e7d2      	b.n	8005c62 <_vfiprintf_r+0xe2>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	1d19      	adds	r1, r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	9103      	str	r1, [sp, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bfbb      	ittet	lt
 8005cc8:	425b      	neglt	r3, r3
 8005cca:	f042 0202 	orrlt.w	r2, r2, #2
 8005cce:	9307      	strge	r3, [sp, #28]
 8005cd0:	9307      	strlt	r3, [sp, #28]
 8005cd2:	bfb8      	it	lt
 8005cd4:	9204      	strlt	r2, [sp, #16]
 8005cd6:	7823      	ldrb	r3, [r4, #0]
 8005cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8005cda:	d10c      	bne.n	8005cf6 <_vfiprintf_r+0x176>
 8005cdc:	7863      	ldrb	r3, [r4, #1]
 8005cde:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce0:	d135      	bne.n	8005d4e <_vfiprintf_r+0x1ce>
 8005ce2:	9b03      	ldr	r3, [sp, #12]
 8005ce4:	3402      	adds	r4, #2
 8005ce6:	1d1a      	adds	r2, r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	9203      	str	r2, [sp, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bfb8      	it	lt
 8005cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cf4:	9305      	str	r3, [sp, #20]
 8005cf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ddc <_vfiprintf_r+0x25c>
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	4650      	mov	r0, sl
 8005cfe:	7821      	ldrb	r1, [r4, #0]
 8005d00:	f000 fd10 	bl	8006724 <memchr>
 8005d04:	b140      	cbz	r0, 8005d18 <_vfiprintf_r+0x198>
 8005d06:	2340      	movs	r3, #64	; 0x40
 8005d08:	eba0 000a 	sub.w	r0, r0, sl
 8005d0c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d10:	9b04      	ldr	r3, [sp, #16]
 8005d12:	3401      	adds	r4, #1
 8005d14:	4303      	orrs	r3, r0
 8005d16:	9304      	str	r3, [sp, #16]
 8005d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1c:	2206      	movs	r2, #6
 8005d1e:	482c      	ldr	r0, [pc, #176]	; (8005dd0 <_vfiprintf_r+0x250>)
 8005d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d24:	f000 fcfe 	bl	8006724 <memchr>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d03f      	beq.n	8005dac <_vfiprintf_r+0x22c>
 8005d2c:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <_vfiprintf_r+0x254>)
 8005d2e:	bb1b      	cbnz	r3, 8005d78 <_vfiprintf_r+0x1f8>
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	3307      	adds	r3, #7
 8005d34:	f023 0307 	bic.w	r3, r3, #7
 8005d38:	3308      	adds	r3, #8
 8005d3a:	9303      	str	r3, [sp, #12]
 8005d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3e:	443b      	add	r3, r7
 8005d40:	9309      	str	r3, [sp, #36]	; 0x24
 8005d42:	e767      	b.n	8005c14 <_vfiprintf_r+0x94>
 8005d44:	460c      	mov	r4, r1
 8005d46:	2001      	movs	r0, #1
 8005d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d4c:	e7a5      	b.n	8005c9a <_vfiprintf_r+0x11a>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f04f 0c0a 	mov.w	ip, #10
 8005d54:	4619      	mov	r1, r3
 8005d56:	3401      	adds	r4, #1
 8005d58:	9305      	str	r3, [sp, #20]
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d60:	3a30      	subs	r2, #48	; 0x30
 8005d62:	2a09      	cmp	r2, #9
 8005d64:	d903      	bls.n	8005d6e <_vfiprintf_r+0x1ee>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0c5      	beq.n	8005cf6 <_vfiprintf_r+0x176>
 8005d6a:	9105      	str	r1, [sp, #20]
 8005d6c:	e7c3      	b.n	8005cf6 <_vfiprintf_r+0x176>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	2301      	movs	r3, #1
 8005d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d76:	e7f0      	b.n	8005d5a <_vfiprintf_r+0x1da>
 8005d78:	ab03      	add	r3, sp, #12
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	462a      	mov	r2, r5
 8005d7e:	4630      	mov	r0, r6
 8005d80:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <_vfiprintf_r+0x258>)
 8005d82:	a904      	add	r1, sp, #16
 8005d84:	f3af 8000 	nop.w
 8005d88:	4607      	mov	r7, r0
 8005d8a:	1c78      	adds	r0, r7, #1
 8005d8c:	d1d6      	bne.n	8005d3c <_vfiprintf_r+0x1bc>
 8005d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d90:	07d9      	lsls	r1, r3, #31
 8005d92:	d405      	bmi.n	8005da0 <_vfiprintf_r+0x220>
 8005d94:	89ab      	ldrh	r3, [r5, #12]
 8005d96:	059a      	lsls	r2, r3, #22
 8005d98:	d402      	bmi.n	8005da0 <_vfiprintf_r+0x220>
 8005d9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d9c:	f000 fc5d 	bl	800665a <__retarget_lock_release_recursive>
 8005da0:	89ab      	ldrh	r3, [r5, #12]
 8005da2:	065b      	lsls	r3, r3, #25
 8005da4:	f53f af12 	bmi.w	8005bcc <_vfiprintf_r+0x4c>
 8005da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005daa:	e711      	b.n	8005bd0 <_vfiprintf_r+0x50>
 8005dac:	ab03      	add	r3, sp, #12
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	462a      	mov	r2, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <_vfiprintf_r+0x258>)
 8005db6:	a904      	add	r1, sp, #16
 8005db8:	f000 f882 	bl	8005ec0 <_printf_i>
 8005dbc:	e7e4      	b.n	8005d88 <_vfiprintf_r+0x208>
 8005dbe:	bf00      	nop
 8005dc0:	08008058 	.word	0x08008058
 8005dc4:	08008078 	.word	0x08008078
 8005dc8:	08008038 	.word	0x08008038
 8005dcc:	08007f04 	.word	0x08007f04
 8005dd0:	08007f0e 	.word	0x08007f0e
 8005dd4:	00000000 	.word	0x00000000
 8005dd8:	08005b5b 	.word	0x08005b5b
 8005ddc:	08007f0a 	.word	0x08007f0a

08005de0 <_printf_common>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	4616      	mov	r6, r2
 8005de6:	4699      	mov	r9, r3
 8005de8:	688a      	ldr	r2, [r1, #8]
 8005dea:	690b      	ldr	r3, [r1, #16]
 8005dec:	4607      	mov	r7, r0
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bfb8      	it	lt
 8005df2:	4613      	movlt	r3, r2
 8005df4:	6033      	str	r3, [r6, #0]
 8005df6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e00:	b10a      	cbz	r2, 8005e06 <_printf_common+0x26>
 8005e02:	3301      	adds	r3, #1
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	0699      	lsls	r1, r3, #26
 8005e0a:	bf42      	ittt	mi
 8005e0c:	6833      	ldrmi	r3, [r6, #0]
 8005e0e:	3302      	addmi	r3, #2
 8005e10:	6033      	strmi	r3, [r6, #0]
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	f015 0506 	ands.w	r5, r5, #6
 8005e18:	d106      	bne.n	8005e28 <_printf_common+0x48>
 8005e1a:	f104 0a19 	add.w	sl, r4, #25
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	6832      	ldr	r2, [r6, #0]
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc28      	bgt.n	8005e7a <_printf_common+0x9a>
 8005e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e2c:	1e13      	subs	r3, r2, #0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	bf18      	it	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	0692      	lsls	r2, r2, #26
 8005e36:	d42d      	bmi.n	8005e94 <_printf_common+0xb4>
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d020      	beq.n	8005e88 <_printf_common+0xa8>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	68e5      	ldr	r5, [r4, #12]
 8005e4a:	f003 0306 	and.w	r3, r3, #6
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	bf18      	it	ne
 8005e52:	2500      	movne	r5, #0
 8005e54:	6832      	ldr	r2, [r6, #0]
 8005e56:	f04f 0600 	mov.w	r6, #0
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	bf08      	it	eq
 8005e5e:	1aad      	subeq	r5, r5, r2
 8005e60:	6922      	ldr	r2, [r4, #16]
 8005e62:	bf08      	it	eq
 8005e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bfc4      	itt	gt
 8005e6c:	1a9b      	subgt	r3, r3, r2
 8005e6e:	18ed      	addgt	r5, r5, r3
 8005e70:	341a      	adds	r4, #26
 8005e72:	42b5      	cmp	r5, r6
 8005e74:	d11a      	bne.n	8005eac <_printf_common+0xcc>
 8005e76:	2000      	movs	r0, #0
 8005e78:	e008      	b.n	8005e8c <_printf_common+0xac>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4638      	mov	r0, r7
 8005e82:	47c0      	blx	r8
 8005e84:	3001      	adds	r0, #1
 8005e86:	d103      	bne.n	8005e90 <_printf_common+0xb0>
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e90:	3501      	adds	r5, #1
 8005e92:	e7c4      	b.n	8005e1e <_printf_common+0x3e>
 8005e94:	2030      	movs	r0, #48	; 0x30
 8005e96:	18e1      	adds	r1, r4, r3
 8005e98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea2:	4422      	add	r2, r4
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eaa:	e7c5      	b.n	8005e38 <_printf_common+0x58>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c0      	blx	r8
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d0e6      	beq.n	8005e88 <_printf_common+0xa8>
 8005eba:	3601      	adds	r6, #1
 8005ebc:	e7d9      	b.n	8005e72 <_printf_common+0x92>
	...

08005ec0 <_printf_i>:
 8005ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	7e27      	ldrb	r7, [r4, #24]
 8005ec8:	4691      	mov	r9, r2
 8005eca:	2f78      	cmp	r7, #120	; 0x78
 8005ecc:	4680      	mov	r8, r0
 8005ece:	469a      	mov	sl, r3
 8005ed0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ed2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed6:	d807      	bhi.n	8005ee8 <_printf_i+0x28>
 8005ed8:	2f62      	cmp	r7, #98	; 0x62
 8005eda:	d80a      	bhi.n	8005ef2 <_printf_i+0x32>
 8005edc:	2f00      	cmp	r7, #0
 8005ede:	f000 80d9 	beq.w	8006094 <_printf_i+0x1d4>
 8005ee2:	2f58      	cmp	r7, #88	; 0x58
 8005ee4:	f000 80a4 	beq.w	8006030 <_printf_i+0x170>
 8005ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ef0:	e03a      	b.n	8005f68 <_printf_i+0xa8>
 8005ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef6:	2b15      	cmp	r3, #21
 8005ef8:	d8f6      	bhi.n	8005ee8 <_printf_i+0x28>
 8005efa:	a001      	add	r0, pc, #4	; (adr r0, 8005f00 <_printf_i+0x40>)
 8005efc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005ee9 	.word	0x08005ee9
 8005f0c:	08005ee9 	.word	0x08005ee9
 8005f10:	08005ee9 	.word	0x08005ee9
 8005f14:	08005ee9 	.word	0x08005ee9
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	08005ee9 	.word	0x08005ee9
 8005f20:	08005ee9 	.word	0x08005ee9
 8005f24:	08005ee9 	.word	0x08005ee9
 8005f28:	08005ee9 	.word	0x08005ee9
 8005f2c:	0800607b 	.word	0x0800607b
 8005f30:	08005f9d 	.word	0x08005f9d
 8005f34:	0800605d 	.word	0x0800605d
 8005f38:	08005ee9 	.word	0x08005ee9
 8005f3c:	08005ee9 	.word	0x08005ee9
 8005f40:	0800609d 	.word	0x0800609d
 8005f44:	08005ee9 	.word	0x08005ee9
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005ee9 	.word	0x08005ee9
 8005f50:	08005ee9 	.word	0x08005ee9
 8005f54:	08006065 	.word	0x08006065
 8005f58:	680b      	ldr	r3, [r1, #0]
 8005f5a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f5e:	1d1a      	adds	r2, r3, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	600a      	str	r2, [r1, #0]
 8005f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0a4      	b.n	80060b6 <_printf_i+0x1f6>
 8005f6c:	6825      	ldr	r5, [r4, #0]
 8005f6e:	6808      	ldr	r0, [r1, #0]
 8005f70:	062e      	lsls	r6, r5, #24
 8005f72:	f100 0304 	add.w	r3, r0, #4
 8005f76:	d50a      	bpl.n	8005f8e <_printf_i+0xce>
 8005f78:	6805      	ldr	r5, [r0, #0]
 8005f7a:	600b      	str	r3, [r1, #0]
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	da03      	bge.n	8005f88 <_printf_i+0xc8>
 8005f80:	232d      	movs	r3, #45	; 0x2d
 8005f82:	426d      	negs	r5, r5
 8005f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f88:	230a      	movs	r3, #10
 8005f8a:	485e      	ldr	r0, [pc, #376]	; (8006104 <_printf_i+0x244>)
 8005f8c:	e019      	b.n	8005fc2 <_printf_i+0x102>
 8005f8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f92:	6805      	ldr	r5, [r0, #0]
 8005f94:	600b      	str	r3, [r1, #0]
 8005f96:	bf18      	it	ne
 8005f98:	b22d      	sxthne	r5, r5
 8005f9a:	e7ef      	b.n	8005f7c <_printf_i+0xbc>
 8005f9c:	680b      	ldr	r3, [r1, #0]
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	1d18      	adds	r0, r3, #4
 8005fa2:	6008      	str	r0, [r1, #0]
 8005fa4:	0628      	lsls	r0, r5, #24
 8005fa6:	d501      	bpl.n	8005fac <_printf_i+0xec>
 8005fa8:	681d      	ldr	r5, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <_printf_i+0xf2>
 8005fac:	0669      	lsls	r1, r5, #25
 8005fae:	d5fb      	bpl.n	8005fa8 <_printf_i+0xe8>
 8005fb0:	881d      	ldrh	r5, [r3, #0]
 8005fb2:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb4:	bf0c      	ite	eq
 8005fb6:	2308      	moveq	r3, #8
 8005fb8:	230a      	movne	r3, #10
 8005fba:	4852      	ldr	r0, [pc, #328]	; (8006104 <_printf_i+0x244>)
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fc2:	6866      	ldr	r6, [r4, #4]
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	bfa8      	it	ge
 8005fc8:	6821      	ldrge	r1, [r4, #0]
 8005fca:	60a6      	str	r6, [r4, #8]
 8005fcc:	bfa4      	itt	ge
 8005fce:	f021 0104 	bicge.w	r1, r1, #4
 8005fd2:	6021      	strge	r1, [r4, #0]
 8005fd4:	b90d      	cbnz	r5, 8005fda <_printf_i+0x11a>
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	d04d      	beq.n	8006076 <_printf_i+0x1b6>
 8005fda:	4616      	mov	r6, r2
 8005fdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fe0:	fb03 5711 	mls	r7, r3, r1, r5
 8005fe4:	5dc7      	ldrb	r7, [r0, r7]
 8005fe6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fea:	462f      	mov	r7, r5
 8005fec:	42bb      	cmp	r3, r7
 8005fee:	460d      	mov	r5, r1
 8005ff0:	d9f4      	bls.n	8005fdc <_printf_i+0x11c>
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d10b      	bne.n	800600e <_printf_i+0x14e>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	07df      	lsls	r7, r3, #31
 8005ffa:	d508      	bpl.n	800600e <_printf_i+0x14e>
 8005ffc:	6923      	ldr	r3, [r4, #16]
 8005ffe:	6861      	ldr	r1, [r4, #4]
 8006000:	4299      	cmp	r1, r3
 8006002:	bfde      	ittt	le
 8006004:	2330      	movle	r3, #48	; 0x30
 8006006:	f806 3c01 	strble.w	r3, [r6, #-1]
 800600a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800600e:	1b92      	subs	r2, r2, r6
 8006010:	6122      	str	r2, [r4, #16]
 8006012:	464b      	mov	r3, r9
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f8cd a000 	str.w	sl, [sp]
 800601c:	aa03      	add	r2, sp, #12
 800601e:	f7ff fedf 	bl	8005de0 <_printf_common>
 8006022:	3001      	adds	r0, #1
 8006024:	d14c      	bne.n	80060c0 <_printf_i+0x200>
 8006026:	f04f 30ff 	mov.w	r0, #4294967295
 800602a:	b004      	add	sp, #16
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	4834      	ldr	r0, [pc, #208]	; (8006104 <_printf_i+0x244>)
 8006032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006036:	680e      	ldr	r6, [r1, #0]
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	f856 5b04 	ldr.w	r5, [r6], #4
 800603e:	061f      	lsls	r7, r3, #24
 8006040:	600e      	str	r6, [r1, #0]
 8006042:	d514      	bpl.n	800606e <_printf_i+0x1ae>
 8006044:	07d9      	lsls	r1, r3, #31
 8006046:	bf44      	itt	mi
 8006048:	f043 0320 	orrmi.w	r3, r3, #32
 800604c:	6023      	strmi	r3, [r4, #0]
 800604e:	b91d      	cbnz	r5, 8006058 <_printf_i+0x198>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	f023 0320 	bic.w	r3, r3, #32
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	2310      	movs	r3, #16
 800605a:	e7af      	b.n	8005fbc <_printf_i+0xfc>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	f043 0320 	orr.w	r3, r3, #32
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	2378      	movs	r3, #120	; 0x78
 8006066:	4828      	ldr	r0, [pc, #160]	; (8006108 <_printf_i+0x248>)
 8006068:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800606c:	e7e3      	b.n	8006036 <_printf_i+0x176>
 800606e:	065e      	lsls	r6, r3, #25
 8006070:	bf48      	it	mi
 8006072:	b2ad      	uxthmi	r5, r5
 8006074:	e7e6      	b.n	8006044 <_printf_i+0x184>
 8006076:	4616      	mov	r6, r2
 8006078:	e7bb      	b.n	8005ff2 <_printf_i+0x132>
 800607a:	680b      	ldr	r3, [r1, #0]
 800607c:	6826      	ldr	r6, [r4, #0]
 800607e:	1d1d      	adds	r5, r3, #4
 8006080:	6960      	ldr	r0, [r4, #20]
 8006082:	600d      	str	r5, [r1, #0]
 8006084:	0635      	lsls	r5, r6, #24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	d501      	bpl.n	800608e <_printf_i+0x1ce>
 800608a:	6018      	str	r0, [r3, #0]
 800608c:	e002      	b.n	8006094 <_printf_i+0x1d4>
 800608e:	0671      	lsls	r1, r6, #25
 8006090:	d5fb      	bpl.n	800608a <_printf_i+0x1ca>
 8006092:	8018      	strh	r0, [r3, #0]
 8006094:	2300      	movs	r3, #0
 8006096:	4616      	mov	r6, r2
 8006098:	6123      	str	r3, [r4, #16]
 800609a:	e7ba      	b.n	8006012 <_printf_i+0x152>
 800609c:	680b      	ldr	r3, [r1, #0]
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	600a      	str	r2, [r1, #0]
 80060a2:	681e      	ldr	r6, [r3, #0]
 80060a4:	2100      	movs	r1, #0
 80060a6:	4630      	mov	r0, r6
 80060a8:	6862      	ldr	r2, [r4, #4]
 80060aa:	f000 fb3b 	bl	8006724 <memchr>
 80060ae:	b108      	cbz	r0, 80060b4 <_printf_i+0x1f4>
 80060b0:	1b80      	subs	r0, r0, r6
 80060b2:	6060      	str	r0, [r4, #4]
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	2300      	movs	r3, #0
 80060ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060be:	e7a8      	b.n	8006012 <_printf_i+0x152>
 80060c0:	4632      	mov	r2, r6
 80060c2:	4649      	mov	r1, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	47d0      	blx	sl
 80060ca:	3001      	adds	r0, #1
 80060cc:	d0ab      	beq.n	8006026 <_printf_i+0x166>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	079b      	lsls	r3, r3, #30
 80060d2:	d413      	bmi.n	80060fc <_printf_i+0x23c>
 80060d4:	68e0      	ldr	r0, [r4, #12]
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	4298      	cmp	r0, r3
 80060da:	bfb8      	it	lt
 80060dc:	4618      	movlt	r0, r3
 80060de:	e7a4      	b.n	800602a <_printf_i+0x16a>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4632      	mov	r2, r6
 80060e4:	4649      	mov	r1, r9
 80060e6:	4640      	mov	r0, r8
 80060e8:	47d0      	blx	sl
 80060ea:	3001      	adds	r0, #1
 80060ec:	d09b      	beq.n	8006026 <_printf_i+0x166>
 80060ee:	3501      	adds	r5, #1
 80060f0:	68e3      	ldr	r3, [r4, #12]
 80060f2:	9903      	ldr	r1, [sp, #12]
 80060f4:	1a5b      	subs	r3, r3, r1
 80060f6:	42ab      	cmp	r3, r5
 80060f8:	dcf2      	bgt.n	80060e0 <_printf_i+0x220>
 80060fa:	e7eb      	b.n	80060d4 <_printf_i+0x214>
 80060fc:	2500      	movs	r5, #0
 80060fe:	f104 0619 	add.w	r6, r4, #25
 8006102:	e7f5      	b.n	80060f0 <_printf_i+0x230>
 8006104:	08007f15 	.word	0x08007f15
 8006108:	08007f26 	.word	0x08007f26

0800610c <nan>:
 800610c:	2000      	movs	r0, #0
 800610e:	4901      	ldr	r1, [pc, #4]	; (8006114 <nan+0x8>)
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	7ff80000 	.word	0x7ff80000

08006118 <strncmp>:
 8006118:	b510      	push	{r4, lr}
 800611a:	b16a      	cbz	r2, 8006138 <strncmp+0x20>
 800611c:	3901      	subs	r1, #1
 800611e:	1884      	adds	r4, r0, r2
 8006120:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006124:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006128:	4293      	cmp	r3, r2
 800612a:	d103      	bne.n	8006134 <strncmp+0x1c>
 800612c:	42a0      	cmp	r0, r4
 800612e:	d001      	beq.n	8006134 <strncmp+0x1c>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1f5      	bne.n	8006120 <strncmp+0x8>
 8006134:	1a98      	subs	r0, r3, r2
 8006136:	bd10      	pop	{r4, pc}
 8006138:	4610      	mov	r0, r2
 800613a:	e7fc      	b.n	8006136 <strncmp+0x1e>

0800613c <__swbuf_r>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	460e      	mov	r6, r1
 8006140:	4614      	mov	r4, r2
 8006142:	4605      	mov	r5, r0
 8006144:	b118      	cbz	r0, 800614e <__swbuf_r+0x12>
 8006146:	6983      	ldr	r3, [r0, #24]
 8006148:	b90b      	cbnz	r3, 800614e <__swbuf_r+0x12>
 800614a:	f000 f9e7 	bl	800651c <__sinit>
 800614e:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <__swbuf_r+0x98>)
 8006150:	429c      	cmp	r4, r3
 8006152:	d12b      	bne.n	80061ac <__swbuf_r+0x70>
 8006154:	686c      	ldr	r4, [r5, #4]
 8006156:	69a3      	ldr	r3, [r4, #24]
 8006158:	60a3      	str	r3, [r4, #8]
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	071a      	lsls	r2, r3, #28
 800615e:	d52f      	bpl.n	80061c0 <__swbuf_r+0x84>
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	b36b      	cbz	r3, 80061c0 <__swbuf_r+0x84>
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	b2f6      	uxtb	r6, r6
 800616a:	1ac0      	subs	r0, r0, r3
 800616c:	6963      	ldr	r3, [r4, #20]
 800616e:	4637      	mov	r7, r6
 8006170:	4283      	cmp	r3, r0
 8006172:	dc04      	bgt.n	800617e <__swbuf_r+0x42>
 8006174:	4621      	mov	r1, r4
 8006176:	4628      	mov	r0, r5
 8006178:	f000 f93c 	bl	80063f4 <_fflush_r>
 800617c:	bb30      	cbnz	r0, 80061cc <__swbuf_r+0x90>
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	3001      	adds	r0, #1
 8006182:	3b01      	subs	r3, #1
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	6022      	str	r2, [r4, #0]
 800618c:	701e      	strb	r6, [r3, #0]
 800618e:	6963      	ldr	r3, [r4, #20]
 8006190:	4283      	cmp	r3, r0
 8006192:	d004      	beq.n	800619e <__swbuf_r+0x62>
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	07db      	lsls	r3, r3, #31
 8006198:	d506      	bpl.n	80061a8 <__swbuf_r+0x6c>
 800619a:	2e0a      	cmp	r6, #10
 800619c:	d104      	bne.n	80061a8 <__swbuf_r+0x6c>
 800619e:	4621      	mov	r1, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 f927 	bl	80063f4 <_fflush_r>
 80061a6:	b988      	cbnz	r0, 80061cc <__swbuf_r+0x90>
 80061a8:	4638      	mov	r0, r7
 80061aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <__swbuf_r+0x9c>)
 80061ae:	429c      	cmp	r4, r3
 80061b0:	d101      	bne.n	80061b6 <__swbuf_r+0x7a>
 80061b2:	68ac      	ldr	r4, [r5, #8]
 80061b4:	e7cf      	b.n	8006156 <__swbuf_r+0x1a>
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <__swbuf_r+0xa0>)
 80061b8:	429c      	cmp	r4, r3
 80061ba:	bf08      	it	eq
 80061bc:	68ec      	ldreq	r4, [r5, #12]
 80061be:	e7ca      	b.n	8006156 <__swbuf_r+0x1a>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4628      	mov	r0, r5
 80061c4:	f000 f81a 	bl	80061fc <__swsetup_r>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d0cb      	beq.n	8006164 <__swbuf_r+0x28>
 80061cc:	f04f 37ff 	mov.w	r7, #4294967295
 80061d0:	e7ea      	b.n	80061a8 <__swbuf_r+0x6c>
 80061d2:	bf00      	nop
 80061d4:	08008058 	.word	0x08008058
 80061d8:	08008078 	.word	0x08008078
 80061dc:	08008038 	.word	0x08008038

080061e0 <__ascii_wctomb>:
 80061e0:	4603      	mov	r3, r0
 80061e2:	4608      	mov	r0, r1
 80061e4:	b141      	cbz	r1, 80061f8 <__ascii_wctomb+0x18>
 80061e6:	2aff      	cmp	r2, #255	; 0xff
 80061e8:	d904      	bls.n	80061f4 <__ascii_wctomb+0x14>
 80061ea:	228a      	movs	r2, #138	; 0x8a
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	4770      	bx	lr
 80061f4:	2001      	movs	r0, #1
 80061f6:	700a      	strb	r2, [r1, #0]
 80061f8:	4770      	bx	lr
	...

080061fc <__swsetup_r>:
 80061fc:	4b32      	ldr	r3, [pc, #200]	; (80062c8 <__swsetup_r+0xcc>)
 80061fe:	b570      	push	{r4, r5, r6, lr}
 8006200:	681d      	ldr	r5, [r3, #0]
 8006202:	4606      	mov	r6, r0
 8006204:	460c      	mov	r4, r1
 8006206:	b125      	cbz	r5, 8006212 <__swsetup_r+0x16>
 8006208:	69ab      	ldr	r3, [r5, #24]
 800620a:	b913      	cbnz	r3, 8006212 <__swsetup_r+0x16>
 800620c:	4628      	mov	r0, r5
 800620e:	f000 f985 	bl	800651c <__sinit>
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <__swsetup_r+0xd0>)
 8006214:	429c      	cmp	r4, r3
 8006216:	d10f      	bne.n	8006238 <__swsetup_r+0x3c>
 8006218:	686c      	ldr	r4, [r5, #4]
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006220:	0719      	lsls	r1, r3, #28
 8006222:	d42c      	bmi.n	800627e <__swsetup_r+0x82>
 8006224:	06dd      	lsls	r5, r3, #27
 8006226:	d411      	bmi.n	800624c <__swsetup_r+0x50>
 8006228:	2309      	movs	r3, #9
 800622a:	6033      	str	r3, [r6, #0]
 800622c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	e03e      	b.n	80062b6 <__swsetup_r+0xba>
 8006238:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <__swsetup_r+0xd4>)
 800623a:	429c      	cmp	r4, r3
 800623c:	d101      	bne.n	8006242 <__swsetup_r+0x46>
 800623e:	68ac      	ldr	r4, [r5, #8]
 8006240:	e7eb      	b.n	800621a <__swsetup_r+0x1e>
 8006242:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <__swsetup_r+0xd8>)
 8006244:	429c      	cmp	r4, r3
 8006246:	bf08      	it	eq
 8006248:	68ec      	ldreq	r4, [r5, #12]
 800624a:	e7e6      	b.n	800621a <__swsetup_r+0x1e>
 800624c:	0758      	lsls	r0, r3, #29
 800624e:	d512      	bpl.n	8006276 <__swsetup_r+0x7a>
 8006250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006252:	b141      	cbz	r1, 8006266 <__swsetup_r+0x6a>
 8006254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006258:	4299      	cmp	r1, r3
 800625a:	d002      	beq.n	8006262 <__swsetup_r+0x66>
 800625c:	4630      	mov	r0, r6
 800625e:	f7fd fb11 	bl	8003884 <_free_r>
 8006262:	2300      	movs	r3, #0
 8006264:	6363      	str	r3, [r4, #52]	; 0x34
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800626c:	81a3      	strh	r3, [r4, #12]
 800626e:	2300      	movs	r3, #0
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f043 0308 	orr.w	r3, r3, #8
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	b94b      	cbnz	r3, 8006296 <__swsetup_r+0x9a>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800628c:	d003      	beq.n	8006296 <__swsetup_r+0x9a>
 800628e:	4621      	mov	r1, r4
 8006290:	4630      	mov	r0, r6
 8006292:	f000 fa07 	bl	80066a4 <__smakebuf_r>
 8006296:	89a0      	ldrh	r0, [r4, #12]
 8006298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800629c:	f010 0301 	ands.w	r3, r0, #1
 80062a0:	d00a      	beq.n	80062b8 <__swsetup_r+0xbc>
 80062a2:	2300      	movs	r3, #0
 80062a4:	60a3      	str	r3, [r4, #8]
 80062a6:	6963      	ldr	r3, [r4, #20]
 80062a8:	425b      	negs	r3, r3
 80062aa:	61a3      	str	r3, [r4, #24]
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	b943      	cbnz	r3, 80062c2 <__swsetup_r+0xc6>
 80062b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062b4:	d1ba      	bne.n	800622c <__swsetup_r+0x30>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	0781      	lsls	r1, r0, #30
 80062ba:	bf58      	it	pl
 80062bc:	6963      	ldrpl	r3, [r4, #20]
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	e7f4      	b.n	80062ac <__swsetup_r+0xb0>
 80062c2:	2000      	movs	r0, #0
 80062c4:	e7f7      	b.n	80062b6 <__swsetup_r+0xba>
 80062c6:	bf00      	nop
 80062c8:	20000010 	.word	0x20000010
 80062cc:	08008058 	.word	0x08008058
 80062d0:	08008078 	.word	0x08008078
 80062d4:	08008038 	.word	0x08008038

080062d8 <abort>:
 80062d8:	2006      	movs	r0, #6
 80062da:	b508      	push	{r3, lr}
 80062dc:	f000 fa98 	bl	8006810 <raise>
 80062e0:	2001      	movs	r0, #1
 80062e2:	f7fb fd20 	bl	8001d26 <_exit>
	...

080062e8 <__sflush_r>:
 80062e8:	898a      	ldrh	r2, [r1, #12]
 80062ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	4605      	mov	r5, r0
 80062f0:	0710      	lsls	r0, r2, #28
 80062f2:	460c      	mov	r4, r1
 80062f4:	d458      	bmi.n	80063a8 <__sflush_r+0xc0>
 80062f6:	684b      	ldr	r3, [r1, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dc05      	bgt.n	8006308 <__sflush_r+0x20>
 80062fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dc02      	bgt.n	8006308 <__sflush_r+0x20>
 8006302:	2000      	movs	r0, #0
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800630a:	2e00      	cmp	r6, #0
 800630c:	d0f9      	beq.n	8006302 <__sflush_r+0x1a>
 800630e:	2300      	movs	r3, #0
 8006310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006314:	682f      	ldr	r7, [r5, #0]
 8006316:	602b      	str	r3, [r5, #0]
 8006318:	d032      	beq.n	8006380 <__sflush_r+0x98>
 800631a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	075a      	lsls	r2, r3, #29
 8006320:	d505      	bpl.n	800632e <__sflush_r+0x46>
 8006322:	6863      	ldr	r3, [r4, #4]
 8006324:	1ac0      	subs	r0, r0, r3
 8006326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006328:	b10b      	cbz	r3, 800632e <__sflush_r+0x46>
 800632a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800632c:	1ac0      	subs	r0, r0, r3
 800632e:	2300      	movs	r3, #0
 8006330:	4602      	mov	r2, r0
 8006332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006334:	4628      	mov	r0, r5
 8006336:	6a21      	ldr	r1, [r4, #32]
 8006338:	47b0      	blx	r6
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	d106      	bne.n	800634e <__sflush_r+0x66>
 8006340:	6829      	ldr	r1, [r5, #0]
 8006342:	291d      	cmp	r1, #29
 8006344:	d82c      	bhi.n	80063a0 <__sflush_r+0xb8>
 8006346:	4a2a      	ldr	r2, [pc, #168]	; (80063f0 <__sflush_r+0x108>)
 8006348:	40ca      	lsrs	r2, r1
 800634a:	07d6      	lsls	r6, r2, #31
 800634c:	d528      	bpl.n	80063a0 <__sflush_r+0xb8>
 800634e:	2200      	movs	r2, #0
 8006350:	6062      	str	r2, [r4, #4]
 8006352:	6922      	ldr	r2, [r4, #16]
 8006354:	04d9      	lsls	r1, r3, #19
 8006356:	6022      	str	r2, [r4, #0]
 8006358:	d504      	bpl.n	8006364 <__sflush_r+0x7c>
 800635a:	1c42      	adds	r2, r0, #1
 800635c:	d101      	bne.n	8006362 <__sflush_r+0x7a>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	b903      	cbnz	r3, 8006364 <__sflush_r+0x7c>
 8006362:	6560      	str	r0, [r4, #84]	; 0x54
 8006364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006366:	602f      	str	r7, [r5, #0]
 8006368:	2900      	cmp	r1, #0
 800636a:	d0ca      	beq.n	8006302 <__sflush_r+0x1a>
 800636c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006370:	4299      	cmp	r1, r3
 8006372:	d002      	beq.n	800637a <__sflush_r+0x92>
 8006374:	4628      	mov	r0, r5
 8006376:	f7fd fa85 	bl	8003884 <_free_r>
 800637a:	2000      	movs	r0, #0
 800637c:	6360      	str	r0, [r4, #52]	; 0x34
 800637e:	e7c1      	b.n	8006304 <__sflush_r+0x1c>
 8006380:	6a21      	ldr	r1, [r4, #32]
 8006382:	2301      	movs	r3, #1
 8006384:	4628      	mov	r0, r5
 8006386:	47b0      	blx	r6
 8006388:	1c41      	adds	r1, r0, #1
 800638a:	d1c7      	bne.n	800631c <__sflush_r+0x34>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0c4      	beq.n	800631c <__sflush_r+0x34>
 8006392:	2b1d      	cmp	r3, #29
 8006394:	d001      	beq.n	800639a <__sflush_r+0xb2>
 8006396:	2b16      	cmp	r3, #22
 8006398:	d101      	bne.n	800639e <__sflush_r+0xb6>
 800639a:	602f      	str	r7, [r5, #0]
 800639c:	e7b1      	b.n	8006302 <__sflush_r+0x1a>
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	e7ad      	b.n	8006304 <__sflush_r+0x1c>
 80063a8:	690f      	ldr	r7, [r1, #16]
 80063aa:	2f00      	cmp	r7, #0
 80063ac:	d0a9      	beq.n	8006302 <__sflush_r+0x1a>
 80063ae:	0793      	lsls	r3, r2, #30
 80063b0:	bf18      	it	ne
 80063b2:	2300      	movne	r3, #0
 80063b4:	680e      	ldr	r6, [r1, #0]
 80063b6:	bf08      	it	eq
 80063b8:	694b      	ldreq	r3, [r1, #20]
 80063ba:	eba6 0807 	sub.w	r8, r6, r7
 80063be:	600f      	str	r7, [r1, #0]
 80063c0:	608b      	str	r3, [r1, #8]
 80063c2:	f1b8 0f00 	cmp.w	r8, #0
 80063c6:	dd9c      	ble.n	8006302 <__sflush_r+0x1a>
 80063c8:	4643      	mov	r3, r8
 80063ca:	463a      	mov	r2, r7
 80063cc:	4628      	mov	r0, r5
 80063ce:	6a21      	ldr	r1, [r4, #32]
 80063d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063d2:	47b0      	blx	r6
 80063d4:	2800      	cmp	r0, #0
 80063d6:	dc06      	bgt.n	80063e6 <__sflush_r+0xfe>
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	f04f 30ff 	mov.w	r0, #4294967295
 80063de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	e78e      	b.n	8006304 <__sflush_r+0x1c>
 80063e6:	4407      	add	r7, r0
 80063e8:	eba8 0800 	sub.w	r8, r8, r0
 80063ec:	e7e9      	b.n	80063c2 <__sflush_r+0xda>
 80063ee:	bf00      	nop
 80063f0:	20400001 	.word	0x20400001

080063f4 <_fflush_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	690b      	ldr	r3, [r1, #16]
 80063f8:	4605      	mov	r5, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b913      	cbnz	r3, 8006404 <_fflush_r+0x10>
 80063fe:	2500      	movs	r5, #0
 8006400:	4628      	mov	r0, r5
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	b118      	cbz	r0, 800640e <_fflush_r+0x1a>
 8006406:	6983      	ldr	r3, [r0, #24]
 8006408:	b90b      	cbnz	r3, 800640e <_fflush_r+0x1a>
 800640a:	f000 f887 	bl	800651c <__sinit>
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <_fflush_r+0x6c>)
 8006410:	429c      	cmp	r4, r3
 8006412:	d11b      	bne.n	800644c <_fflush_r+0x58>
 8006414:	686c      	ldr	r4, [r5, #4]
 8006416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0ef      	beq.n	80063fe <_fflush_r+0xa>
 800641e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006420:	07d0      	lsls	r0, r2, #31
 8006422:	d404      	bmi.n	800642e <_fflush_r+0x3a>
 8006424:	0599      	lsls	r1, r3, #22
 8006426:	d402      	bmi.n	800642e <_fflush_r+0x3a>
 8006428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800642a:	f000 f915 	bl	8006658 <__retarget_lock_acquire_recursive>
 800642e:	4628      	mov	r0, r5
 8006430:	4621      	mov	r1, r4
 8006432:	f7ff ff59 	bl	80062e8 <__sflush_r>
 8006436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006438:	4605      	mov	r5, r0
 800643a:	07da      	lsls	r2, r3, #31
 800643c:	d4e0      	bmi.n	8006400 <_fflush_r+0xc>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	059b      	lsls	r3, r3, #22
 8006442:	d4dd      	bmi.n	8006400 <_fflush_r+0xc>
 8006444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006446:	f000 f908 	bl	800665a <__retarget_lock_release_recursive>
 800644a:	e7d9      	b.n	8006400 <_fflush_r+0xc>
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <_fflush_r+0x70>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d101      	bne.n	8006456 <_fflush_r+0x62>
 8006452:	68ac      	ldr	r4, [r5, #8]
 8006454:	e7df      	b.n	8006416 <_fflush_r+0x22>
 8006456:	4b04      	ldr	r3, [pc, #16]	; (8006468 <_fflush_r+0x74>)
 8006458:	429c      	cmp	r4, r3
 800645a:	bf08      	it	eq
 800645c:	68ec      	ldreq	r4, [r5, #12]
 800645e:	e7da      	b.n	8006416 <_fflush_r+0x22>
 8006460:	08008058 	.word	0x08008058
 8006464:	08008078 	.word	0x08008078
 8006468:	08008038 	.word	0x08008038

0800646c <std>:
 800646c:	2300      	movs	r3, #0
 800646e:	b510      	push	{r4, lr}
 8006470:	4604      	mov	r4, r0
 8006472:	e9c0 3300 	strd	r3, r3, [r0]
 8006476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800647a:	6083      	str	r3, [r0, #8]
 800647c:	8181      	strh	r1, [r0, #12]
 800647e:	6643      	str	r3, [r0, #100]	; 0x64
 8006480:	81c2      	strh	r2, [r0, #14]
 8006482:	6183      	str	r3, [r0, #24]
 8006484:	4619      	mov	r1, r3
 8006486:	2208      	movs	r2, #8
 8006488:	305c      	adds	r0, #92	; 0x5c
 800648a:	f7fd f9f3 	bl	8003874 <memset>
 800648e:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <std+0x38>)
 8006490:	6224      	str	r4, [r4, #32]
 8006492:	6263      	str	r3, [r4, #36]	; 0x24
 8006494:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <std+0x3c>)
 8006496:	62a3      	str	r3, [r4, #40]	; 0x28
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <std+0x40>)
 800649a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800649c:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <std+0x44>)
 800649e:	6323      	str	r3, [r4, #48]	; 0x30
 80064a0:	bd10      	pop	{r4, pc}
 80064a2:	bf00      	nop
 80064a4:	08006849 	.word	0x08006849
 80064a8:	0800686b 	.word	0x0800686b
 80064ac:	080068a3 	.word	0x080068a3
 80064b0:	080068c7 	.word	0x080068c7

080064b4 <_cleanup_r>:
 80064b4:	4901      	ldr	r1, [pc, #4]	; (80064bc <_cleanup_r+0x8>)
 80064b6:	f000 b8af 	b.w	8006618 <_fwalk_reent>
 80064ba:	bf00      	nop
 80064bc:	080063f5 	.word	0x080063f5

080064c0 <__sfmoreglue>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	2568      	movs	r5, #104	; 0x68
 80064c4:	1e4a      	subs	r2, r1, #1
 80064c6:	4355      	muls	r5, r2
 80064c8:	460e      	mov	r6, r1
 80064ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064ce:	f7fd fa25 	bl	800391c <_malloc_r>
 80064d2:	4604      	mov	r4, r0
 80064d4:	b140      	cbz	r0, 80064e8 <__sfmoreglue+0x28>
 80064d6:	2100      	movs	r1, #0
 80064d8:	e9c0 1600 	strd	r1, r6, [r0]
 80064dc:	300c      	adds	r0, #12
 80064de:	60a0      	str	r0, [r4, #8]
 80064e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064e4:	f7fd f9c6 	bl	8003874 <memset>
 80064e8:	4620      	mov	r0, r4
 80064ea:	bd70      	pop	{r4, r5, r6, pc}

080064ec <__sfp_lock_acquire>:
 80064ec:	4801      	ldr	r0, [pc, #4]	; (80064f4 <__sfp_lock_acquire+0x8>)
 80064ee:	f000 b8b3 	b.w	8006658 <__retarget_lock_acquire_recursive>
 80064f2:	bf00      	nop
 80064f4:	200003c8 	.word	0x200003c8

080064f8 <__sfp_lock_release>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__sfp_lock_release+0x8>)
 80064fa:	f000 b8ae 	b.w	800665a <__retarget_lock_release_recursive>
 80064fe:	bf00      	nop
 8006500:	200003c8 	.word	0x200003c8

08006504 <__sinit_lock_acquire>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__sinit_lock_acquire+0x8>)
 8006506:	f000 b8a7 	b.w	8006658 <__retarget_lock_acquire_recursive>
 800650a:	bf00      	nop
 800650c:	200003c3 	.word	0x200003c3

08006510 <__sinit_lock_release>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__sinit_lock_release+0x8>)
 8006512:	f000 b8a2 	b.w	800665a <__retarget_lock_release_recursive>
 8006516:	bf00      	nop
 8006518:	200003c3 	.word	0x200003c3

0800651c <__sinit>:
 800651c:	b510      	push	{r4, lr}
 800651e:	4604      	mov	r4, r0
 8006520:	f7ff fff0 	bl	8006504 <__sinit_lock_acquire>
 8006524:	69a3      	ldr	r3, [r4, #24]
 8006526:	b11b      	cbz	r3, 8006530 <__sinit+0x14>
 8006528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652c:	f7ff bff0 	b.w	8006510 <__sinit_lock_release>
 8006530:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006534:	6523      	str	r3, [r4, #80]	; 0x50
 8006536:	4b13      	ldr	r3, [pc, #76]	; (8006584 <__sinit+0x68>)
 8006538:	4a13      	ldr	r2, [pc, #76]	; (8006588 <__sinit+0x6c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	62a2      	str	r2, [r4, #40]	; 0x28
 800653e:	42a3      	cmp	r3, r4
 8006540:	bf08      	it	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	4620      	mov	r0, r4
 8006546:	bf08      	it	eq
 8006548:	61a3      	streq	r3, [r4, #24]
 800654a:	f000 f81f 	bl	800658c <__sfp>
 800654e:	6060      	str	r0, [r4, #4]
 8006550:	4620      	mov	r0, r4
 8006552:	f000 f81b 	bl	800658c <__sfp>
 8006556:	60a0      	str	r0, [r4, #8]
 8006558:	4620      	mov	r0, r4
 800655a:	f000 f817 	bl	800658c <__sfp>
 800655e:	2200      	movs	r2, #0
 8006560:	2104      	movs	r1, #4
 8006562:	60e0      	str	r0, [r4, #12]
 8006564:	6860      	ldr	r0, [r4, #4]
 8006566:	f7ff ff81 	bl	800646c <std>
 800656a:	2201      	movs	r2, #1
 800656c:	2109      	movs	r1, #9
 800656e:	68a0      	ldr	r0, [r4, #8]
 8006570:	f7ff ff7c 	bl	800646c <std>
 8006574:	2202      	movs	r2, #2
 8006576:	2112      	movs	r1, #18
 8006578:	68e0      	ldr	r0, [r4, #12]
 800657a:	f7ff ff77 	bl	800646c <std>
 800657e:	2301      	movs	r3, #1
 8006580:	61a3      	str	r3, [r4, #24]
 8006582:	e7d1      	b.n	8006528 <__sinit+0xc>
 8006584:	08007c00 	.word	0x08007c00
 8006588:	080064b5 	.word	0x080064b5

0800658c <__sfp>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	4607      	mov	r7, r0
 8006590:	f7ff ffac 	bl	80064ec <__sfp_lock_acquire>
 8006594:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <__sfp+0x84>)
 8006596:	681e      	ldr	r6, [r3, #0]
 8006598:	69b3      	ldr	r3, [r6, #24]
 800659a:	b913      	cbnz	r3, 80065a2 <__sfp+0x16>
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff ffbd 	bl	800651c <__sinit>
 80065a2:	3648      	adds	r6, #72	; 0x48
 80065a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	d503      	bpl.n	80065b4 <__sfp+0x28>
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	b30b      	cbz	r3, 80065f4 <__sfp+0x68>
 80065b0:	6836      	ldr	r6, [r6, #0]
 80065b2:	e7f7      	b.n	80065a4 <__sfp+0x18>
 80065b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065b8:	b9d5      	cbnz	r5, 80065f0 <__sfp+0x64>
 80065ba:	4b16      	ldr	r3, [pc, #88]	; (8006614 <__sfp+0x88>)
 80065bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065c0:	60e3      	str	r3, [r4, #12]
 80065c2:	6665      	str	r5, [r4, #100]	; 0x64
 80065c4:	f000 f847 	bl	8006656 <__retarget_lock_init_recursive>
 80065c8:	f7ff ff96 	bl	80064f8 <__sfp_lock_release>
 80065cc:	2208      	movs	r2, #8
 80065ce:	4629      	mov	r1, r5
 80065d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065d8:	6025      	str	r5, [r4, #0]
 80065da:	61a5      	str	r5, [r4, #24]
 80065dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065e0:	f7fd f948 	bl	8003874 <memset>
 80065e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065ec:	4620      	mov	r0, r4
 80065ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f0:	3468      	adds	r4, #104	; 0x68
 80065f2:	e7d9      	b.n	80065a8 <__sfp+0x1c>
 80065f4:	2104      	movs	r1, #4
 80065f6:	4638      	mov	r0, r7
 80065f8:	f7ff ff62 	bl	80064c0 <__sfmoreglue>
 80065fc:	4604      	mov	r4, r0
 80065fe:	6030      	str	r0, [r6, #0]
 8006600:	2800      	cmp	r0, #0
 8006602:	d1d5      	bne.n	80065b0 <__sfp+0x24>
 8006604:	f7ff ff78 	bl	80064f8 <__sfp_lock_release>
 8006608:	230c      	movs	r3, #12
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	e7ee      	b.n	80065ec <__sfp+0x60>
 800660e:	bf00      	nop
 8006610:	08007c00 	.word	0x08007c00
 8006614:	ffff0001 	.word	0xffff0001

08006618 <_fwalk_reent>:
 8006618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800661c:	4606      	mov	r6, r0
 800661e:	4688      	mov	r8, r1
 8006620:	2700      	movs	r7, #0
 8006622:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006626:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800662a:	f1b9 0901 	subs.w	r9, r9, #1
 800662e:	d505      	bpl.n	800663c <_fwalk_reent+0x24>
 8006630:	6824      	ldr	r4, [r4, #0]
 8006632:	2c00      	cmp	r4, #0
 8006634:	d1f7      	bne.n	8006626 <_fwalk_reent+0xe>
 8006636:	4638      	mov	r0, r7
 8006638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663c:	89ab      	ldrh	r3, [r5, #12]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d907      	bls.n	8006652 <_fwalk_reent+0x3a>
 8006642:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006646:	3301      	adds	r3, #1
 8006648:	d003      	beq.n	8006652 <_fwalk_reent+0x3a>
 800664a:	4629      	mov	r1, r5
 800664c:	4630      	mov	r0, r6
 800664e:	47c0      	blx	r8
 8006650:	4307      	orrs	r7, r0
 8006652:	3568      	adds	r5, #104	; 0x68
 8006654:	e7e9      	b.n	800662a <_fwalk_reent+0x12>

08006656 <__retarget_lock_init_recursive>:
 8006656:	4770      	bx	lr

08006658 <__retarget_lock_acquire_recursive>:
 8006658:	4770      	bx	lr

0800665a <__retarget_lock_release_recursive>:
 800665a:	4770      	bx	lr

0800665c <__swhatbuf_r>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	460e      	mov	r6, r1
 8006660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006664:	4614      	mov	r4, r2
 8006666:	2900      	cmp	r1, #0
 8006668:	461d      	mov	r5, r3
 800666a:	b096      	sub	sp, #88	; 0x58
 800666c:	da07      	bge.n	800667e <__swhatbuf_r+0x22>
 800666e:	2300      	movs	r3, #0
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	89b3      	ldrh	r3, [r6, #12]
 8006674:	061a      	lsls	r2, r3, #24
 8006676:	d410      	bmi.n	800669a <__swhatbuf_r+0x3e>
 8006678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800667c:	e00e      	b.n	800669c <__swhatbuf_r+0x40>
 800667e:	466a      	mov	r2, sp
 8006680:	f000 f948 	bl	8006914 <_fstat_r>
 8006684:	2800      	cmp	r0, #0
 8006686:	dbf2      	blt.n	800666e <__swhatbuf_r+0x12>
 8006688:	9a01      	ldr	r2, [sp, #4]
 800668a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800668e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006692:	425a      	negs	r2, r3
 8006694:	415a      	adcs	r2, r3
 8006696:	602a      	str	r2, [r5, #0]
 8006698:	e7ee      	b.n	8006678 <__swhatbuf_r+0x1c>
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	2000      	movs	r0, #0
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	b016      	add	sp, #88	; 0x58
 80066a2:	bd70      	pop	{r4, r5, r6, pc}

080066a4 <__smakebuf_r>:
 80066a4:	898b      	ldrh	r3, [r1, #12]
 80066a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066a8:	079d      	lsls	r5, r3, #30
 80066aa:	4606      	mov	r6, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	d507      	bpl.n	80066c0 <__smakebuf_r+0x1c>
 80066b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	2301      	movs	r3, #1
 80066ba:	6163      	str	r3, [r4, #20]
 80066bc:	b002      	add	sp, #8
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	466a      	mov	r2, sp
 80066c2:	ab01      	add	r3, sp, #4
 80066c4:	f7ff ffca 	bl	800665c <__swhatbuf_r>
 80066c8:	9900      	ldr	r1, [sp, #0]
 80066ca:	4605      	mov	r5, r0
 80066cc:	4630      	mov	r0, r6
 80066ce:	f7fd f925 	bl	800391c <_malloc_r>
 80066d2:	b948      	cbnz	r0, 80066e8 <__smakebuf_r+0x44>
 80066d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d8:	059a      	lsls	r2, r3, #22
 80066da:	d4ef      	bmi.n	80066bc <__smakebuf_r+0x18>
 80066dc:	f023 0303 	bic.w	r3, r3, #3
 80066e0:	f043 0302 	orr.w	r3, r3, #2
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	e7e3      	b.n	80066b0 <__smakebuf_r+0xc>
 80066e8:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <__smakebuf_r+0x7c>)
 80066ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	6020      	str	r0, [r4, #0]
 80066f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	9b00      	ldr	r3, [sp, #0]
 80066f8:	6120      	str	r0, [r4, #16]
 80066fa:	6163      	str	r3, [r4, #20]
 80066fc:	9b01      	ldr	r3, [sp, #4]
 80066fe:	b15b      	cbz	r3, 8006718 <__smakebuf_r+0x74>
 8006700:	4630      	mov	r0, r6
 8006702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006706:	f000 f917 	bl	8006938 <_isatty_r>
 800670a:	b128      	cbz	r0, 8006718 <__smakebuf_r+0x74>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	89a0      	ldrh	r0, [r4, #12]
 800671a:	4305      	orrs	r5, r0
 800671c:	81a5      	strh	r5, [r4, #12]
 800671e:	e7cd      	b.n	80066bc <__smakebuf_r+0x18>
 8006720:	080064b5 	.word	0x080064b5

08006724 <memchr>:
 8006724:	4603      	mov	r3, r0
 8006726:	b510      	push	{r4, lr}
 8006728:	b2c9      	uxtb	r1, r1
 800672a:	4402      	add	r2, r0
 800672c:	4293      	cmp	r3, r2
 800672e:	4618      	mov	r0, r3
 8006730:	d101      	bne.n	8006736 <memchr+0x12>
 8006732:	2000      	movs	r0, #0
 8006734:	e003      	b.n	800673e <memchr+0x1a>
 8006736:	7804      	ldrb	r4, [r0, #0]
 8006738:	3301      	adds	r3, #1
 800673a:	428c      	cmp	r4, r1
 800673c:	d1f6      	bne.n	800672c <memchr+0x8>
 800673e:	bd10      	pop	{r4, pc}

08006740 <memmove>:
 8006740:	4288      	cmp	r0, r1
 8006742:	b510      	push	{r4, lr}
 8006744:	eb01 0402 	add.w	r4, r1, r2
 8006748:	d902      	bls.n	8006750 <memmove+0x10>
 800674a:	4284      	cmp	r4, r0
 800674c:	4623      	mov	r3, r4
 800674e:	d807      	bhi.n	8006760 <memmove+0x20>
 8006750:	1e43      	subs	r3, r0, #1
 8006752:	42a1      	cmp	r1, r4
 8006754:	d008      	beq.n	8006768 <memmove+0x28>
 8006756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800675a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800675e:	e7f8      	b.n	8006752 <memmove+0x12>
 8006760:	4601      	mov	r1, r0
 8006762:	4402      	add	r2, r0
 8006764:	428a      	cmp	r2, r1
 8006766:	d100      	bne.n	800676a <memmove+0x2a>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800676e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006772:	e7f7      	b.n	8006764 <memmove+0x24>

08006774 <_realloc_r>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	4607      	mov	r7, r0
 8006778:	4614      	mov	r4, r2
 800677a:	460e      	mov	r6, r1
 800677c:	b921      	cbnz	r1, 8006788 <_realloc_r+0x14>
 800677e:	4611      	mov	r1, r2
 8006780:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006784:	f7fd b8ca 	b.w	800391c <_malloc_r>
 8006788:	b922      	cbnz	r2, 8006794 <_realloc_r+0x20>
 800678a:	f7fd f87b 	bl	8003884 <_free_r>
 800678e:	4625      	mov	r5, r4
 8006790:	4628      	mov	r0, r5
 8006792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006794:	f000 f8f2 	bl	800697c <_malloc_usable_size_r>
 8006798:	42a0      	cmp	r0, r4
 800679a:	d20f      	bcs.n	80067bc <_realloc_r+0x48>
 800679c:	4621      	mov	r1, r4
 800679e:	4638      	mov	r0, r7
 80067a0:	f7fd f8bc 	bl	800391c <_malloc_r>
 80067a4:	4605      	mov	r5, r0
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d0f2      	beq.n	8006790 <_realloc_r+0x1c>
 80067aa:	4631      	mov	r1, r6
 80067ac:	4622      	mov	r2, r4
 80067ae:	f7fe fb83 	bl	8004eb8 <memcpy>
 80067b2:	4631      	mov	r1, r6
 80067b4:	4638      	mov	r0, r7
 80067b6:	f7fd f865 	bl	8003884 <_free_r>
 80067ba:	e7e9      	b.n	8006790 <_realloc_r+0x1c>
 80067bc:	4635      	mov	r5, r6
 80067be:	e7e7      	b.n	8006790 <_realloc_r+0x1c>

080067c0 <_raise_r>:
 80067c0:	291f      	cmp	r1, #31
 80067c2:	b538      	push	{r3, r4, r5, lr}
 80067c4:	4604      	mov	r4, r0
 80067c6:	460d      	mov	r5, r1
 80067c8:	d904      	bls.n	80067d4 <_raise_r+0x14>
 80067ca:	2316      	movs	r3, #22
 80067cc:	6003      	str	r3, [r0, #0]
 80067ce:	f04f 30ff 	mov.w	r0, #4294967295
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067d6:	b112      	cbz	r2, 80067de <_raise_r+0x1e>
 80067d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067dc:	b94b      	cbnz	r3, 80067f2 <_raise_r+0x32>
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 f830 	bl	8006844 <_getpid_r>
 80067e4:	462a      	mov	r2, r5
 80067e6:	4601      	mov	r1, r0
 80067e8:	4620      	mov	r0, r4
 80067ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ee:	f000 b817 	b.w	8006820 <_kill_r>
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d00a      	beq.n	800680c <_raise_r+0x4c>
 80067f6:	1c59      	adds	r1, r3, #1
 80067f8:	d103      	bne.n	8006802 <_raise_r+0x42>
 80067fa:	2316      	movs	r3, #22
 80067fc:	6003      	str	r3, [r0, #0]
 80067fe:	2001      	movs	r0, #1
 8006800:	e7e7      	b.n	80067d2 <_raise_r+0x12>
 8006802:	2400      	movs	r4, #0
 8006804:	4628      	mov	r0, r5
 8006806:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800680a:	4798      	blx	r3
 800680c:	2000      	movs	r0, #0
 800680e:	e7e0      	b.n	80067d2 <_raise_r+0x12>

08006810 <raise>:
 8006810:	4b02      	ldr	r3, [pc, #8]	; (800681c <raise+0xc>)
 8006812:	4601      	mov	r1, r0
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	f7ff bfd3 	b.w	80067c0 <_raise_r>
 800681a:	bf00      	nop
 800681c:	20000010 	.word	0x20000010

08006820 <_kill_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	2300      	movs	r3, #0
 8006824:	4d06      	ldr	r5, [pc, #24]	; (8006840 <_kill_r+0x20>)
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	f7fb fa6a 	bl	8001d06 <_kill>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	d102      	bne.n	800683c <_kill_r+0x1c>
 8006836:	682b      	ldr	r3, [r5, #0]
 8006838:	b103      	cbz	r3, 800683c <_kill_r+0x1c>
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	bd38      	pop	{r3, r4, r5, pc}
 800683e:	bf00      	nop
 8006840:	200003bc 	.word	0x200003bc

08006844 <_getpid_r>:
 8006844:	f7fb ba58 	b.w	8001cf8 <_getpid>

08006848 <__sread>:
 8006848:	b510      	push	{r4, lr}
 800684a:	460c      	mov	r4, r1
 800684c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006850:	f000 f89c 	bl	800698c <_read_r>
 8006854:	2800      	cmp	r0, #0
 8006856:	bfab      	itete	ge
 8006858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800685a:	89a3      	ldrhlt	r3, [r4, #12]
 800685c:	181b      	addge	r3, r3, r0
 800685e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006862:	bfac      	ite	ge
 8006864:	6563      	strge	r3, [r4, #84]	; 0x54
 8006866:	81a3      	strhlt	r3, [r4, #12]
 8006868:	bd10      	pop	{r4, pc}

0800686a <__swrite>:
 800686a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686e:	461f      	mov	r7, r3
 8006870:	898b      	ldrh	r3, [r1, #12]
 8006872:	4605      	mov	r5, r0
 8006874:	05db      	lsls	r3, r3, #23
 8006876:	460c      	mov	r4, r1
 8006878:	4616      	mov	r6, r2
 800687a:	d505      	bpl.n	8006888 <__swrite+0x1e>
 800687c:	2302      	movs	r3, #2
 800687e:	2200      	movs	r2, #0
 8006880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006884:	f000 f868 	bl	8006958 <_lseek_r>
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	4632      	mov	r2, r6
 800688c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006890:	81a3      	strh	r3, [r4, #12]
 8006892:	4628      	mov	r0, r5
 8006894:	463b      	mov	r3, r7
 8006896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800689a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800689e:	f000 b817 	b.w	80068d0 <_write_r>

080068a2 <__sseek>:
 80068a2:	b510      	push	{r4, lr}
 80068a4:	460c      	mov	r4, r1
 80068a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068aa:	f000 f855 	bl	8006958 <_lseek_r>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	bf15      	itete	ne
 80068b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80068b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068be:	81a3      	strheq	r3, [r4, #12]
 80068c0:	bf18      	it	ne
 80068c2:	81a3      	strhne	r3, [r4, #12]
 80068c4:	bd10      	pop	{r4, pc}

080068c6 <__sclose>:
 80068c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ca:	f000 b813 	b.w	80068f4 <_close_r>
	...

080068d0 <_write_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	2200      	movs	r2, #0
 80068da:	4d05      	ldr	r5, [pc, #20]	; (80068f0 <_write_r+0x20>)
 80068dc:	602a      	str	r2, [r5, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	f7fb fa48 	bl	8001d74 <_write>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d102      	bne.n	80068ee <_write_r+0x1e>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	b103      	cbz	r3, 80068ee <_write_r+0x1e>
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	200003bc 	.word	0x200003bc

080068f4 <_close_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	2300      	movs	r3, #0
 80068f8:	4d05      	ldr	r5, [pc, #20]	; (8006910 <_close_r+0x1c>)
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fb fa54 	bl	8001dac <_close>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_close_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_close_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	200003bc 	.word	0x200003bc

08006914 <_fstat_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	2300      	movs	r3, #0
 8006918:	4d06      	ldr	r5, [pc, #24]	; (8006934 <_fstat_r+0x20>)
 800691a:	4604      	mov	r4, r0
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	f7fb fa4e 	bl	8001dc2 <_fstat>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	d102      	bne.n	8006930 <_fstat_r+0x1c>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	b103      	cbz	r3, 8006930 <_fstat_r+0x1c>
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	bd38      	pop	{r3, r4, r5, pc}
 8006932:	bf00      	nop
 8006934:	200003bc 	.word	0x200003bc

08006938 <_isatty_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	2300      	movs	r3, #0
 800693c:	4d05      	ldr	r5, [pc, #20]	; (8006954 <_isatty_r+0x1c>)
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f7fb fa4c 	bl	8001de0 <_isatty>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_isatty_r+0x1a>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_isatty_r+0x1a>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	200003bc 	.word	0x200003bc

08006958 <_lseek_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	4611      	mov	r1, r2
 8006960:	2200      	movs	r2, #0
 8006962:	4d05      	ldr	r5, [pc, #20]	; (8006978 <_lseek_r+0x20>)
 8006964:	602a      	str	r2, [r5, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	f7fb fa44 	bl	8001df4 <_lseek>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_lseek_r+0x1e>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_lseek_r+0x1e>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	200003bc 	.word	0x200003bc

0800697c <_malloc_usable_size_r>:
 800697c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006980:	1f18      	subs	r0, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	bfbc      	itt	lt
 8006986:	580b      	ldrlt	r3, [r1, r0]
 8006988:	18c0      	addlt	r0, r0, r3
 800698a:	4770      	bx	lr

0800698c <_read_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	2200      	movs	r2, #0
 8006996:	4d05      	ldr	r5, [pc, #20]	; (80069ac <_read_r+0x20>)
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fb f9cd 	bl	8001d3a <_read>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_read_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_read_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	200003bc 	.word	0x200003bc

080069b0 <floor>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80069b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80069bc:	2e13      	cmp	r6, #19
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4607      	mov	r7, r0
 80069c4:	460c      	mov	r4, r1
 80069c6:	4605      	mov	r5, r0
 80069c8:	dc34      	bgt.n	8006a34 <floor+0x84>
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	da15      	bge.n	80069fa <floor+0x4a>
 80069ce:	a334      	add	r3, pc, #208	; (adr r3, 8006aa0 <floor+0xf0>)
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f7f9 fbca 	bl	800016c <__adddf3>
 80069d8:	2200      	movs	r2, #0
 80069da:	2300      	movs	r3, #0
 80069dc:	f7fa f80c 	bl	80009f8 <__aeabi_dcmpgt>
 80069e0:	b140      	cbz	r0, 80069f4 <floor+0x44>
 80069e2:	2c00      	cmp	r4, #0
 80069e4:	da59      	bge.n	8006a9a <floor+0xea>
 80069e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80069ea:	ea57 0503 	orrs.w	r5, r7, r3
 80069ee:	d001      	beq.n	80069f4 <floor+0x44>
 80069f0:	2500      	movs	r5, #0
 80069f2:	4c2d      	ldr	r4, [pc, #180]	; (8006aa8 <floor+0xf8>)
 80069f4:	4623      	mov	r3, r4
 80069f6:	462f      	mov	r7, r5
 80069f8:	e025      	b.n	8006a46 <floor+0x96>
 80069fa:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <floor+0xfc>)
 80069fc:	fa42 f806 	asr.w	r8, r2, r6
 8006a00:	ea01 0208 	and.w	r2, r1, r8
 8006a04:	4302      	orrs	r2, r0
 8006a06:	d01e      	beq.n	8006a46 <floor+0x96>
 8006a08:	a325      	add	r3, pc, #148	; (adr r3, 8006aa0 <floor+0xf0>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fbad 	bl	800016c <__adddf3>
 8006a12:	2200      	movs	r2, #0
 8006a14:	2300      	movs	r3, #0
 8006a16:	f7f9 ffef 	bl	80009f8 <__aeabi_dcmpgt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d0ea      	beq.n	80069f4 <floor+0x44>
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	bfbe      	ittt	lt
 8006a22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006a26:	fa43 f606 	asrlt.w	r6, r3, r6
 8006a2a:	19a4      	addlt	r4, r4, r6
 8006a2c:	2500      	movs	r5, #0
 8006a2e:	ea24 0408 	bic.w	r4, r4, r8
 8006a32:	e7df      	b.n	80069f4 <floor+0x44>
 8006a34:	2e33      	cmp	r6, #51	; 0x33
 8006a36:	dd0a      	ble.n	8006a4e <floor+0x9e>
 8006a38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006a3c:	d103      	bne.n	8006a46 <floor+0x96>
 8006a3e:	f7f9 fb95 	bl	800016c <__adddf3>
 8006a42:	4607      	mov	r7, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4638      	mov	r0, r7
 8006a48:	4619      	mov	r1, r3
 8006a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a52:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006a56:	fa22 f808 	lsr.w	r8, r2, r8
 8006a5a:	ea18 0f00 	tst.w	r8, r0
 8006a5e:	d0f2      	beq.n	8006a46 <floor+0x96>
 8006a60:	a30f      	add	r3, pc, #60	; (adr r3, 8006aa0 <floor+0xf0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fb81 	bl	800016c <__adddf3>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f7f9 ffc3 	bl	80009f8 <__aeabi_dcmpgt>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d0be      	beq.n	80069f4 <floor+0x44>
 8006a76:	2c00      	cmp	r4, #0
 8006a78:	da02      	bge.n	8006a80 <floor+0xd0>
 8006a7a:	2e14      	cmp	r6, #20
 8006a7c:	d103      	bne.n	8006a86 <floor+0xd6>
 8006a7e:	3401      	adds	r4, #1
 8006a80:	ea25 0508 	bic.w	r5, r5, r8
 8006a84:	e7b6      	b.n	80069f4 <floor+0x44>
 8006a86:	2301      	movs	r3, #1
 8006a88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006a8c:	fa03 f606 	lsl.w	r6, r3, r6
 8006a90:	4435      	add	r5, r6
 8006a92:	42bd      	cmp	r5, r7
 8006a94:	bf38      	it	cc
 8006a96:	18e4      	addcc	r4, r4, r3
 8006a98:	e7f2      	b.n	8006a80 <floor+0xd0>
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	462c      	mov	r4, r5
 8006a9e:	e7a9      	b.n	80069f4 <floor+0x44>
 8006aa0:	8800759c 	.word	0x8800759c
 8006aa4:	7e37e43c 	.word	0x7e37e43c
 8006aa8:	bff00000 	.word	0xbff00000
 8006aac:	000fffff 	.word	0x000fffff

08006ab0 <pow>:
 8006ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	461f      	mov	r7, r3
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	4689      	mov	r9, r1
 8006aba:	4616      	mov	r6, r2
 8006abc:	f000 f8a4 	bl	8006c08 <__ieee754_pow>
 8006ac0:	4b4d      	ldr	r3, [pc, #308]	; (8006bf8 <pow+0x148>)
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	f993 3000 	ldrsb.w	r3, [r3]
 8006ac8:	460d      	mov	r5, r1
 8006aca:	3301      	adds	r3, #1
 8006acc:	d015      	beq.n	8006afa <pow+0x4a>
 8006ace:	4632      	mov	r2, r6
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7f9 ff99 	bl	8000a0c <__aeabi_dcmpun>
 8006ada:	b970      	cbnz	r0, 8006afa <pow+0x4a>
 8006adc:	4642      	mov	r2, r8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	f7f9 ff92 	bl	8000a0c <__aeabi_dcmpun>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2300      	movs	r3, #0
 8006aec:	b148      	cbz	r0, 8006b02 <pow+0x52>
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	f7f9 ff59 	bl	80009a8 <__aeabi_dcmpeq>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d17b      	bne.n	8006bf2 <pow+0x142>
 8006afa:	4620      	mov	r0, r4
 8006afc:	4629      	mov	r1, r5
 8006afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	f7f9 ff4f 	bl	80009a8 <__aeabi_dcmpeq>
 8006b0a:	b1e0      	cbz	r0, 8006b46 <pow+0x96>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4630      	mov	r0, r6
 8006b12:	4639      	mov	r1, r7
 8006b14:	f7f9 ff48 	bl	80009a8 <__aeabi_dcmpeq>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d16a      	bne.n	8006bf2 <pow+0x142>
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f000 fe37 	bl	8007792 <finite>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d0e8      	beq.n	8006afa <pow+0x4a>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	4639      	mov	r1, r7
 8006b30:	f7f9 ff44 	bl	80009bc <__aeabi_dcmplt>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d0e0      	beq.n	8006afa <pow+0x4a>
 8006b38:	f7fc fe62 	bl	8003800 <__errno>
 8006b3c:	2321      	movs	r3, #33	; 0x21
 8006b3e:	2400      	movs	r4, #0
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	4d2e      	ldr	r5, [pc, #184]	; (8006bfc <pow+0x14c>)
 8006b44:	e7d9      	b.n	8006afa <pow+0x4a>
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f000 fe22 	bl	8007792 <finite>
 8006b4e:	bba8      	cbnz	r0, 8006bbc <pow+0x10c>
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f000 fe1d 	bl	8007792 <finite>
 8006b58:	b380      	cbz	r0, 8006bbc <pow+0x10c>
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	f000 fe18 	bl	8007792 <finite>
 8006b62:	b358      	cbz	r0, 8006bbc <pow+0x10c>
 8006b64:	4622      	mov	r2, r4
 8006b66:	462b      	mov	r3, r5
 8006b68:	4620      	mov	r0, r4
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	f7f9 ff4e 	bl	8000a0c <__aeabi_dcmpun>
 8006b70:	b160      	cbz	r0, 8006b8c <pow+0xdc>
 8006b72:	f7fc fe45 	bl	8003800 <__errno>
 8006b76:	2321      	movs	r3, #33	; 0x21
 8006b78:	2200      	movs	r2, #0
 8006b7a:	6003      	str	r3, [r0, #0]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4610      	mov	r0, r2
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7f9 fdd3 	bl	800072c <__aeabi_ddiv>
 8006b86:	4604      	mov	r4, r0
 8006b88:	460d      	mov	r5, r1
 8006b8a:	e7b6      	b.n	8006afa <pow+0x4a>
 8006b8c:	f7fc fe38 	bl	8003800 <__errno>
 8006b90:	2322      	movs	r3, #34	; 0x22
 8006b92:	2200      	movs	r2, #0
 8006b94:	6003      	str	r3, [r0, #0]
 8006b96:	4649      	mov	r1, r9
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	f7f9 ff0e 	bl	80009bc <__aeabi_dcmplt>
 8006ba0:	2400      	movs	r4, #0
 8006ba2:	b148      	cbz	r0, 8006bb8 <pow+0x108>
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	f000 fdfa 	bl	80077a0 <rint>
 8006bac:	4632      	mov	r2, r6
 8006bae:	463b      	mov	r3, r7
 8006bb0:	f7f9 fefa 	bl	80009a8 <__aeabi_dcmpeq>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d0c4      	beq.n	8006b42 <pow+0x92>
 8006bb8:	4d11      	ldr	r5, [pc, #68]	; (8006c00 <pow+0x150>)
 8006bba:	e79e      	b.n	8006afa <pow+0x4a>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7f9 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d096      	beq.n	8006afa <pow+0x4a>
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4649      	mov	r1, r9
 8006bd0:	f000 fddf 	bl	8007792 <finite>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d090      	beq.n	8006afa <pow+0x4a>
 8006bd8:	4630      	mov	r0, r6
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f000 fdd9 	bl	8007792 <finite>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d08a      	beq.n	8006afa <pow+0x4a>
 8006be4:	f7fc fe0c 	bl	8003800 <__errno>
 8006be8:	2322      	movs	r3, #34	; 0x22
 8006bea:	2400      	movs	r4, #0
 8006bec:	2500      	movs	r5, #0
 8006bee:	6003      	str	r3, [r0, #0]
 8006bf0:	e783      	b.n	8006afa <pow+0x4a>
 8006bf2:	2400      	movs	r4, #0
 8006bf4:	4d03      	ldr	r5, [pc, #12]	; (8006c04 <pow+0x154>)
 8006bf6:	e780      	b.n	8006afa <pow+0x4a>
 8006bf8:	200001e4 	.word	0x200001e4
 8006bfc:	fff00000 	.word	0xfff00000
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	3ff00000 	.word	0x3ff00000

08006c08 <__ieee754_pow>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	b093      	sub	sp, #76	; 0x4c
 8006c0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c12:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8006c16:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006c1a:	ea55 0302 	orrs.w	r3, r5, r2
 8006c1e:	4607      	mov	r7, r0
 8006c20:	4688      	mov	r8, r1
 8006c22:	f000 84bf 	beq.w	80075a4 <__ieee754_pow+0x99c>
 8006c26:	4b7e      	ldr	r3, [pc, #504]	; (8006e20 <__ieee754_pow+0x218>)
 8006c28:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	4689      	mov	r9, r1
 8006c30:	4682      	mov	sl, r0
 8006c32:	dc09      	bgt.n	8006c48 <__ieee754_pow+0x40>
 8006c34:	d103      	bne.n	8006c3e <__ieee754_pow+0x36>
 8006c36:	b978      	cbnz	r0, 8006c58 <__ieee754_pow+0x50>
 8006c38:	42a5      	cmp	r5, r4
 8006c3a:	dd02      	ble.n	8006c42 <__ieee754_pow+0x3a>
 8006c3c:	e00c      	b.n	8006c58 <__ieee754_pow+0x50>
 8006c3e:	429d      	cmp	r5, r3
 8006c40:	dc02      	bgt.n	8006c48 <__ieee754_pow+0x40>
 8006c42:	429d      	cmp	r5, r3
 8006c44:	d10e      	bne.n	8006c64 <__ieee754_pow+0x5c>
 8006c46:	b16a      	cbz	r2, 8006c64 <__ieee754_pow+0x5c>
 8006c48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006c4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006c50:	ea54 030a 	orrs.w	r3, r4, sl
 8006c54:	f000 84a6 	beq.w	80075a4 <__ieee754_pow+0x99c>
 8006c58:	4872      	ldr	r0, [pc, #456]	; (8006e24 <__ieee754_pow+0x21c>)
 8006c5a:	b013      	add	sp, #76	; 0x4c
 8006c5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	f7ff ba54 	b.w	800610c <nan>
 8006c64:	f1b9 0f00 	cmp.w	r9, #0
 8006c68:	da39      	bge.n	8006cde <__ieee754_pow+0xd6>
 8006c6a:	4b6f      	ldr	r3, [pc, #444]	; (8006e28 <__ieee754_pow+0x220>)
 8006c6c:	429d      	cmp	r5, r3
 8006c6e:	dc54      	bgt.n	8006d1a <__ieee754_pow+0x112>
 8006c70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006c74:	429d      	cmp	r5, r3
 8006c76:	f340 84a6 	ble.w	80075c6 <__ieee754_pow+0x9be>
 8006c7a:	152b      	asrs	r3, r5, #20
 8006c7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c80:	2b14      	cmp	r3, #20
 8006c82:	dd0f      	ble.n	8006ca4 <__ieee754_pow+0x9c>
 8006c84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006c88:	fa22 f103 	lsr.w	r1, r2, r3
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	4293      	cmp	r3, r2
 8006c92:	f040 8498 	bne.w	80075c6 <__ieee754_pow+0x9be>
 8006c96:	f001 0101 	and.w	r1, r1, #1
 8006c9a:	f1c1 0302 	rsb	r3, r1, #2
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	b182      	cbz	r2, 8006cc4 <__ieee754_pow+0xbc>
 8006ca2:	e05e      	b.n	8006d62 <__ieee754_pow+0x15a>
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	d15a      	bne.n	8006d5e <__ieee754_pow+0x156>
 8006ca8:	f1c3 0314 	rsb	r3, r3, #20
 8006cac:	fa45 f103 	asr.w	r1, r5, r3
 8006cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb4:	42ab      	cmp	r3, r5
 8006cb6:	f040 8483 	bne.w	80075c0 <__ieee754_pow+0x9b8>
 8006cba:	f001 0101 	and.w	r1, r1, #1
 8006cbe:	f1c1 0302 	rsb	r3, r1, #2
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	4b59      	ldr	r3, [pc, #356]	; (8006e2c <__ieee754_pow+0x224>)
 8006cc6:	429d      	cmp	r5, r3
 8006cc8:	d130      	bne.n	8006d2c <__ieee754_pow+0x124>
 8006cca:	2e00      	cmp	r6, #0
 8006ccc:	f280 8474 	bge.w	80075b8 <__ieee754_pow+0x9b0>
 8006cd0:	463a      	mov	r2, r7
 8006cd2:	4643      	mov	r3, r8
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4955      	ldr	r1, [pc, #340]	; (8006e2c <__ieee754_pow+0x224>)
 8006cd8:	f7f9 fd28 	bl	800072c <__aeabi_ddiv>
 8006cdc:	e02f      	b.n	8006d3e <__ieee754_pow+0x136>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	2a00      	cmp	r2, #0
 8006ce4:	d13d      	bne.n	8006d62 <__ieee754_pow+0x15a>
 8006ce6:	4b4e      	ldr	r3, [pc, #312]	; (8006e20 <__ieee754_pow+0x218>)
 8006ce8:	429d      	cmp	r5, r3
 8006cea:	d1eb      	bne.n	8006cc4 <__ieee754_pow+0xbc>
 8006cec:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006cf0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006cf4:	ea53 030a 	orrs.w	r3, r3, sl
 8006cf8:	f000 8454 	beq.w	80075a4 <__ieee754_pow+0x99c>
 8006cfc:	4b4c      	ldr	r3, [pc, #304]	; (8006e30 <__ieee754_pow+0x228>)
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	dd0d      	ble.n	8006d1e <__ieee754_pow+0x116>
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	f280 8454 	bge.w	80075b0 <__ieee754_pow+0x9a8>
 8006d08:	f04f 0b00 	mov.w	fp, #0
 8006d0c:	f04f 0c00 	mov.w	ip, #0
 8006d10:	4658      	mov	r0, fp
 8006d12:	4661      	mov	r1, ip
 8006d14:	b013      	add	sp, #76	; 0x4c
 8006d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e7e0      	b.n	8006ce0 <__ieee754_pow+0xd8>
 8006d1e:	2e00      	cmp	r6, #0
 8006d20:	daf2      	bge.n	8006d08 <__ieee754_pow+0x100>
 8006d22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006d26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006d2a:	e7f1      	b.n	8006d10 <__ieee754_pow+0x108>
 8006d2c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006d30:	d108      	bne.n	8006d44 <__ieee754_pow+0x13c>
 8006d32:	463a      	mov	r2, r7
 8006d34:	4643      	mov	r3, r8
 8006d36:	4638      	mov	r0, r7
 8006d38:	4641      	mov	r1, r8
 8006d3a:	f7f9 fbcd 	bl	80004d8 <__aeabi_dmul>
 8006d3e:	4683      	mov	fp, r0
 8006d40:	468c      	mov	ip, r1
 8006d42:	e7e5      	b.n	8006d10 <__ieee754_pow+0x108>
 8006d44:	4b3b      	ldr	r3, [pc, #236]	; (8006e34 <__ieee754_pow+0x22c>)
 8006d46:	429e      	cmp	r6, r3
 8006d48:	d10b      	bne.n	8006d62 <__ieee754_pow+0x15a>
 8006d4a:	f1b9 0f00 	cmp.w	r9, #0
 8006d4e:	db08      	blt.n	8006d62 <__ieee754_pow+0x15a>
 8006d50:	4638      	mov	r0, r7
 8006d52:	4641      	mov	r1, r8
 8006d54:	b013      	add	sp, #76	; 0x4c
 8006d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5a:	f000 bc6b 	b.w	8007634 <__ieee754_sqrt>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4638      	mov	r0, r7
 8006d64:	4641      	mov	r1, r8
 8006d66:	f000 fd11 	bl	800778c <fabs>
 8006d6a:	4683      	mov	fp, r0
 8006d6c:	468c      	mov	ip, r1
 8006d6e:	f1ba 0f00 	cmp.w	sl, #0
 8006d72:	d129      	bne.n	8006dc8 <__ieee754_pow+0x1c0>
 8006d74:	b124      	cbz	r4, 8006d80 <__ieee754_pow+0x178>
 8006d76:	4b2d      	ldr	r3, [pc, #180]	; (8006e2c <__ieee754_pow+0x224>)
 8006d78:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d123      	bne.n	8006dc8 <__ieee754_pow+0x1c0>
 8006d80:	2e00      	cmp	r6, #0
 8006d82:	da07      	bge.n	8006d94 <__ieee754_pow+0x18c>
 8006d84:	465a      	mov	r2, fp
 8006d86:	4663      	mov	r3, ip
 8006d88:	2000      	movs	r0, #0
 8006d8a:	4928      	ldr	r1, [pc, #160]	; (8006e2c <__ieee754_pow+0x224>)
 8006d8c:	f7f9 fcce 	bl	800072c <__aeabi_ddiv>
 8006d90:	4683      	mov	fp, r0
 8006d92:	468c      	mov	ip, r1
 8006d94:	f1b9 0f00 	cmp.w	r9, #0
 8006d98:	daba      	bge.n	8006d10 <__ieee754_pow+0x108>
 8006d9a:	9b00      	ldr	r3, [sp, #0]
 8006d9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006da0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006da4:	4323      	orrs	r3, r4
 8006da6:	d108      	bne.n	8006dba <__ieee754_pow+0x1b2>
 8006da8:	465a      	mov	r2, fp
 8006daa:	4663      	mov	r3, ip
 8006dac:	4658      	mov	r0, fp
 8006dae:	4661      	mov	r1, ip
 8006db0:	f7f9 f9da 	bl	8000168 <__aeabi_dsub>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	e78e      	b.n	8006cd8 <__ieee754_pow+0xd0>
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d1a7      	bne.n	8006d10 <__ieee754_pow+0x108>
 8006dc0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006dc4:	469c      	mov	ip, r3
 8006dc6:	e7a3      	b.n	8006d10 <__ieee754_pow+0x108>
 8006dc8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	930c      	str	r3, [sp, #48]	; 0x30
 8006dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dd2:	9b00      	ldr	r3, [sp, #0]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	d104      	bne.n	8006de2 <__ieee754_pow+0x1da>
 8006dd8:	463a      	mov	r2, r7
 8006dda:	4643      	mov	r3, r8
 8006ddc:	4638      	mov	r0, r7
 8006dde:	4641      	mov	r1, r8
 8006de0:	e7e6      	b.n	8006db0 <__ieee754_pow+0x1a8>
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <__ieee754_pow+0x230>)
 8006de4:	429d      	cmp	r5, r3
 8006de6:	f340 80f9 	ble.w	8006fdc <__ieee754_pow+0x3d4>
 8006dea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006dee:	429d      	cmp	r5, r3
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <__ieee754_pow+0x228>)
 8006df2:	dd09      	ble.n	8006e08 <__ieee754_pow+0x200>
 8006df4:	429c      	cmp	r4, r3
 8006df6:	dc0c      	bgt.n	8006e12 <__ieee754_pow+0x20a>
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	da85      	bge.n	8006d08 <__ieee754_pow+0x100>
 8006dfc:	a306      	add	r3, pc, #24	; (adr r3, 8006e18 <__ieee754_pow+0x210>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	e798      	b.n	8006d3a <__ieee754_pow+0x132>
 8006e08:	429c      	cmp	r4, r3
 8006e0a:	dbf5      	blt.n	8006df8 <__ieee754_pow+0x1f0>
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <__ieee754_pow+0x224>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	dd14      	ble.n	8006e3c <__ieee754_pow+0x234>
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	dcf2      	bgt.n	8006dfc <__ieee754_pow+0x1f4>
 8006e16:	e777      	b.n	8006d08 <__ieee754_pow+0x100>
 8006e18:	8800759c 	.word	0x8800759c
 8006e1c:	7e37e43c 	.word	0x7e37e43c
 8006e20:	7ff00000 	.word	0x7ff00000
 8006e24:	08007d13 	.word	0x08007d13
 8006e28:	433fffff 	.word	0x433fffff
 8006e2c:	3ff00000 	.word	0x3ff00000
 8006e30:	3fefffff 	.word	0x3fefffff
 8006e34:	3fe00000 	.word	0x3fe00000
 8006e38:	41e00000 	.word	0x41e00000
 8006e3c:	4661      	mov	r1, ip
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4658      	mov	r0, fp
 8006e42:	4b61      	ldr	r3, [pc, #388]	; (8006fc8 <__ieee754_pow+0x3c0>)
 8006e44:	f7f9 f990 	bl	8000168 <__aeabi_dsub>
 8006e48:	a355      	add	r3, pc, #340	; (adr r3, 8006fa0 <__ieee754_pow+0x398>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	4604      	mov	r4, r0
 8006e50:	460d      	mov	r5, r1
 8006e52:	f7f9 fb41 	bl	80004d8 <__aeabi_dmul>
 8006e56:	a354      	add	r3, pc, #336	; (adr r3, 8006fa8 <__ieee754_pow+0x3a0>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	460f      	mov	r7, r1
 8006e60:	4620      	mov	r0, r4
 8006e62:	4629      	mov	r1, r5
 8006e64:	f7f9 fb38 	bl	80004d8 <__aeabi_dmul>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4682      	mov	sl, r0
 8006e6c:	468b      	mov	fp, r1
 8006e6e:	4620      	mov	r0, r4
 8006e70:	4629      	mov	r1, r5
 8006e72:	4b56      	ldr	r3, [pc, #344]	; (8006fcc <__ieee754_pow+0x3c4>)
 8006e74:	f7f9 fb30 	bl	80004d8 <__aeabi_dmul>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	a14c      	add	r1, pc, #304	; (adr r1, 8006fb0 <__ieee754_pow+0x3a8>)
 8006e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e82:	f7f9 f971 	bl	8000168 <__aeabi_dsub>
 8006e86:	4622      	mov	r2, r4
 8006e88:	462b      	mov	r3, r5
 8006e8a:	f7f9 fb25 	bl	80004d8 <__aeabi_dmul>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	2000      	movs	r0, #0
 8006e94:	494e      	ldr	r1, [pc, #312]	; (8006fd0 <__ieee754_pow+0x3c8>)
 8006e96:	f7f9 f967 	bl	8000168 <__aeabi_dsub>
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	4689      	mov	r9, r1
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	f7f9 fb17 	bl	80004d8 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4640      	mov	r0, r8
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	f7f9 fb11 	bl	80004d8 <__aeabi_dmul>
 8006eb6:	a340      	add	r3, pc, #256	; (adr r3, 8006fb8 <__ieee754_pow+0x3b0>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7f9 fb0c 	bl	80004d8 <__aeabi_dmul>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	4659      	mov	r1, fp
 8006ec8:	f7f9 f94e 	bl	8000168 <__aeabi_dsub>
 8006ecc:	f04f 0a00 	mov.w	sl, #0
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	4630      	mov	r0, r6
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 f946 	bl	800016c <__adddf3>
 8006ee0:	4632      	mov	r2, r6
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	468b      	mov	fp, r1
 8006ee8:	f7f9 f93e 	bl	8000168 <__aeabi_dsub>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7f9 f938 	bl	8000168 <__aeabi_dsub>
 8006ef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006efc:	9b00      	ldr	r3, [sp, #0]
 8006efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f00:	3b01      	subs	r3, #1
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f04f 0600 	mov.w	r6, #0
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	bf0c      	ite	eq
 8006f0e:	4b31      	ldreq	r3, [pc, #196]	; (8006fd4 <__ieee754_pow+0x3cc>)
 8006f10:	4b2d      	ldrne	r3, [pc, #180]	; (8006fc8 <__ieee754_pow+0x3c0>)
 8006f12:	4604      	mov	r4, r0
 8006f14:	460d      	mov	r5, r1
 8006f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f1a:	e9cd 2300 	strd	r2, r3, [sp]
 8006f1e:	4632      	mov	r2, r6
 8006f20:	463b      	mov	r3, r7
 8006f22:	f7f9 f921 	bl	8000168 <__aeabi_dsub>
 8006f26:	4652      	mov	r2, sl
 8006f28:	465b      	mov	r3, fp
 8006f2a:	f7f9 fad5 	bl	80004d8 <__aeabi_dmul>
 8006f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f32:	4680      	mov	r8, r0
 8006f34:	4689      	mov	r9, r1
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7f9 facd 	bl	80004d8 <__aeabi_dmul>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 f911 	bl	800016c <__adddf3>
 8006f4a:	4632      	mov	r2, r6
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	4680      	mov	r8, r0
 8006f50:	4689      	mov	r9, r1
 8006f52:	4650      	mov	r0, sl
 8006f54:	4659      	mov	r1, fp
 8006f56:	f7f9 fabf 	bl	80004d8 <__aeabi_dmul>
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	460d      	mov	r5, r1
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4602      	mov	r2, r0
 8006f62:	4649      	mov	r1, r9
 8006f64:	4640      	mov	r0, r8
 8006f66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006f6a:	f7f9 f8ff 	bl	800016c <__adddf3>
 8006f6e:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <__ieee754_pow+0x3d0>)
 8006f70:	4682      	mov	sl, r0
 8006f72:	4299      	cmp	r1, r3
 8006f74:	460f      	mov	r7, r1
 8006f76:	460e      	mov	r6, r1
 8006f78:	f340 82ed 	ble.w	8007556 <__ieee754_pow+0x94e>
 8006f7c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006f80:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006f84:	4303      	orrs	r3, r0
 8006f86:	f000 81e7 	beq.w	8007358 <__ieee754_pow+0x750>
 8006f8a:	a30d      	add	r3, pc, #52	; (adr r3, 8006fc0 <__ieee754_pow+0x3b8>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f94:	f7f9 faa0 	bl	80004d8 <__aeabi_dmul>
 8006f98:	a309      	add	r3, pc, #36	; (adr r3, 8006fc0 <__ieee754_pow+0x3b8>)
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	e6cc      	b.n	8006d3a <__ieee754_pow+0x132>
 8006fa0:	60000000 	.word	0x60000000
 8006fa4:	3ff71547 	.word	0x3ff71547
 8006fa8:	f85ddf44 	.word	0xf85ddf44
 8006fac:	3e54ae0b 	.word	0x3e54ae0b
 8006fb0:	55555555 	.word	0x55555555
 8006fb4:	3fd55555 	.word	0x3fd55555
 8006fb8:	652b82fe 	.word	0x652b82fe
 8006fbc:	3ff71547 	.word	0x3ff71547
 8006fc0:	8800759c 	.word	0x8800759c
 8006fc4:	7e37e43c 	.word	0x7e37e43c
 8006fc8:	3ff00000 	.word	0x3ff00000
 8006fcc:	3fd00000 	.word	0x3fd00000
 8006fd0:	3fe00000 	.word	0x3fe00000
 8006fd4:	bff00000 	.word	0xbff00000
 8006fd8:	408fffff 	.word	0x408fffff
 8006fdc:	4bd4      	ldr	r3, [pc, #848]	; (8007330 <__ieee754_pow+0x728>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	ea09 0303 	and.w	r3, r9, r3
 8006fe4:	b943      	cbnz	r3, 8006ff8 <__ieee754_pow+0x3f0>
 8006fe6:	4658      	mov	r0, fp
 8006fe8:	4661      	mov	r1, ip
 8006fea:	4bd2      	ldr	r3, [pc, #840]	; (8007334 <__ieee754_pow+0x72c>)
 8006fec:	f7f9 fa74 	bl	80004d8 <__aeabi_dmul>
 8006ff0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006ff4:	4683      	mov	fp, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	1523      	asrs	r3, r4, #20
 8006ffa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ffe:	4413      	add	r3, r2
 8007000:	930b      	str	r3, [sp, #44]	; 0x2c
 8007002:	4bcd      	ldr	r3, [pc, #820]	; (8007338 <__ieee754_pow+0x730>)
 8007004:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007008:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800700c:	429c      	cmp	r4, r3
 800700e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007012:	dd08      	ble.n	8007026 <__ieee754_pow+0x41e>
 8007014:	4bc9      	ldr	r3, [pc, #804]	; (800733c <__ieee754_pow+0x734>)
 8007016:	429c      	cmp	r4, r3
 8007018:	f340 819c 	ble.w	8007354 <__ieee754_pow+0x74c>
 800701c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800701e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007022:	3301      	adds	r3, #1
 8007024:	930b      	str	r3, [sp, #44]	; 0x2c
 8007026:	2600      	movs	r6, #0
 8007028:	00f3      	lsls	r3, r6, #3
 800702a:	930d      	str	r3, [sp, #52]	; 0x34
 800702c:	4bc4      	ldr	r3, [pc, #784]	; (8007340 <__ieee754_pow+0x738>)
 800702e:	4658      	mov	r0, fp
 8007030:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007034:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007038:	4629      	mov	r1, r5
 800703a:	461a      	mov	r2, r3
 800703c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007040:	4623      	mov	r3, r4
 8007042:	f7f9 f891 	bl	8000168 <__aeabi_dsub>
 8007046:	46da      	mov	sl, fp
 8007048:	462b      	mov	r3, r5
 800704a:	4652      	mov	r2, sl
 800704c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007050:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007054:	f7f9 f88a 	bl	800016c <__adddf3>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	2000      	movs	r0, #0
 800705e:	49b9      	ldr	r1, [pc, #740]	; (8007344 <__ieee754_pow+0x73c>)
 8007060:	f7f9 fb64 	bl	800072c <__aeabi_ddiv>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800706c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007070:	f7f9 fa32 	bl	80004d8 <__aeabi_dmul>
 8007074:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007078:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800707c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007080:	2300      	movs	r3, #0
 8007082:	2200      	movs	r2, #0
 8007084:	46ab      	mov	fp, r5
 8007086:	106d      	asrs	r5, r5, #1
 8007088:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007092:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007096:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800709a:	4640      	mov	r0, r8
 800709c:	4649      	mov	r1, r9
 800709e:	4614      	mov	r4, r2
 80070a0:	461d      	mov	r5, r3
 80070a2:	f7f9 fa19 	bl	80004d8 <__aeabi_dmul>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80070ae:	f7f9 f85b 	bl	8000168 <__aeabi_dsub>
 80070b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070b6:	4606      	mov	r6, r0
 80070b8:	460f      	mov	r7, r1
 80070ba:	4620      	mov	r0, r4
 80070bc:	4629      	mov	r1, r5
 80070be:	f7f9 f853 	bl	8000168 <__aeabi_dsub>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4650      	mov	r0, sl
 80070c8:	4659      	mov	r1, fp
 80070ca:	f7f9 f84d 	bl	8000168 <__aeabi_dsub>
 80070ce:	4642      	mov	r2, r8
 80070d0:	464b      	mov	r3, r9
 80070d2:	f7f9 fa01 	bl	80004d8 <__aeabi_dmul>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4630      	mov	r0, r6
 80070dc:	4639      	mov	r1, r7
 80070de:	f7f9 f843 	bl	8000168 <__aeabi_dsub>
 80070e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070e6:	f7f9 f9f7 	bl	80004d8 <__aeabi_dmul>
 80070ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070f2:	4610      	mov	r0, r2
 80070f4:	4619      	mov	r1, r3
 80070f6:	f7f9 f9ef 	bl	80004d8 <__aeabi_dmul>
 80070fa:	a37b      	add	r3, pc, #492	; (adr r3, 80072e8 <__ieee754_pow+0x6e0>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	f7f9 f9e8 	bl	80004d8 <__aeabi_dmul>
 8007108:	a379      	add	r3, pc, #484	; (adr r3, 80072f0 <__ieee754_pow+0x6e8>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 f82d 	bl	800016c <__adddf3>
 8007112:	4622      	mov	r2, r4
 8007114:	462b      	mov	r3, r5
 8007116:	f7f9 f9df 	bl	80004d8 <__aeabi_dmul>
 800711a:	a377      	add	r3, pc, #476	; (adr r3, 80072f8 <__ieee754_pow+0x6f0>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 f824 	bl	800016c <__adddf3>
 8007124:	4622      	mov	r2, r4
 8007126:	462b      	mov	r3, r5
 8007128:	f7f9 f9d6 	bl	80004d8 <__aeabi_dmul>
 800712c:	a374      	add	r3, pc, #464	; (adr r3, 8007300 <__ieee754_pow+0x6f8>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f81b 	bl	800016c <__adddf3>
 8007136:	4622      	mov	r2, r4
 8007138:	462b      	mov	r3, r5
 800713a:	f7f9 f9cd 	bl	80004d8 <__aeabi_dmul>
 800713e:	a372      	add	r3, pc, #456	; (adr r3, 8007308 <__ieee754_pow+0x700>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f7f9 f812 	bl	800016c <__adddf3>
 8007148:	4622      	mov	r2, r4
 800714a:	462b      	mov	r3, r5
 800714c:	f7f9 f9c4 	bl	80004d8 <__aeabi_dmul>
 8007150:	a36f      	add	r3, pc, #444	; (adr r3, 8007310 <__ieee754_pow+0x708>)
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f7f9 f809 	bl	800016c <__adddf3>
 800715a:	4622      	mov	r2, r4
 800715c:	4606      	mov	r6, r0
 800715e:	460f      	mov	r7, r1
 8007160:	462b      	mov	r3, r5
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	f7f9 f9b7 	bl	80004d8 <__aeabi_dmul>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 f9b1 	bl	80004d8 <__aeabi_dmul>
 8007176:	4604      	mov	r4, r0
 8007178:	460d      	mov	r5, r1
 800717a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	f7f8 fff3 	bl	800016c <__adddf3>
 8007186:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800718a:	f7f9 f9a5 	bl	80004d8 <__aeabi_dmul>
 800718e:	4622      	mov	r2, r4
 8007190:	462b      	mov	r3, r5
 8007192:	f7f8 ffeb 	bl	800016c <__adddf3>
 8007196:	4642      	mov	r2, r8
 8007198:	4606      	mov	r6, r0
 800719a:	460f      	mov	r7, r1
 800719c:	464b      	mov	r3, r9
 800719e:	4640      	mov	r0, r8
 80071a0:	4649      	mov	r1, r9
 80071a2:	f7f9 f999 	bl	80004d8 <__aeabi_dmul>
 80071a6:	2200      	movs	r2, #0
 80071a8:	4b67      	ldr	r3, [pc, #412]	; (8007348 <__ieee754_pow+0x740>)
 80071aa:	4682      	mov	sl, r0
 80071ac:	468b      	mov	fp, r1
 80071ae:	f7f8 ffdd 	bl	800016c <__adddf3>
 80071b2:	4632      	mov	r2, r6
 80071b4:	463b      	mov	r3, r7
 80071b6:	f7f8 ffd9 	bl	800016c <__adddf3>
 80071ba:	9c04      	ldr	r4, [sp, #16]
 80071bc:	460d      	mov	r5, r1
 80071be:	4622      	mov	r2, r4
 80071c0:	460b      	mov	r3, r1
 80071c2:	4640      	mov	r0, r8
 80071c4:	4649      	mov	r1, r9
 80071c6:	f7f9 f987 	bl	80004d8 <__aeabi_dmul>
 80071ca:	2200      	movs	r2, #0
 80071cc:	4680      	mov	r8, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	4620      	mov	r0, r4
 80071d2:	4629      	mov	r1, r5
 80071d4:	4b5c      	ldr	r3, [pc, #368]	; (8007348 <__ieee754_pow+0x740>)
 80071d6:	f7f8 ffc7 	bl	8000168 <__aeabi_dsub>
 80071da:	4652      	mov	r2, sl
 80071dc:	465b      	mov	r3, fp
 80071de:	f7f8 ffc3 	bl	8000168 <__aeabi_dsub>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4630      	mov	r0, r6
 80071e8:	4639      	mov	r1, r7
 80071ea:	f7f8 ffbd 	bl	8000168 <__aeabi_dsub>
 80071ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071f2:	f7f9 f971 	bl	80004d8 <__aeabi_dmul>
 80071f6:	4622      	mov	r2, r4
 80071f8:	4606      	mov	r6, r0
 80071fa:	460f      	mov	r7, r1
 80071fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007200:	462b      	mov	r3, r5
 8007202:	f7f9 f969 	bl	80004d8 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f8 ffad 	bl	800016c <__adddf3>
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4640      	mov	r0, r8
 800721c:	4649      	mov	r1, r9
 800721e:	f7f8 ffa5 	bl	800016c <__adddf3>
 8007222:	a33d      	add	r3, pc, #244	; (adr r3, 8007318 <__ieee754_pow+0x710>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	9c04      	ldr	r4, [sp, #16]
 800722a:	460d      	mov	r5, r1
 800722c:	4620      	mov	r0, r4
 800722e:	f7f9 f953 	bl	80004d8 <__aeabi_dmul>
 8007232:	4642      	mov	r2, r8
 8007234:	464b      	mov	r3, r9
 8007236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	f7f8 ff93 	bl	8000168 <__aeabi_dsub>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4630      	mov	r0, r6
 8007248:	4639      	mov	r1, r7
 800724a:	f7f8 ff8d 	bl	8000168 <__aeabi_dsub>
 800724e:	a334      	add	r3, pc, #208	; (adr r3, 8007320 <__ieee754_pow+0x718>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 f940 	bl	80004d8 <__aeabi_dmul>
 8007258:	a333      	add	r3, pc, #204	; (adr r3, 8007328 <__ieee754_pow+0x720>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	4620      	mov	r0, r4
 8007264:	4629      	mov	r1, r5
 8007266:	f7f9 f937 	bl	80004d8 <__aeabi_dmul>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4630      	mov	r0, r6
 8007270:	4639      	mov	r1, r7
 8007272:	f7f8 ff7b 	bl	800016c <__adddf3>
 8007276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007278:	4b34      	ldr	r3, [pc, #208]	; (800734c <__ieee754_pow+0x744>)
 800727a:	4413      	add	r3, r2
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f7f8 ff74 	bl	800016c <__adddf3>
 8007284:	4680      	mov	r8, r0
 8007286:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007288:	4689      	mov	r9, r1
 800728a:	f7f9 f8bb 	bl	8000404 <__aeabi_i2d>
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007294:	4b2e      	ldr	r3, [pc, #184]	; (8007350 <__ieee754_pow+0x748>)
 8007296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800729a:	4413      	add	r3, r2
 800729c:	e9d3 6700 	ldrd	r6, r7, [r3]
 80072a0:	4642      	mov	r2, r8
 80072a2:	464b      	mov	r3, r9
 80072a4:	f7f8 ff62 	bl	800016c <__adddf3>
 80072a8:	4632      	mov	r2, r6
 80072aa:	463b      	mov	r3, r7
 80072ac:	f7f8 ff5e 	bl	800016c <__adddf3>
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	f7f8 ff5a 	bl	800016c <__adddf3>
 80072b8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80072bc:	4622      	mov	r2, r4
 80072be:	462b      	mov	r3, r5
 80072c0:	4650      	mov	r0, sl
 80072c2:	468b      	mov	fp, r1
 80072c4:	f7f8 ff50 	bl	8000168 <__aeabi_dsub>
 80072c8:	4632      	mov	r2, r6
 80072ca:	463b      	mov	r3, r7
 80072cc:	f7f8 ff4c 	bl	8000168 <__aeabi_dsub>
 80072d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072d4:	f7f8 ff48 	bl	8000168 <__aeabi_dsub>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4640      	mov	r0, r8
 80072de:	4649      	mov	r1, r9
 80072e0:	e608      	b.n	8006ef4 <__ieee754_pow+0x2ec>
 80072e2:	bf00      	nop
 80072e4:	f3af 8000 	nop.w
 80072e8:	4a454eef 	.word	0x4a454eef
 80072ec:	3fca7e28 	.word	0x3fca7e28
 80072f0:	93c9db65 	.word	0x93c9db65
 80072f4:	3fcd864a 	.word	0x3fcd864a
 80072f8:	a91d4101 	.word	0xa91d4101
 80072fc:	3fd17460 	.word	0x3fd17460
 8007300:	518f264d 	.word	0x518f264d
 8007304:	3fd55555 	.word	0x3fd55555
 8007308:	db6fabff 	.word	0xdb6fabff
 800730c:	3fdb6db6 	.word	0x3fdb6db6
 8007310:	33333303 	.word	0x33333303
 8007314:	3fe33333 	.word	0x3fe33333
 8007318:	e0000000 	.word	0xe0000000
 800731c:	3feec709 	.word	0x3feec709
 8007320:	dc3a03fd 	.word	0xdc3a03fd
 8007324:	3feec709 	.word	0x3feec709
 8007328:	145b01f5 	.word	0x145b01f5
 800732c:	be3e2fe0 	.word	0xbe3e2fe0
 8007330:	7ff00000 	.word	0x7ff00000
 8007334:	43400000 	.word	0x43400000
 8007338:	0003988e 	.word	0x0003988e
 800733c:	000bb679 	.word	0x000bb679
 8007340:	08008098 	.word	0x08008098
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	40080000 	.word	0x40080000
 800734c:	080080b8 	.word	0x080080b8
 8007350:	080080a8 	.word	0x080080a8
 8007354:	2601      	movs	r6, #1
 8007356:	e667      	b.n	8007028 <__ieee754_pow+0x420>
 8007358:	a39d      	add	r3, pc, #628	; (adr r3, 80075d0 <__ieee754_pow+0x9c8>)
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	4640      	mov	r0, r8
 8007360:	4649      	mov	r1, r9
 8007362:	f7f8 ff03 	bl	800016c <__adddf3>
 8007366:	4622      	mov	r2, r4
 8007368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800736c:	462b      	mov	r3, r5
 800736e:	4650      	mov	r0, sl
 8007370:	4639      	mov	r1, r7
 8007372:	f7f8 fef9 	bl	8000168 <__aeabi_dsub>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800737e:	f7f9 fb3b 	bl	80009f8 <__aeabi_dcmpgt>
 8007382:	2800      	cmp	r0, #0
 8007384:	f47f ae01 	bne.w	8006f8a <__ieee754_pow+0x382>
 8007388:	4aa5      	ldr	r2, [pc, #660]	; (8007620 <__ieee754_pow+0xa18>)
 800738a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800738e:	4293      	cmp	r3, r2
 8007390:	f340 8103 	ble.w	800759a <__ieee754_pow+0x992>
 8007394:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007398:	2000      	movs	r0, #0
 800739a:	151b      	asrs	r3, r3, #20
 800739c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80073a0:	fa4a f303 	asr.w	r3, sl, r3
 80073a4:	4433      	add	r3, r6
 80073a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80073aa:	4f9e      	ldr	r7, [pc, #632]	; (8007624 <__ieee754_pow+0xa1c>)
 80073ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80073b0:	4117      	asrs	r7, r2
 80073b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80073b6:	ea23 0107 	bic.w	r1, r3, r7
 80073ba:	f1c2 0214 	rsb	r2, r2, #20
 80073be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80073c2:	460b      	mov	r3, r1
 80073c4:	fa4a fa02 	asr.w	sl, sl, r2
 80073c8:	2e00      	cmp	r6, #0
 80073ca:	4602      	mov	r2, r0
 80073cc:	4629      	mov	r1, r5
 80073ce:	4620      	mov	r0, r4
 80073d0:	bfb8      	it	lt
 80073d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80073d6:	f7f8 fec7 	bl	8000168 <__aeabi_dsub>
 80073da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e2:	2400      	movs	r4, #0
 80073e4:	4642      	mov	r2, r8
 80073e6:	464b      	mov	r3, r9
 80073e8:	f7f8 fec0 	bl	800016c <__adddf3>
 80073ec:	a37a      	add	r3, pc, #488	; (adr r3, 80075d8 <__ieee754_pow+0x9d0>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	4620      	mov	r0, r4
 80073f4:	460d      	mov	r5, r1
 80073f6:	f7f9 f86f 	bl	80004d8 <__aeabi_dmul>
 80073fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073fe:	4606      	mov	r6, r0
 8007400:	460f      	mov	r7, r1
 8007402:	4620      	mov	r0, r4
 8007404:	4629      	mov	r1, r5
 8007406:	f7f8 feaf 	bl	8000168 <__aeabi_dsub>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4640      	mov	r0, r8
 8007410:	4649      	mov	r1, r9
 8007412:	f7f8 fea9 	bl	8000168 <__aeabi_dsub>
 8007416:	a372      	add	r3, pc, #456	; (adr r3, 80075e0 <__ieee754_pow+0x9d8>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f7f9 f85c 	bl	80004d8 <__aeabi_dmul>
 8007420:	a371      	add	r3, pc, #452	; (adr r3, 80075e8 <__ieee754_pow+0x9e0>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	4680      	mov	r8, r0
 8007428:	4689      	mov	r9, r1
 800742a:	4620      	mov	r0, r4
 800742c:	4629      	mov	r1, r5
 800742e:	f7f9 f853 	bl	80004d8 <__aeabi_dmul>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f8 fe97 	bl	800016c <__adddf3>
 800743e:	4604      	mov	r4, r0
 8007440:	460d      	mov	r5, r1
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4630      	mov	r0, r6
 8007448:	4639      	mov	r1, r7
 800744a:	f7f8 fe8f 	bl	800016c <__adddf3>
 800744e:	4632      	mov	r2, r6
 8007450:	463b      	mov	r3, r7
 8007452:	4680      	mov	r8, r0
 8007454:	4689      	mov	r9, r1
 8007456:	f7f8 fe87 	bl	8000168 <__aeabi_dsub>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f8 fe81 	bl	8000168 <__aeabi_dsub>
 8007466:	4642      	mov	r2, r8
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	464b      	mov	r3, r9
 800746e:	4640      	mov	r0, r8
 8007470:	4649      	mov	r1, r9
 8007472:	f7f9 f831 	bl	80004d8 <__aeabi_dmul>
 8007476:	a35e      	add	r3, pc, #376	; (adr r3, 80075f0 <__ieee754_pow+0x9e8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	4604      	mov	r4, r0
 800747e:	460d      	mov	r5, r1
 8007480:	f7f9 f82a 	bl	80004d8 <__aeabi_dmul>
 8007484:	a35c      	add	r3, pc, #368	; (adr r3, 80075f8 <__ieee754_pow+0x9f0>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f7f8 fe6d 	bl	8000168 <__aeabi_dsub>
 800748e:	4622      	mov	r2, r4
 8007490:	462b      	mov	r3, r5
 8007492:	f7f9 f821 	bl	80004d8 <__aeabi_dmul>
 8007496:	a35a      	add	r3, pc, #360	; (adr r3, 8007600 <__ieee754_pow+0x9f8>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f7f8 fe66 	bl	800016c <__adddf3>
 80074a0:	4622      	mov	r2, r4
 80074a2:	462b      	mov	r3, r5
 80074a4:	f7f9 f818 	bl	80004d8 <__aeabi_dmul>
 80074a8:	a357      	add	r3, pc, #348	; (adr r3, 8007608 <__ieee754_pow+0xa00>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f7f8 fe5b 	bl	8000168 <__aeabi_dsub>
 80074b2:	4622      	mov	r2, r4
 80074b4:	462b      	mov	r3, r5
 80074b6:	f7f9 f80f 	bl	80004d8 <__aeabi_dmul>
 80074ba:	a355      	add	r3, pc, #340	; (adr r3, 8007610 <__ieee754_pow+0xa08>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f8 fe54 	bl	800016c <__adddf3>
 80074c4:	4622      	mov	r2, r4
 80074c6:	462b      	mov	r3, r5
 80074c8:	f7f9 f806 	bl	80004d8 <__aeabi_dmul>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4640      	mov	r0, r8
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f8 fe48 	bl	8000168 <__aeabi_dsub>
 80074d8:	4604      	mov	r4, r0
 80074da:	460d      	mov	r5, r1
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7f8 fff8 	bl	80004d8 <__aeabi_dmul>
 80074e8:	2200      	movs	r2, #0
 80074ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f8 fe37 	bl	8000168 <__aeabi_dsub>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007502:	f7f9 f913 	bl	800072c <__aeabi_ddiv>
 8007506:	4632      	mov	r2, r6
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	463b      	mov	r3, r7
 800750e:	4640      	mov	r0, r8
 8007510:	4649      	mov	r1, r9
 8007512:	f7f8 ffe1 	bl	80004d8 <__aeabi_dmul>
 8007516:	4632      	mov	r2, r6
 8007518:	463b      	mov	r3, r7
 800751a:	f7f8 fe27 	bl	800016c <__adddf3>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f8 fe1f 	bl	8000168 <__aeabi_dsub>
 800752a:	4642      	mov	r2, r8
 800752c:	464b      	mov	r3, r9
 800752e:	f7f8 fe1b 	bl	8000168 <__aeabi_dsub>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	2000      	movs	r0, #0
 8007538:	493b      	ldr	r1, [pc, #236]	; (8007628 <__ieee754_pow+0xa20>)
 800753a:	f7f8 fe15 	bl	8000168 <__aeabi_dsub>
 800753e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007542:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007546:	da2b      	bge.n	80075a0 <__ieee754_pow+0x998>
 8007548:	4652      	mov	r2, sl
 800754a:	f000 f9b5 	bl	80078b8 <scalbn>
 800754e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007552:	f7ff bbf2 	b.w	8006d3a <__ieee754_pow+0x132>
 8007556:	4b35      	ldr	r3, [pc, #212]	; (800762c <__ieee754_pow+0xa24>)
 8007558:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800755c:	429f      	cmp	r7, r3
 800755e:	f77f af13 	ble.w	8007388 <__ieee754_pow+0x780>
 8007562:	4b33      	ldr	r3, [pc, #204]	; (8007630 <__ieee754_pow+0xa28>)
 8007564:	440b      	add	r3, r1
 8007566:	4303      	orrs	r3, r0
 8007568:	d00b      	beq.n	8007582 <__ieee754_pow+0x97a>
 800756a:	a32b      	add	r3, pc, #172	; (adr r3, 8007618 <__ieee754_pow+0xa10>)
 800756c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007574:	f7f8 ffb0 	bl	80004d8 <__aeabi_dmul>
 8007578:	a327      	add	r3, pc, #156	; (adr r3, 8007618 <__ieee754_pow+0xa10>)
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f7ff bbdc 	b.w	8006d3a <__ieee754_pow+0x132>
 8007582:	4622      	mov	r2, r4
 8007584:	462b      	mov	r3, r5
 8007586:	f7f8 fdef 	bl	8000168 <__aeabi_dsub>
 800758a:	4642      	mov	r2, r8
 800758c:	464b      	mov	r3, r9
 800758e:	f7f9 fa29 	bl	80009e4 <__aeabi_dcmpge>
 8007592:	2800      	cmp	r0, #0
 8007594:	f43f aef8 	beq.w	8007388 <__ieee754_pow+0x780>
 8007598:	e7e7      	b.n	800756a <__ieee754_pow+0x962>
 800759a:	f04f 0a00 	mov.w	sl, #0
 800759e:	e71e      	b.n	80073de <__ieee754_pow+0x7d6>
 80075a0:	4621      	mov	r1, r4
 80075a2:	e7d4      	b.n	800754e <__ieee754_pow+0x946>
 80075a4:	f04f 0b00 	mov.w	fp, #0
 80075a8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007628 <__ieee754_pow+0xa20>
 80075ac:	f7ff bbb0 	b.w	8006d10 <__ieee754_pow+0x108>
 80075b0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80075b4:	f7ff bbac 	b.w	8006d10 <__ieee754_pow+0x108>
 80075b8:	4638      	mov	r0, r7
 80075ba:	4641      	mov	r1, r8
 80075bc:	f7ff bbbf 	b.w	8006d3e <__ieee754_pow+0x136>
 80075c0:	9200      	str	r2, [sp, #0]
 80075c2:	f7ff bb7f 	b.w	8006cc4 <__ieee754_pow+0xbc>
 80075c6:	2300      	movs	r3, #0
 80075c8:	f7ff bb69 	b.w	8006c9e <__ieee754_pow+0x96>
 80075cc:	f3af 8000 	nop.w
 80075d0:	652b82fe 	.word	0x652b82fe
 80075d4:	3c971547 	.word	0x3c971547
 80075d8:	00000000 	.word	0x00000000
 80075dc:	3fe62e43 	.word	0x3fe62e43
 80075e0:	fefa39ef 	.word	0xfefa39ef
 80075e4:	3fe62e42 	.word	0x3fe62e42
 80075e8:	0ca86c39 	.word	0x0ca86c39
 80075ec:	be205c61 	.word	0xbe205c61
 80075f0:	72bea4d0 	.word	0x72bea4d0
 80075f4:	3e663769 	.word	0x3e663769
 80075f8:	c5d26bf1 	.word	0xc5d26bf1
 80075fc:	3ebbbd41 	.word	0x3ebbbd41
 8007600:	af25de2c 	.word	0xaf25de2c
 8007604:	3f11566a 	.word	0x3f11566a
 8007608:	16bebd93 	.word	0x16bebd93
 800760c:	3f66c16c 	.word	0x3f66c16c
 8007610:	5555553e 	.word	0x5555553e
 8007614:	3fc55555 	.word	0x3fc55555
 8007618:	c2f8f359 	.word	0xc2f8f359
 800761c:	01a56e1f 	.word	0x01a56e1f
 8007620:	3fe00000 	.word	0x3fe00000
 8007624:	000fffff 	.word	0x000fffff
 8007628:	3ff00000 	.word	0x3ff00000
 800762c:	4090cbff 	.word	0x4090cbff
 8007630:	3f6f3400 	.word	0x3f6f3400

08007634 <__ieee754_sqrt>:
 8007634:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007788 <__ieee754_sqrt+0x154>
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007640:	460b      	mov	r3, r1
 8007642:	4606      	mov	r6, r0
 8007644:	460d      	mov	r5, r1
 8007646:	460a      	mov	r2, r1
 8007648:	4607      	mov	r7, r0
 800764a:	4604      	mov	r4, r0
 800764c:	d10e      	bne.n	800766c <__ieee754_sqrt+0x38>
 800764e:	4602      	mov	r2, r0
 8007650:	f7f8 ff42 	bl	80004d8 <__aeabi_dmul>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4630      	mov	r0, r6
 800765a:	4629      	mov	r1, r5
 800765c:	f7f8 fd86 	bl	800016c <__adddf3>
 8007660:	4606      	mov	r6, r0
 8007662:	460d      	mov	r5, r1
 8007664:	4630      	mov	r0, r6
 8007666:	4629      	mov	r1, r5
 8007668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800766c:	2900      	cmp	r1, #0
 800766e:	dc0d      	bgt.n	800768c <__ieee754_sqrt+0x58>
 8007670:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007674:	ea5c 0707 	orrs.w	r7, ip, r7
 8007678:	d0f4      	beq.n	8007664 <__ieee754_sqrt+0x30>
 800767a:	b139      	cbz	r1, 800768c <__ieee754_sqrt+0x58>
 800767c:	4602      	mov	r2, r0
 800767e:	f7f8 fd73 	bl	8000168 <__aeabi_dsub>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	f7f9 f851 	bl	800072c <__aeabi_ddiv>
 800768a:	e7e9      	b.n	8007660 <__ieee754_sqrt+0x2c>
 800768c:	1512      	asrs	r2, r2, #20
 800768e:	d074      	beq.n	800777a <__ieee754_sqrt+0x146>
 8007690:	2000      	movs	r0, #0
 8007692:	07d5      	lsls	r5, r2, #31
 8007694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007698:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800769c:	bf5e      	ittt	pl
 800769e:	0fe3      	lsrpl	r3, r4, #31
 80076a0:	0064      	lslpl	r4, r4, #1
 80076a2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80076a6:	0fe3      	lsrs	r3, r4, #31
 80076a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80076ac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80076b0:	2516      	movs	r5, #22
 80076b2:	4601      	mov	r1, r0
 80076b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80076b8:	1076      	asrs	r6, r6, #1
 80076ba:	0064      	lsls	r4, r4, #1
 80076bc:	188f      	adds	r7, r1, r2
 80076be:	429f      	cmp	r7, r3
 80076c0:	bfde      	ittt	le
 80076c2:	1bdb      	suble	r3, r3, r7
 80076c4:	18b9      	addle	r1, r7, r2
 80076c6:	1880      	addle	r0, r0, r2
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	3d01      	subs	r5, #1
 80076cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80076d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80076d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80076d8:	d1f0      	bne.n	80076bc <__ieee754_sqrt+0x88>
 80076da:	462a      	mov	r2, r5
 80076dc:	f04f 0e20 	mov.w	lr, #32
 80076e0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80076e4:	428b      	cmp	r3, r1
 80076e6:	eb07 0c05 	add.w	ip, r7, r5
 80076ea:	dc02      	bgt.n	80076f2 <__ieee754_sqrt+0xbe>
 80076ec:	d113      	bne.n	8007716 <__ieee754_sqrt+0xe2>
 80076ee:	45a4      	cmp	ip, r4
 80076f0:	d811      	bhi.n	8007716 <__ieee754_sqrt+0xe2>
 80076f2:	f1bc 0f00 	cmp.w	ip, #0
 80076f6:	eb0c 0507 	add.w	r5, ip, r7
 80076fa:	da43      	bge.n	8007784 <__ieee754_sqrt+0x150>
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	db41      	blt.n	8007784 <__ieee754_sqrt+0x150>
 8007700:	f101 0801 	add.w	r8, r1, #1
 8007704:	1a5b      	subs	r3, r3, r1
 8007706:	4641      	mov	r1, r8
 8007708:	45a4      	cmp	ip, r4
 800770a:	bf88      	it	hi
 800770c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007710:	eba4 040c 	sub.w	r4, r4, ip
 8007714:	443a      	add	r2, r7
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	f1be 0e01 	subs.w	lr, lr, #1
 800771c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007720:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007724:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007728:	d1dc      	bne.n	80076e4 <__ieee754_sqrt+0xb0>
 800772a:	4323      	orrs	r3, r4
 800772c:	d006      	beq.n	800773c <__ieee754_sqrt+0x108>
 800772e:	1c54      	adds	r4, r2, #1
 8007730:	bf0b      	itete	eq
 8007732:	4672      	moveq	r2, lr
 8007734:	3201      	addne	r2, #1
 8007736:	3001      	addeq	r0, #1
 8007738:	f022 0201 	bicne.w	r2, r2, #1
 800773c:	1043      	asrs	r3, r0, #1
 800773e:	07c1      	lsls	r1, r0, #31
 8007740:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007744:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007748:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800774c:	bf48      	it	mi
 800774e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007752:	4610      	mov	r0, r2
 8007754:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007758:	e782      	b.n	8007660 <__ieee754_sqrt+0x2c>
 800775a:	0ae3      	lsrs	r3, r4, #11
 800775c:	3915      	subs	r1, #21
 800775e:	0564      	lsls	r4, r4, #21
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0fa      	beq.n	800775a <__ieee754_sqrt+0x126>
 8007764:	02de      	lsls	r6, r3, #11
 8007766:	d50a      	bpl.n	800777e <__ieee754_sqrt+0x14a>
 8007768:	f1c2 0020 	rsb	r0, r2, #32
 800776c:	fa24 f000 	lsr.w	r0, r4, r0
 8007770:	1e55      	subs	r5, r2, #1
 8007772:	4094      	lsls	r4, r2
 8007774:	4303      	orrs	r3, r0
 8007776:	1b4a      	subs	r2, r1, r5
 8007778:	e78a      	b.n	8007690 <__ieee754_sqrt+0x5c>
 800777a:	4611      	mov	r1, r2
 800777c:	e7f0      	b.n	8007760 <__ieee754_sqrt+0x12c>
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	3201      	adds	r2, #1
 8007782:	e7ef      	b.n	8007764 <__ieee754_sqrt+0x130>
 8007784:	4688      	mov	r8, r1
 8007786:	e7bd      	b.n	8007704 <__ieee754_sqrt+0xd0>
 8007788:	7ff00000 	.word	0x7ff00000

0800778c <fabs>:
 800778c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007790:	4770      	bx	lr

08007792 <finite>:
 8007792:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8007796:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800779a:	0fc0      	lsrs	r0, r0, #31
 800779c:	4770      	bx	lr
	...

080077a0 <rint>:
 80077a0:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80077a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077a6:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80077aa:	2f13      	cmp	r7, #19
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	460c      	mov	r4, r1
 80077b2:	4605      	mov	r5, r0
 80077b4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80077b8:	dc59      	bgt.n	800786e <rint+0xce>
 80077ba:	2f00      	cmp	r7, #0
 80077bc:	da2a      	bge.n	8007814 <rint+0x74>
 80077be:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80077c2:	4301      	orrs	r1, r0
 80077c4:	d022      	beq.n	800780c <rint+0x6c>
 80077c6:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80077ca:	4301      	orrs	r1, r0
 80077cc:	424d      	negs	r5, r1
 80077ce:	430d      	orrs	r5, r1
 80077d0:	4936      	ldr	r1, [pc, #216]	; (80078ac <rint+0x10c>)
 80077d2:	0c5c      	lsrs	r4, r3, #17
 80077d4:	0b2d      	lsrs	r5, r5, #12
 80077d6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80077da:	0464      	lsls	r4, r4, #17
 80077dc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80077e0:	ea45 0304 	orr.w	r3, r5, r4
 80077e4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80077e8:	4620      	mov	r0, r4
 80077ea:	4629      	mov	r1, r5
 80077ec:	f7f8 fcbe 	bl	800016c <__adddf3>
 80077f0:	e9cd 0100 	strd	r0, r1, [sp]
 80077f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077f8:	462b      	mov	r3, r5
 80077fa:	4622      	mov	r2, r4
 80077fc:	f7f8 fcb4 	bl	8000168 <__aeabi_dsub>
 8007800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007804:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4610      	mov	r0, r2
 800780e:	4619      	mov	r1, r3
 8007810:	b003      	add	sp, #12
 8007812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007814:	4926      	ldr	r1, [pc, #152]	; (80078b0 <rint+0x110>)
 8007816:	4139      	asrs	r1, r7
 8007818:	ea03 0001 	and.w	r0, r3, r1
 800781c:	4310      	orrs	r0, r2
 800781e:	d0f5      	beq.n	800780c <rint+0x6c>
 8007820:	084b      	lsrs	r3, r1, #1
 8007822:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8007826:	ea52 0501 	orrs.w	r5, r2, r1
 800782a:	d00c      	beq.n	8007846 <rint+0xa6>
 800782c:	ea24 0303 	bic.w	r3, r4, r3
 8007830:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8007834:	2f13      	cmp	r7, #19
 8007836:	bf0c      	ite	eq
 8007838:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800783c:	2500      	movne	r5, #0
 800783e:	fa44 f707 	asr.w	r7, r4, r7
 8007842:	ea43 0407 	orr.w	r4, r3, r7
 8007846:	4919      	ldr	r1, [pc, #100]	; (80078ac <rint+0x10c>)
 8007848:	4623      	mov	r3, r4
 800784a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800784e:	462a      	mov	r2, r5
 8007850:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007854:	4620      	mov	r0, r4
 8007856:	4629      	mov	r1, r5
 8007858:	f7f8 fc88 	bl	800016c <__adddf3>
 800785c:	e9cd 0100 	strd	r0, r1, [sp]
 8007860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007864:	4622      	mov	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	f7f8 fc7e 	bl	8000168 <__aeabi_dsub>
 800786c:	e7cc      	b.n	8007808 <rint+0x68>
 800786e:	2f33      	cmp	r7, #51	; 0x33
 8007870:	dd05      	ble.n	800787e <rint+0xde>
 8007872:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8007876:	d1c9      	bne.n	800780c <rint+0x6c>
 8007878:	f7f8 fc78 	bl	800016c <__adddf3>
 800787c:	e7c4      	b.n	8007808 <rint+0x68>
 800787e:	f04f 31ff 	mov.w	r1, #4294967295
 8007882:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8007886:	fa21 f10c 	lsr.w	r1, r1, ip
 800788a:	4208      	tst	r0, r1
 800788c:	d0be      	beq.n	800780c <rint+0x6c>
 800788e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8007892:	bf18      	it	ne
 8007894:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8007898:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800789c:	bf1e      	ittt	ne
 800789e:	ea20 0303 	bicne.w	r3, r0, r3
 80078a2:	fa45 fc0c 	asrne.w	ip, r5, ip
 80078a6:	ea43 050c 	orrne.w	r5, r3, ip
 80078aa:	e7cc      	b.n	8007846 <rint+0xa6>
 80078ac:	080080c8 	.word	0x080080c8
 80078b0:	000fffff 	.word	0x000fffff
 80078b4:	00000000 	.word	0x00000000

080078b8 <scalbn>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	4617      	mov	r7, r2
 80078c4:	460b      	mov	r3, r1
 80078c6:	b996      	cbnz	r6, 80078ee <scalbn+0x36>
 80078c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078cc:	4303      	orrs	r3, r0
 80078ce:	d039      	beq.n	8007944 <scalbn+0x8c>
 80078d0:	4b35      	ldr	r3, [pc, #212]	; (80079a8 <scalbn+0xf0>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	f7f8 fe00 	bl	80004d8 <__aeabi_dmul>
 80078d8:	4b34      	ldr	r3, [pc, #208]	; (80079ac <scalbn+0xf4>)
 80078da:	4604      	mov	r4, r0
 80078dc:	429f      	cmp	r7, r3
 80078de:	460d      	mov	r5, r1
 80078e0:	da0f      	bge.n	8007902 <scalbn+0x4a>
 80078e2:	a32d      	add	r3, pc, #180	; (adr r3, 8007998 <scalbn+0xe0>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	f7f8 fdf6 	bl	80004d8 <__aeabi_dmul>
 80078ec:	e006      	b.n	80078fc <scalbn+0x44>
 80078ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80078f2:	4296      	cmp	r6, r2
 80078f4:	d10a      	bne.n	800790c <scalbn+0x54>
 80078f6:	4602      	mov	r2, r0
 80078f8:	f7f8 fc38 	bl	800016c <__adddf3>
 80078fc:	4604      	mov	r4, r0
 80078fe:	460d      	mov	r5, r1
 8007900:	e020      	b.n	8007944 <scalbn+0x8c>
 8007902:	460b      	mov	r3, r1
 8007904:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007908:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800790c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007910:	19b9      	adds	r1, r7, r6
 8007912:	4291      	cmp	r1, r2
 8007914:	dd0e      	ble.n	8007934 <scalbn+0x7c>
 8007916:	a322      	add	r3, pc, #136	; (adr r3, 80079a0 <scalbn+0xe8>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007920:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007924:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007928:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800792c:	4820      	ldr	r0, [pc, #128]	; (80079b0 <scalbn+0xf8>)
 800792e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007932:	e7d9      	b.n	80078e8 <scalbn+0x30>
 8007934:	2900      	cmp	r1, #0
 8007936:	dd08      	ble.n	800794a <scalbn+0x92>
 8007938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800793c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007940:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800794e:	da16      	bge.n	800797e <scalbn+0xc6>
 8007950:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007954:	429f      	cmp	r7, r3
 8007956:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800795a:	dd08      	ble.n	800796e <scalbn+0xb6>
 800795c:	4c15      	ldr	r4, [pc, #84]	; (80079b4 <scalbn+0xfc>)
 800795e:	4814      	ldr	r0, [pc, #80]	; (80079b0 <scalbn+0xf8>)
 8007960:	f363 74df 	bfi	r4, r3, #31, #1
 8007964:	a30e      	add	r3, pc, #56	; (adr r3, 80079a0 <scalbn+0xe8>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	4621      	mov	r1, r4
 800796c:	e7bc      	b.n	80078e8 <scalbn+0x30>
 800796e:	4c12      	ldr	r4, [pc, #72]	; (80079b8 <scalbn+0x100>)
 8007970:	4812      	ldr	r0, [pc, #72]	; (80079bc <scalbn+0x104>)
 8007972:	f363 74df 	bfi	r4, r3, #31, #1
 8007976:	a308      	add	r3, pc, #32	; (adr r3, 8007998 <scalbn+0xe0>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	e7f5      	b.n	800796a <scalbn+0xb2>
 800797e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007982:	3136      	adds	r1, #54	; 0x36
 8007984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007988:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800798c:	4620      	mov	r0, r4
 800798e:	4629      	mov	r1, r5
 8007990:	2200      	movs	r2, #0
 8007992:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <scalbn+0x108>)
 8007994:	e7a8      	b.n	80078e8 <scalbn+0x30>
 8007996:	bf00      	nop
 8007998:	c2f8f359 	.word	0xc2f8f359
 800799c:	01a56e1f 	.word	0x01a56e1f
 80079a0:	8800759c 	.word	0x8800759c
 80079a4:	7e37e43c 	.word	0x7e37e43c
 80079a8:	43500000 	.word	0x43500000
 80079ac:	ffff3cb0 	.word	0xffff3cb0
 80079b0:	8800759c 	.word	0x8800759c
 80079b4:	7e37e43c 	.word	0x7e37e43c
 80079b8:	01a56e1f 	.word	0x01a56e1f
 80079bc:	c2f8f359 	.word	0xc2f8f359
 80079c0:	3c900000 	.word	0x3c900000

080079c4 <_init>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <_fini>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr
