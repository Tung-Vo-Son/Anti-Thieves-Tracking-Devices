
Anti_Thieves_Lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004914  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08004a28  08004a28  00014a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004e08  08004e08  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e08  08004e08  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000078  08004e88  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004e88  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e0f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e60  00000000  00000000  00029eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002c478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d7a  00000000  00000000  0002caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d00  00000000  00000000  00044872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083019  00000000  00000000  0004d572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d058b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f4  00000000  00000000  000d05e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a0c 	.word	0x08004a0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004a0c 	.word	0x08004a0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_f2iz>:
 8000cf4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cf8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cfc:	d30f      	bcc.n	8000d1e <__aeabi_f2iz+0x2a>
 8000cfe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d06:	d90d      	bls.n	8000d24 <__aeabi_f2iz+0x30>
 8000d08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d14:	fa23 f002 	lsr.w	r0, r3, r2
 8000d18:	bf18      	it	ne
 8000d1a:	4240      	negne	r0, r0
 8000d1c:	4770      	bx	lr
 8000d1e:	f04f 0000 	mov.w	r0, #0
 8000d22:	4770      	bx	lr
 8000d24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d28:	d101      	bne.n	8000d2e <__aeabi_f2iz+0x3a>
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	d105      	bne.n	8000d3a <__aeabi_f2iz+0x46>
 8000d2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d38:	4770      	bx	lr
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	4770      	bx	lr

08000d40 <reverse>:
 */

#include "Float_String_Convert.h"

void reverse(char* str, int len)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000d54:	e018      	b.n	8000d88 <reverse+0x48>
        temp = str[i];
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	441a      	add	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	440b      	add	r3, r1
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	701a      	strb	r2, [r3, #0]
        i++;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
        j--;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbe2      	blt.n	8000d56 <reverse+0x16>
    }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <int_to_string>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int int_to_string(int x, char str[], int d)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
    while (x) {
 8000dac:	e01d      	b.n	8000dea <int_to_string+0x4e>
        str[i++] = (x % 10) + '0';
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <int_to_string+0x8c>)
 8000db2:	fb83 1302 	smull	r1, r3, r3, r2
 8000db6:	1099      	asrs	r1, r3, #2
 8000db8:	17d3      	asrs	r3, r2, #31
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1ad1      	subs	r1, r2, r3
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	1c59      	adds	r1, r3, #1
 8000dcc:	6179      	str	r1, [r7, #20]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3230      	adds	r2, #48	; 0x30
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <int_to_string+0x8c>)
 8000dde:	fb82 1203 	smull	r1, r2, r2, r3
 8000de2:	1092      	asrs	r2, r2, #2
 8000de4:	17db      	asrs	r3, r3, #31
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	60fb      	str	r3, [r7, #12]
    while (x) {
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1de      	bne.n	8000dae <int_to_string+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8000df0:	e007      	b.n	8000e02 <int_to_string+0x66>
        str[i++] = '0';
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	617a      	str	r2, [r7, #20]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2230      	movs	r2, #48	; 0x30
 8000e00:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbf3      	blt.n	8000df2 <int_to_string+0x56>

    reverse(str, i);
 8000e0a:	6979      	ldr	r1, [r7, #20]
 8000e0c:	68b8      	ldr	r0, [r7, #8]
 8000e0e:	f7ff ff97 	bl	8000d40 <reverse>
    str[i] = '\0';
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
    return i;
 8000e1c:	697b      	ldr	r3, [r7, #20]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	66666667 	.word	0x66666667

08000e2c <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f7ff ff5b 	bl	8000cf4 <__aeabi_f2iz>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8000e42:	69f8      	ldr	r0, [r7, #28]
 8000e44:	f7ff ff02 	bl	8000c4c <__aeabi_i2f>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f7ff fe47 	bl	8000ae0 <__aeabi_fsub>
 8000e52:	4603      	mov	r3, r0
 8000e54:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = int_to_string(ipart, res, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	69f8      	ldr	r0, [r7, #28]
 8000e5c:	f7ff ff9e 	bl	8000d9c <int_to_string>
 8000e60:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d02c      	beq.n	8000ec2 <ftoa+0x96>
        res[i] = '.'; // add dot
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	222e      	movs	r2, #46	; 0x2e
 8000e70:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8000e72:	69b8      	ldr	r0, [r7, #24]
 8000e74:	f7ff fad8 	bl	8000428 <__aeabi_f2d>
 8000e78:	4604      	mov	r4, r0
 8000e7a:	460d      	mov	r5, r1
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fac1 	bl	8000404 <__aeabi_i2d>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	f04f 0000 	mov.w	r0, #0
 8000e8a:	4910      	ldr	r1, [pc, #64]	; (8000ecc <ftoa+0xa0>)
 8000e8c:	f002 fe32 	bl	8003af4 <pow>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4620      	mov	r0, r4
 8000e96:	4629      	mov	r1, r5
 8000e98:	f7ff fb1e 	bl	80004d8 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fdc8 	bl	8000a38 <__aeabi_d2f>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	61bb      	str	r3, [r7, #24]

        int_to_string((int)fpart, res + i + 1, afterpoint);
 8000eac:	69b8      	ldr	r0, [r7, #24]
 8000eae:	f7ff ff21 	bl	8000cf4 <__aeabi_f2iz>
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	4413      	add	r3, r2
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff ff6d 	bl	8000d9c <int_to_string>
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	3720      	adds	r7, #32
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40240000 	.word	0x40240000

08000ed0 <gps_callback>:
	gps.index = 0;
	HAL_UART_Receive_IT(&huart1, &gps.rx, 1);
}

void gps_callback()
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	if(gps.rx == '\n')
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <gps_callback+0x44>)
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	2b0a      	cmp	r3, #10
 8000eda:	d107      	bne.n	8000eec <gps_callback+0x1c>
	{
		gps.flag = true;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <gps_callback+0x44>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		gps.index = 0;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <gps_callback+0x44>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	715a      	strb	r2, [r3, #5]
 8000eea:	e00b      	b.n	8000f04 <gps_callback+0x34>
	}
	else gps.buffer[gps.index ++] = gps.rx;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <gps_callback+0x44>)
 8000eee:	795b      	ldrb	r3, [r3, #5]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	b2d1      	uxtb	r1, r2
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <gps_callback+0x44>)
 8000ef6:	7151      	strb	r1, [r2, #5]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <gps_callback+0x44>)
 8000efc:	791a      	ldrb	r2, [r3, #4]
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <gps_callback+0x44>)
 8000f00:	440b      	add	r3, r1
 8000f02:	719a      	strb	r2, [r3, #6]
	HAL_UART_Receive_IT(&huart1, &gps.rx, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	4904      	ldr	r1, [pc, #16]	; (8000f18 <gps_callback+0x48>)
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <gps_callback+0x4c>)
 8000f0a:	f001 fe13 	bl	8002b34 <HAL_UART_Receive_IT>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000a0 	.word	0x200000a0
 8000f18:	200000a4 	.word	0x200000a4
 8000f1c:	200001f8 	.word	0x200001f8

08000f20 <simcom_delete_buffer>:

Simcom_Struct simcom;
char json_test[100];

void simcom_delete_buffer(char* buffer)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	simcom.at_cmd.index = 0;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <simcom_delete_buffer+0x38>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	for(int i=0; i<SIMCOM_RESPONSE_MAX_SIZE;i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e007      	b.n	8000f46 <simcom_delete_buffer+0x26>
	{
		buffer[i] = 0;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<SIMCOM_RESPONSE_MAX_SIZE;i++)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b63      	cmp	r3, #99	; 0x63
 8000f4a:	ddf4      	ble.n	8000f36 <simcom_delete_buffer+0x16>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	200000ec 	.word	0x200000ec

08000f5c <simcom_at_command>:

uint8_t simcom_at_command(char* command, char* response, uint32_t timeout)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
	uint8_t status = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	77fb      	strb	r3, [r7, #31]
	uint8_t received_byte[1];
	simcom_delete_buffer((char*)simcom.at_cmd.response);
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <simcom_at_command+0x110>)
 8000f6e:	f7ff ffd7 	bl	8000f20 <simcom_delete_buffer>
	uint32_t time_out_transmit = HAL_GetTick();
 8000f72:	f000 fcf9 	bl	8001968 <HAL_GetTick>
 8000f76:	61b8      	str	r0, [r7, #24]
	uint32_t time_out_get_response = HAL_GetTick();
 8000f78:	f000 fcf6 	bl	8001968 <HAL_GetTick>
 8000f7c:	6178      	str	r0, [r7, #20]

	HAL_UART_Transmit(&huart3, (uint8_t*)command, strlen(command), 1000);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f7ff f8e6 	bl	8000150 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	4838      	ldr	r0, [pc, #224]	; (8001070 <simcom_at_command+0x114>)
 8000f90:	f001 fc9f 	bl	80028d2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", strlen("\r\n"), 1000);
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	2202      	movs	r2, #2
 8000f9a:	4936      	ldr	r1, [pc, #216]	; (8001074 <simcom_at_command+0x118>)
 8000f9c:	4834      	ldr	r0, [pc, #208]	; (8001070 <simcom_at_command+0x114>)
 8000f9e:	f001 fc98 	bl	80028d2 <HAL_UART_Transmit>

	while(status == 0)
 8000fa2:	e05b      	b.n	800105c <simcom_at_command+0x100>
	{
		while(HAL_UART_Receive(&huart3, received_byte, 1, 1000) != HAL_OK)
		{
			if(HAL_GetTick() - time_out_transmit > timeout)
 8000fa4:	f000 fce0 	bl	8001968 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d201      	bcs.n	8000fb8 <simcom_at_command+0x5c>
			{
				return 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e055      	b.n	8001064 <simcom_at_command+0x108>
		while(HAL_UART_Receive(&huart3, received_byte, 1, 1000) != HAL_OK)
 8000fb8:	f107 0110 	add.w	r1, r7, #16
 8000fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	482b      	ldr	r0, [pc, #172]	; (8001070 <simcom_at_command+0x114>)
 8000fc4:	f001 fd17 	bl	80029f6 <HAL_UART_Receive>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1ea      	bne.n	8000fa4 <simcom_at_command+0x48>
			}
		}
		time_out_transmit = HAL_GetTick();
 8000fce:	f000 fccb 	bl	8001968 <HAL_GetTick>
 8000fd2:	61b8      	str	r0, [r7, #24]
		simcom.at_cmd.response[simcom.at_cmd.index++] = received_byte[0];
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <simcom_at_command+0x110>)
 8000fd6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	b2d1      	uxtb	r1, r2
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <simcom_at_command+0x110>)
 8000fe0:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	7c39      	ldrb	r1, [r7, #16]
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <simcom_at_command+0x110>)
 8000fea:	5499      	strb	r1, [r3, r2]
		while(HAL_GetTick() - time_out_transmit < timeout)
 8000fec:	e02e      	b.n	800104c <simcom_at_command+0xf0>
		{
			if(HAL_UART_Receive(&huart3, received_byte, 1, 1000) == HAL_OK)
 8000fee:	f107 0110 	add.w	r1, r7, #16
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	481d      	ldr	r0, [pc, #116]	; (8001070 <simcom_at_command+0x114>)
 8000ffa:	f001 fcfc 	bl	80029f6 <HAL_UART_Receive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10f      	bne.n	8001024 <simcom_at_command+0xc8>
			{
				simcom.at_cmd.response[simcom.at_cmd.index++] = received_byte[0];
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <simcom_at_command+0x110>)
 8001006:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	b2d1      	uxtb	r1, r2
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <simcom_at_command+0x110>)
 8001010:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
 8001014:	461a      	mov	r2, r3
 8001016:	7c39      	ldrb	r1, [r7, #16]
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <simcom_at_command+0x110>)
 800101a:	5499      	strb	r1, [r3, r2]
				time_out_get_response = HAL_GetTick();
 800101c:	f000 fca4 	bl	8001968 <HAL_GetTick>
 8001020:	6178      	str	r0, [r7, #20]
 8001022:	e013      	b.n	800104c <simcom_at_command+0xf0>
			}
			else
			{
				if(HAL_GetTick() - time_out_get_response > 100)
 8001024:	f000 fca0 	bl	8001968 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d90c      	bls.n	800104c <simcom_at_command+0xf0>
				{
					if(strstr((char*)simcom.at_cmd.response,response) != NULL)
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <simcom_at_command+0x110>)
 8001036:	f002 f9db 	bl	80033f0 <strstr>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <simcom_at_command+0xea>
					{
						status = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	77fb      	strb	r3, [r7, #31]
 8001044:	e00a      	b.n	800105c <simcom_at_command+0x100>
					}
					else
					{
						status = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	77fb      	strb	r3, [r7, #31]
					}
					break;
 800104a:	e007      	b.n	800105c <simcom_at_command+0x100>
		while(HAL_GetTick() - time_out_transmit < timeout)
 800104c:	f000 fc8c 	bl	8001968 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8c8      	bhi.n	8000fee <simcom_at_command+0x92>
	while(status == 0)
 800105c:	7ffb      	ldrb	r3, [r7, #31]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0aa      	beq.n	8000fb8 <simcom_at_command+0x5c>
				}
			}
		}
	}
	return status;
 8001062:	7ffb      	ldrb	r3, [r7, #31]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000ec 	.word	0x200000ec
 8001070:	200001b8 	.word	0x200001b8
 8001074:	08004a28 	.word	0x08004a28

08001078 <simcom_init>:

void simcom_init()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	simcom_at_command("AT", "OK", 1000);
 800107c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <simcom_init+0x30>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <simcom_init+0x34>)
 8001084:	f7ff ff6a 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f000 fc77 	bl	800197c <HAL_Delay>
	simcom_at_command("ATE0", "OK", 1000);
 800108e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001092:	4905      	ldr	r1, [pc, #20]	; (80010a8 <simcom_init+0x30>)
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <simcom_init+0x38>)
 8001096:	f7ff ff61 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 800109a:	2064      	movs	r0, #100	; 0x64
 800109c:	f000 fc6e 	bl	800197c <HAL_Delay>
	simcom_gprs_init();
 80010a0:	f000 f88e 	bl	80011c0 <simcom_gprs_init>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	08004a2c 	.word	0x08004a2c
 80010ac:	08004a30 	.word	0x08004a30
 80010b0:	08004a34 	.word	0x08004a34

080010b4 <simcom_gprs_start>:


void simcom_gprs_start()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	simcom_at_command("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"", "OK", 3000);
 80010b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010bc:	4911      	ldr	r1, [pc, #68]	; (8001104 <simcom_gprs_start+0x50>)
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <simcom_gprs_start+0x54>)
 80010c0:	f7ff ff4c 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 80010c4:	2064      	movs	r0, #100	; 0x64
 80010c6:	f000 fc59 	bl	800197c <HAL_Delay>

	simcom_at_command("AT+SAPBR=3,1,\"APN\",\"v-internet\"", "OK", 3000);
 80010ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <simcom_gprs_start+0x50>)
 80010d0:	480e      	ldr	r0, [pc, #56]	; (800110c <simcom_gprs_start+0x58>)
 80010d2:	f7ff ff43 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f000 fc50 	bl	800197c <HAL_Delay>

	simcom_at_command("AT+SAPBR=1,1", "OK", 3000);
 80010dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010e0:	4908      	ldr	r1, [pc, #32]	; (8001104 <simcom_gprs_start+0x50>)
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <simcom_gprs_start+0x5c>)
 80010e4:	f7ff ff3a 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f000 fc47 	bl	800197c <HAL_Delay>

	simcom_at_command("AT+SAPBR=2,1", "+SAPBR:", 3000);
 80010ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <simcom_gprs_start+0x60>)
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <simcom_gprs_start+0x64>)
 80010f6:	f7ff ff31 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 80010fa:	2064      	movs	r0, #100	; 0x64
 80010fc:	f000 fc3e 	bl	800197c <HAL_Delay>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	08004a2c 	.word	0x08004a2c
 8001108:	08004a3c 	.word	0x08004a3c
 800110c:	08004a5c 	.word	0x08004a5c
 8001110:	08004a7c 	.word	0x08004a7c
 8001114:	08004a8c 	.word	0x08004a8c
 8001118:	08004a94 	.word	0x08004a94

0800111c <simcom_gprs_http_start>:

void simcom_gprs_http_start()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	simcom_at_command("AT+HTTPINIT", "OK", 3000);
 8001120:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001124:	4908      	ldr	r1, [pc, #32]	; (8001148 <simcom_gprs_http_start+0x2c>)
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <simcom_gprs_http_start+0x30>)
 8001128:	f7ff ff18 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 800112c:	2064      	movs	r0, #100	; 0x64
 800112e:	f000 fc25 	bl	800197c <HAL_Delay>

	simcom_at_command("AT+HTTPPARA=\"CID\",1", "OK", 3000);
 8001132:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001136:	4904      	ldr	r1, [pc, #16]	; (8001148 <simcom_gprs_http_start+0x2c>)
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <simcom_gprs_http_start+0x34>)
 800113a:	f7ff ff0f 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f000 fc1c 	bl	800197c <HAL_Delay>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	08004a2c 	.word	0x08004a2c
 800114c:	08004aa4 	.word	0x08004aa4
 8001150:	08004ab0 	.word	0x08004ab0

08001154 <simcom_gprs_http_set_ssl>:

void simcom_gprs_http_set_ssl()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	simcom_at_command("AT+HTTPSSL=1", "OK", 1000);
 8001158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800115c:	4904      	ldr	r1, [pc, #16]	; (8001170 <simcom_gprs_http_set_ssl+0x1c>)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <simcom_gprs_http_set_ssl+0x20>)
 8001160:	f7ff fefc 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	; 0x64
 8001166:	f000 fc09 	bl	800197c <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	08004a2c 	.word	0x08004a2c
 8001174:	08004ac4 	.word	0x08004ac4

08001178 <simcom_gprs_http_end>:

void simcom_gprs_http_end()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	simcom_at_command("AT+HTTPTERM", "OK", 3000);
 800117c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001180:	4904      	ldr	r1, [pc, #16]	; (8001194 <simcom_gprs_http_end+0x1c>)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <simcom_gprs_http_end+0x20>)
 8001184:	f7ff feea 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f000 fbf7 	bl	800197c <HAL_Delay>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	08004a2c 	.word	0x08004a2c
 8001198:	08004ad4 	.word	0x08004ad4

0800119c <simcom_gprs_end>:

void simcom_gprs_end()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	simcom_at_command("AT+SAPBR=0,1", "OK", 3000);
 80011a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <simcom_gprs_end+0x1c>)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <simcom_gprs_end+0x20>)
 80011a8:	f7ff fed8 	bl	8000f5c <simcom_at_command>
	HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	; 0x64
 80011ae:	f000 fbe5 	bl	800197c <HAL_Delay>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08004a2c 	.word	0x08004a2c
 80011bc:	08004ae0 	.word	0x08004ae0

080011c0 <simcom_gprs_init>:

void simcom_gprs_init()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	simcom_gprs_http_end();
 80011c4:	f7ff ffd8 	bl	8001178 <simcom_gprs_http_end>
	simcom_gprs_end();
 80011c8:	f7ff ffe8 	bl	800119c <simcom_gprs_end>
	simcom_gprs_start();
 80011cc:	f7ff ff72 	bl	80010b4 <simcom_gprs_start>
	simcom_gprs_http_start();
 80011d0:	f7ff ffa4 	bl	800111c <simcom_gprs_http_start>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <firebase_update>:
	}

}

void firebase_update(char* url, char* device_id, char* user_id, char* secret_key, float data1, float data2)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0cd      	sub	sp, #308	; 0x134
 80011dc:	af02      	add	r7, sp, #8
 80011de:	f107 040c 	add.w	r4, r7, #12
 80011e2:	6020      	str	r0, [r4, #0]
 80011e4:	f107 0008 	add.w	r0, r7, #8
 80011e8:	6001      	str	r1, [r0, #0]
 80011ea:	1d39      	adds	r1, r7, #4
 80011ec:	600a      	str	r2, [r1, #0]
 80011ee:	463a      	mov	r2, r7
 80011f0:	6013      	str	r3, [r2, #0]
	char firebase_init_command[100];
	sprintf(firebase_init_command, "AT+HTTPPARA=\"URL\",\"%s%s.json?x-http-method-override=PATCH\"", url, device_id);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	f107 020c 	add.w	r2, r7, #12
 80011fa:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	492e      	ldr	r1, [pc, #184]	; (80012bc <firebase_update+0xe4>)
 8001204:	f002 f8d4 	bl	80033b0 <siprintf>

	simcom_at_command(firebase_init_command, "OK", 1000);
 8001208:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800120c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001210:	492b      	ldr	r1, [pc, #172]	; (80012c0 <firebase_update+0xe8>)
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fea2 	bl	8000f5c <simcom_at_command>
	HAL_Delay(200);
 8001218:	20c8      	movs	r0, #200	; 0xc8
 800121a:	f000 fbaf 	bl	800197c <HAL_Delay>

	simcom_at_command("AT+HTTPPARA=\"CONTENT\",\"application/json\"", "OK", 1000);
 800121e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001222:	4927      	ldr	r1, [pc, #156]	; (80012c0 <firebase_update+0xe8>)
 8001224:	4827      	ldr	r0, [pc, #156]	; (80012c4 <firebase_update+0xec>)
 8001226:	f7ff fe99 	bl	8000f5c <simcom_at_command>
	HAL_Delay(200);
 800122a:	20c8      	movs	r0, #200	; 0xc8
 800122c:	f000 fba6 	bl	800197c <HAL_Delay>

	simcom_at_command("AT+HTTPDATA=200,10000", "DOWNLOAD", 1000);
 8001230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001234:	4924      	ldr	r1, [pc, #144]	; (80012c8 <firebase_update+0xf0>)
 8001236:	4825      	ldr	r0, [pc, #148]	; (80012cc <firebase_update+0xf4>)
 8001238:	f7ff fe90 	bl	8000f5c <simcom_at_command>
	HAL_Delay(500);
 800123c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001240:	f000 fb9c 	bl	800197c <HAL_Delay>

	char json[150];
	char lat[10], lng[10];
	ftoa(data1, lat, 4);
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2204      	movs	r2, #4
 800124a:	4619      	mov	r1, r3
 800124c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001250:	f7ff fdec 	bl	8000e2c <ftoa>
	ftoa(data2, lng, 4);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2204      	movs	r2, #4
 800125a:	4619      	mov	r1, r3
 800125c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8001260:	f7ff fde4 	bl	8000e2c <ftoa>
	sprintf(json, "{\"ID\":\"%s\",\"Location\":{\"latitude\":\"%s\",\"longitude\":\"%s\"},\"User\":\"%s\"}", user_id, lat, lng, secret_key);
 8001264:	f107 0120 	add.w	r1, r7, #32
 8001268:	1d3a      	adds	r2, r7, #4
 800126a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800126e:	463b      	mov	r3, r7
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	460b      	mov	r3, r1
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	4914      	ldr	r1, [pc, #80]	; (80012d0 <firebase_update+0xf8>)
 8001280:	f002 f896 	bl	80033b0 <siprintf>
	if(simcom_at_command(json, "OK", 25000) == 1)
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <firebase_update+0xe8>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe64 	bl	8000f5c <simcom_at_command>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10b      	bne.n	80012b2 <firebase_update+0xda>
	{
		simcom_gprs_http_set_ssl();
 800129a:	f7ff ff5b 	bl	8001154 <simcom_gprs_http_set_ssl>
		simcom_at_command("AT+HTTPACTION=1", "+HTTPACTION:", 1000);
 800129e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a2:	490c      	ldr	r1, [pc, #48]	; (80012d4 <firebase_update+0xfc>)
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <firebase_update+0x100>)
 80012a6:	f7ff fe59 	bl	8000f5c <simcom_at_command>
		HAL_Delay(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ae:	f000 fb65 	bl	800197c <HAL_Delay>
	}


}
 80012b2:	bf00      	nop
 80012b4:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	08004b18 	.word	0x08004b18
 80012c0:	08004a2c 	.word	0x08004a2c
 80012c4:	08004b54 	.word	0x08004b54
 80012c8:	08004b80 	.word	0x08004b80
 80012cc:	08004b8c 	.word	0x08004b8c
 80012d0:	08004ba4 	.word	0x08004ba4
 80012d4:	08004bec 	.word	0x08004bec
 80012d8:	08004bfc 	.word	0x08004bfc

080012dc <HAL_UART_RxCpltCallback>:
uint32_t time_get_gps = 0;
float my_lat = 0, my_long = 0;
extern GPS_Struct gps;
bool flag = true;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1 && flag == true)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_UART_RxCpltCallback+0x28>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d105      	bne.n	80012fa <HAL_UART_RxCpltCallback+0x1e>
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_UART_RxCpltCallback+0x2c>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_UART_RxCpltCallback+0x1e>
	{
		gps_callback();
 80012f6:	f7ff fdeb 	bl	8000ed0 <gps_callback>
	}
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40013800 	.word	0x40013800
 8001308:	20000000 	.word	0x20000000

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001312:	f000 fad1 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001316:	f000 f81f 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131a:	f000 f8e1 	bl	80014e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800131e:	f000 f861 	bl	80013e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001322:	f000 f889 	bl	8001438 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001326:	f000 f8b1 	bl	800148c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  simcom_init();
 800132a:	f7ff fea5 	bl	8001078 <simcom_init>
//  gps_init();
  firebase_update("https://ggmaptest-304715-default-rtdb.firebaseio.com/", "98N21033", "tungvoson98@gmail.com", "D16Hr73bmZPFxlMfcjx0f7iCJqdFGhpElc9RtZAo", 1.000, 2.000);
 800132e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <main+0x3c>)
 800133c:	4a03      	ldr	r2, [pc, #12]	; (800134c <main+0x40>)
 800133e:	4904      	ldr	r1, [pc, #16]	; (8001350 <main+0x44>)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <main+0x48>)
 8001342:	f7ff ff49 	bl	80011d8 <firebase_update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001346:	e7fe      	b.n	8001346 <main+0x3a>
 8001348:	08004c80 	.word	0x08004c80
 800134c:	08004cac 	.word	0x08004cac
 8001350:	08004cc4 	.word	0x08004cc4
 8001354:	08004cd0 	.word	0x08004cd0

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	; 0x40
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2228      	movs	r2, #40	; 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f001 ff64 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001396:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fe2f 	bl	8002004 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013ac:	f000 f8f0 	bl	8001590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 f89a 	bl	8002504 <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013d6:	f000 f8db 	bl	8001590 <Error_Handler>
  }
}
 80013da:	bf00      	nop
 80013dc:	3740      	adds	r7, #64	; 0x40
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_USART1_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 800141c:	f001 fa0c 	bl	8002838 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f8b3 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001f8 	.word	0x200001f8
 8001434:	40013800 	.word	0x40013800

08001438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_USART2_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001470:	f001 f9e2 	bl	8002838 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800147a:	f000 f889 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000238 	.word	0x20000238
 8001488:	40004400 	.word	0x40004400

0800148c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART3_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014c4:	f001 f9b8 	bl	8002838 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f85f 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001b8 	.word	0x200001b8
 80014dc:	40004800 	.word	0x40004800

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <MX_GPIO_Init+0xa8>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a23      	ldr	r2, [pc, #140]	; (8001588 <MX_GPIO_Init+0xa8>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <MX_GPIO_Init+0xa8>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <MX_GPIO_Init+0xa8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <MX_GPIO_Init+0xa8>)
 8001512:	f043 0320 	orr.w	r3, r3, #32
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_GPIO_Init+0xa8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_GPIO_Init+0xa8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a17      	ldr	r2, [pc, #92]	; (8001588 <MX_GPIO_Init+0xa8>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_GPIO_Init+0xa8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_GPIO_Init+0xa8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a11      	ldr	r2, [pc, #68]	; (8001588 <MX_GPIO_Init+0xa8>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_GPIO_Init+0xa8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <MX_GPIO_Init+0xac>)
 800155c:	f000 fd3a 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2302      	movs	r3, #2
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_GPIO_Init+0xac>)
 800157a:	f000 fba7 	bl	8001ccc <HAL_GPIO_Init>

}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	40011000 	.word	0x40011000

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_MspInit+0x5c>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <HAL_MspInit+0x5c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_MspInit+0x5c>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x5c>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_MspInit+0x5c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_MspInit+0x5c>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_MspInit+0x60>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_MspInit+0x60>)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010000 	.word	0x40010000

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_UART_MspInit+0x178>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d13a      	bne.n	8001696 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001620:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_UART_MspInit+0x17c>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a55      	ldr	r2, [pc, #340]	; (800177c <HAL_UART_MspInit+0x17c>)
 8001626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_UART_MspInit+0x17c>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_UART_MspInit+0x17c>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a4f      	ldr	r2, [pc, #316]	; (800177c <HAL_UART_MspInit+0x17c>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b4d      	ldr	r3, [pc, #308]	; (800177c <HAL_UART_MspInit+0x17c>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	4619      	mov	r1, r3
 8001664:	4846      	ldr	r0, [pc, #280]	; (8001780 <HAL_UART_MspInit+0x180>)
 8001666:	f000 fb31 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_RX_Pin;
 800166a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0320 	add.w	r3, r7, #32
 800167c:	4619      	mov	r1, r3
 800167e:	4840      	ldr	r0, [pc, #256]	; (8001780 <HAL_UART_MspInit+0x180>)
 8001680:	f000 fb24 	bl	8001ccc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2101      	movs	r1, #1
 8001688:	2025      	movs	r0, #37	; 0x25
 800168a:	f000 fa72 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800168e:	2025      	movs	r0, #37	; 0x25
 8001690:	f000 fa8b 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001694:	e06c      	b.n	8001770 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a3a      	ldr	r2, [pc, #232]	; (8001784 <HAL_UART_MspInit+0x184>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d130      	bne.n	8001702 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_UART_MspInit+0x17c>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	4a35      	ldr	r2, [pc, #212]	; (800177c <HAL_UART_MspInit+0x17c>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016aa:	61d3      	str	r3, [r2, #28]
 80016ac:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_UART_MspInit+0x17c>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_UART_MspInit+0x17c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a2f      	ldr	r2, [pc, #188]	; (800177c <HAL_UART_MspInit+0x17c>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_UART_MspInit+0x17c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 80016d0:	2304      	movs	r3, #4
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4619      	mov	r1, r3
 80016e2:	4827      	ldr	r0, [pc, #156]	; (8001780 <HAL_UART_MspInit+0x180>)
 80016e4:	f000 faf2 	bl	8001ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 80016e8:	2308      	movs	r3, #8
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4619      	mov	r1, r3
 80016fa:	4821      	ldr	r0, [pc, #132]	; (8001780 <HAL_UART_MspInit+0x180>)
 80016fc:	f000 fae6 	bl	8001ccc <HAL_GPIO_Init>
}
 8001700:	e036      	b.n	8001770 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_UART_MspInit+0x188>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d131      	bne.n	8001770 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_UART_MspInit+0x17c>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	4a1a      	ldr	r2, [pc, #104]	; (800177c <HAL_UART_MspInit+0x17c>)
 8001712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001716:	61d3      	str	r3, [r2, #28]
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_UART_MspInit+0x17c>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_UART_MspInit+0x17c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <HAL_UART_MspInit+0x17c>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_UART_MspInit+0x17c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 800173c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0320 	add.w	r3, r7, #32
 800174e:	4619      	mov	r1, r3
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <HAL_UART_MspInit+0x18c>)
 8001752:	f000 fabb 	bl	8001ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8001756:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	4619      	mov	r1, r3
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <HAL_UART_MspInit+0x18c>)
 800176c:	f000 faae 	bl	8001ccc <HAL_GPIO_Init>
}
 8001770:	bf00      	nop
 8001772:	3730      	adds	r7, #48	; 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40013800 	.word	0x40013800
 800177c:	40021000 	.word	0x40021000
 8001780:	40010800 	.word	0x40010800
 8001784:	40004400 	.word	0x40004400
 8001788:	40004800 	.word	0x40004800
 800178c:	40010c00 	.word	0x40010c00

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d6:	f000 f8b5 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART1_IRQHandler+0x10>)
 80017e6:	f001 f9f9 	bl	8002bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200001f8 	.word	0x200001f8

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f001 fcdc 	bl	80031e0 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20005000 	.word	0x20005000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000094 	.word	0x20000094
 800185c:	20000290 	.word	0x20000290

08001860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800186c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800186e:	e003      	b.n	8001878 <LoopCopyDataInit>

08001870 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001872:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001874:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001876:	3104      	adds	r1, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001878:	480a      	ldr	r0, [pc, #40]	; (80018a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800187c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800187e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001880:	d3f6      	bcc.n	8001870 <CopyDataInit>
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001884:	e002      	b.n	800188c <LoopFillZerobss>

08001886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001888:	f842 3b04 	str.w	r3, [r2], #4

0800188c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800188e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001890:	d3f9      	bcc.n	8001886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001892:	f7ff ffe5 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001896:	f001 fca9 	bl	80031ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189a:	f7ff fd37 	bl	800130c <main>
  bx lr
 800189e:	4770      	bx	lr
  ldr r3, =_sidata
 80018a0:	08004e10 	.word	0x08004e10
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018a8:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80018ac:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80018b0:	2000028c 	.word	0x2000028c

080018b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_2_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_Init+0x28>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_Init+0x28>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f947 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f808 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fe62 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x54>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x58>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f95f 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f927 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_InitTick+0x5c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000004 	.word	0x20000004
 800193c:	2000000c 	.word	0x2000000c
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_IncTick+0x1c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x20>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_IncTick+0x20>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	2000000c 	.word	0x2000000c
 8001964:	20000278 	.word	0x20000278

08001968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b02      	ldr	r3, [pc, #8]	; (8001978 <HAL_GetTick+0x10>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	20000278 	.word	0x20000278

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fff0 	bl	8001968 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_Delay+0x44>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffe0 	bl	8001968 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4906      	ldr	r1, [pc, #24]	; (8001a5c <__NVIC_EnableIRQ+0x34>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff90 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff2d 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff42 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff90 	bl	8001ab4 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5f 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff35 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d005      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e051      	b.n	8001ca6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 020e 	bic.w	r2, r2, #14
 8001c10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_DMA_Abort_IT+0xd0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d029      	beq.n	8001c80 <HAL_DMA_Abort_IT+0xa0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <HAL_DMA_Abort_IT+0xd4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d022      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x9c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_DMA_Abort_IT+0xd8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d01a      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x96>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <HAL_DMA_Abort_IT+0xdc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d012      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x90>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_DMA_Abort_IT+0xe0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00a      	beq.n	8001c6a <HAL_DMA_Abort_IT+0x8a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_DMA_Abort_IT+0xe4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d102      	bne.n	8001c64 <HAL_DMA_Abort_IT+0x84>
 8001c5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c62:	e00e      	b.n	8001c82 <HAL_DMA_Abort_IT+0xa2>
 8001c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c68:	e00b      	b.n	8001c82 <HAL_DMA_Abort_IT+0xa2>
 8001c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6e:	e008      	b.n	8001c82 <HAL_DMA_Abort_IT+0xa2>
 8001c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c74:	e005      	b.n	8001c82 <HAL_DMA_Abort_IT+0xa2>
 8001c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7a:	e002      	b.n	8001c82 <HAL_DMA_Abort_IT+0xa2>
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	e000      	b.n	8001c82 <HAL_DMA_Abort_IT+0xa2>
 8001c80:	2301      	movs	r3, #1
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_DMA_Abort_IT+0xe8>)
 8001c84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
    } 
  }
  return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40020008 	.word	0x40020008
 8001cb4:	4002001c 	.word	0x4002001c
 8001cb8:	40020030 	.word	0x40020030
 8001cbc:	40020044 	.word	0x40020044
 8001cc0:	40020058 	.word	0x40020058
 8001cc4:	4002006c 	.word	0x4002006c
 8001cc8:	40020000 	.word	0x40020000

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b08b      	sub	sp, #44	; 0x2c
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cde:	e169      	b.n	8001fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f040 8158 	bne.w	8001fae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a9a      	ldr	r2, [pc, #616]	; (8001f6c <HAL_GPIO_Init+0x2a0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d05e      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d08:	4a98      	ldr	r2, [pc, #608]	; (8001f6c <HAL_GPIO_Init+0x2a0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d875      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d0e:	4a98      	ldr	r2, [pc, #608]	; (8001f70 <HAL_GPIO_Init+0x2a4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d058      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d14:	4a96      	ldr	r2, [pc, #600]	; (8001f70 <HAL_GPIO_Init+0x2a4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d86f      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d1a:	4a96      	ldr	r2, [pc, #600]	; (8001f74 <HAL_GPIO_Init+0x2a8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d052      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d20:	4a94      	ldr	r2, [pc, #592]	; (8001f74 <HAL_GPIO_Init+0x2a8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d869      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d26:	4a94      	ldr	r2, [pc, #592]	; (8001f78 <HAL_GPIO_Init+0x2ac>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d04c      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d2c:	4a92      	ldr	r2, [pc, #584]	; (8001f78 <HAL_GPIO_Init+0x2ac>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d863      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d32:	4a92      	ldr	r2, [pc, #584]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d046      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d38:	4a90      	ldr	r2, [pc, #576]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d85d      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d3e:	2b12      	cmp	r3, #18
 8001d40:	d82a      	bhi.n	8001d98 <HAL_GPIO_Init+0xcc>
 8001d42:	2b12      	cmp	r3, #18
 8001d44:	d859      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d46:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <HAL_GPIO_Init+0x80>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001dc7 	.word	0x08001dc7
 8001d50:	08001da1 	.word	0x08001da1
 8001d54:	08001db3 	.word	0x08001db3
 8001d58:	08001df5 	.word	0x08001df5
 8001d5c:	08001dfb 	.word	0x08001dfb
 8001d60:	08001dfb 	.word	0x08001dfb
 8001d64:	08001dfb 	.word	0x08001dfb
 8001d68:	08001dfb 	.word	0x08001dfb
 8001d6c:	08001dfb 	.word	0x08001dfb
 8001d70:	08001dfb 	.word	0x08001dfb
 8001d74:	08001dfb 	.word	0x08001dfb
 8001d78:	08001dfb 	.word	0x08001dfb
 8001d7c:	08001dfb 	.word	0x08001dfb
 8001d80:	08001dfb 	.word	0x08001dfb
 8001d84:	08001dfb 	.word	0x08001dfb
 8001d88:	08001dfb 	.word	0x08001dfb
 8001d8c:	08001dfb 	.word	0x08001dfb
 8001d90:	08001da9 	.word	0x08001da9
 8001d94:	08001dbd 	.word	0x08001dbd
 8001d98:	4a79      	ldr	r2, [pc, #484]	; (8001f80 <HAL_GPIO_Init+0x2b4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d9e:	e02c      	b.n	8001dfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e029      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	3304      	adds	r3, #4
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e024      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	3308      	adds	r3, #8
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e01f      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	330c      	adds	r3, #12
 8001dc2:	623b      	str	r3, [r7, #32]
          break;
 8001dc4:	e01a      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	623b      	str	r3, [r7, #32]
          break;
 8001dd2:	e013      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	611a      	str	r2, [r3, #16]
          break;
 8001de6:	e009      	b.n	8001dfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de8:	2308      	movs	r3, #8
 8001dea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	615a      	str	r2, [r3, #20]
          break;
 8001df2:	e003      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          break;
 8001dfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2bff      	cmp	r3, #255	; 0xff
 8001e00:	d801      	bhi.n	8001e06 <HAL_GPIO_Init+0x13a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	e001      	b.n	8001e0a <HAL_GPIO_Init+0x13e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d802      	bhi.n	8001e18 <HAL_GPIO_Init+0x14c>
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	e002      	b.n	8001e1e <HAL_GPIO_Init+0x152>
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	3b08      	subs	r3, #8
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	210f      	movs	r1, #15
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	6a39      	ldr	r1, [r7, #32]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80b1 	beq.w	8001fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_GPIO_Init+0x2b8>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <HAL_GPIO_Init+0x2b8>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_GPIO_Init+0x2b8>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e64:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_GPIO_Init+0x2bc>)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <HAL_GPIO_Init+0x2c0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_GPIO_Init+0x1ec>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3f      	ldr	r2, [pc, #252]	; (8001f90 <HAL_GPIO_Init+0x2c4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00d      	beq.n	8001eb4 <HAL_GPIO_Init+0x1e8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3e      	ldr	r2, [pc, #248]	; (8001f94 <HAL_GPIO_Init+0x2c8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d007      	beq.n	8001eb0 <HAL_GPIO_Init+0x1e4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3d      	ldr	r2, [pc, #244]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_GPIO_Init+0x1e0>
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e006      	b.n	8001eba <HAL_GPIO_Init+0x1ee>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e004      	b.n	8001eba <HAL_GPIO_Init+0x1ee>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x1ee>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_GPIO_Init+0x1ee>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4093      	lsls	r3, r2
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eca:	492f      	ldr	r1, [pc, #188]	; (8001f88 <HAL_GPIO_Init+0x2bc>)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	492c      	ldr	r1, [pc, #176]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4928      	ldr	r1, [pc, #160]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4922      	ldr	r1, [pc, #136]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	491e      	ldr	r1, [pc, #120]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4918      	ldr	r1, [pc, #96]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4914      	ldr	r1, [pc, #80]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d021      	beq.n	8001fa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e021      	b.n	8001fae <HAL_GPIO_Init+0x2e2>
 8001f6a:	bf00      	nop
 8001f6c:	10320000 	.word	0x10320000
 8001f70:	10310000 	.word	0x10310000
 8001f74:	10220000 	.word	0x10220000
 8001f78:	10210000 	.word	0x10210000
 8001f7c:	10120000 	.word	0x10120000
 8001f80:	10110000 	.word	0x10110000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40010800 	.word	0x40010800
 8001f90:	40010c00 	.word	0x40010c00
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40011400 	.word	0x40011400
 8001f9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4909      	ldr	r1, [pc, #36]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f47f ae8e 	bne.w	8001ce0 <HAL_GPIO_Init+0x14>
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	372c      	adds	r7, #44	; 0x2c
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40010400 	.word	0x40010400

08001fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fe4:	787b      	ldrb	r3, [r7, #1]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ff0:	e003      	b.n	8001ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e26c      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8087 	beq.w	8002132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002024:	4b92      	ldr	r3, [pc, #584]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b04      	cmp	r3, #4
 800202e:	d00c      	beq.n	800204a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002030:	4b8f      	ldr	r3, [pc, #572]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d112      	bne.n	8002062 <HAL_RCC_OscConfig+0x5e>
 800203c:	4b8c      	ldr	r3, [pc, #560]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d10b      	bne.n	8002062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204a:	4b89      	ldr	r3, [pc, #548]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d06c      	beq.n	8002130 <HAL_RCC_OscConfig+0x12c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d168      	bne.n	8002130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e246      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x76>
 800206c:	4b80      	ldr	r3, [pc, #512]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a7f      	ldr	r2, [pc, #508]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e02e      	b.n	80020d8 <HAL_RCC_OscConfig+0xd4>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x98>
 8002082:	4b7b      	ldr	r3, [pc, #492]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7a      	ldr	r2, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b78      	ldr	r3, [pc, #480]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a77      	ldr	r2, [pc, #476]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xd4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0xbc>
 80020a6:	4b72      	ldr	r3, [pc, #456]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a71      	ldr	r2, [pc, #452]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6f      	ldr	r3, [pc, #444]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6e      	ldr	r2, [pc, #440]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xd4>
 80020c0:	4b6b      	ldr	r3, [pc, #428]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6a      	ldr	r2, [pc, #424]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b68      	ldr	r3, [pc, #416]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a67      	ldr	r2, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fc42 	bl	8001968 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fc3e 	bl	8001968 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1fa      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b5d      	ldr	r3, [pc, #372]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xe4>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc2e 	bl	8001968 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fc2a 	bl	8001968 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1e6      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x10c>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213e:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214a:	4b49      	ldr	r3, [pc, #292]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x18c>
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b43      	ldr	r3, [pc, #268]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x176>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1ba      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4939      	ldr	r1, [pc, #228]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b36      	ldr	r3, [pc, #216]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7ff fbe3 	bl	8001968 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a6:	f7ff fbdf 	bl	8001968 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e19b      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4927      	ldr	r1, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fbc2 	bl	8001968 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7ff fbbe 	bl	8001968 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e17a      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03a      	beq.n	8002288 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d019      	beq.n	800224e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_RCC_OscConfig+0x274>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7ff fba2 	bl	8001968 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fb9e 	bl	8001968 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e15a      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_RCC_OscConfig+0x26c>)
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002246:	2001      	movs	r0, #1
 8002248:	f000 fad8 	bl	80027fc <RCC_Delay>
 800224c:	e01c      	b.n	8002288 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_RCC_OscConfig+0x274>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7ff fb88 	bl	8001968 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225a:	e00f      	b.n	800227c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225c:	f7ff fb84 	bl	8001968 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d908      	bls.n	800227c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e140      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	42420000 	.word	0x42420000
 8002278:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	4b9e      	ldr	r3, [pc, #632]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e9      	bne.n	800225c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a6 	beq.w	80023e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229a:	4b97      	ldr	r3, [pc, #604]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	4b94      	ldr	r3, [pc, #592]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a93      	ldr	r2, [pc, #588]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	61d3      	str	r3, [r2, #28]
 80022b2:	4b91      	ldr	r3, [pc, #580]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b8e      	ldr	r3, [pc, #568]	; (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ce:	4b8b      	ldr	r3, [pc, #556]	; (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a8a      	ldr	r2, [pc, #552]	; (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7ff fb45 	bl	8001968 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7ff fb41 	bl	8001968 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b64      	cmp	r3, #100	; 0x64
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0fd      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x312>
 8002308:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	e02d      	b.n	8002372 <HAL_RCC_OscConfig+0x36e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x334>
 800231e:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a75      	ldr	r2, [pc, #468]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4b73      	ldr	r3, [pc, #460]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a72      	ldr	r2, [pc, #456]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	e01c      	b.n	8002372 <HAL_RCC_OscConfig+0x36e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d10c      	bne.n	800235a <HAL_RCC_OscConfig+0x356>
 8002340:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a6c      	ldr	r2, [pc, #432]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4a69      	ldr	r2, [pc, #420]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	e00b      	b.n	8002372 <HAL_RCC_OscConfig+0x36e>
 800235a:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a66      	ldr	r2, [pc, #408]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6213      	str	r3, [r2, #32]
 8002366:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a63      	ldr	r2, [pc, #396]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7ff faf5 	bl	8001968 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff faf1 	bl	8001968 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0ab      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002398:	4b57      	ldr	r3, [pc, #348]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ee      	beq.n	8002382 <HAL_RCC_OscConfig+0x37e>
 80023a4:	e014      	b.n	80023d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fadf 	bl	8001968 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff fadb 	bl	8001968 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e095      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c4:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ee      	bne.n	80023ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d105      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d6:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a47      	ldr	r2, [pc, #284]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8081 	beq.w	80024ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d061      	beq.n	80024bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d146      	bne.n	800248e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002400:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCC_OscConfig+0x4fc>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff faaf 	bl	8001968 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7ff faab 	bl	8001968 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e067      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002420:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f0      	bne.n	800240e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d108      	bne.n	8002448 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002436:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	492d      	ldr	r1, [pc, #180]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a19      	ldr	r1, [r3, #32]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	430b      	orrs	r3, r1
 800245a:	4927      	ldr	r1, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x4fc>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7ff fa7f 	bl	8001968 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7ff fa7b 	bl	8001968 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e037      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x46a>
 800248c:	e02f      	b.n	80024ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_RCC_OscConfig+0x4fc>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fa68 	bl	8001968 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7ff fa64 	bl	8001968 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e020      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x498>
 80024ba:	e018      	b.n	80024ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e013      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40007000 	.word	0x40007000
 8002500:	42420060 	.word	0x42420060

08002504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0d0      	b.n	80026ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d910      	bls.n	8002548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b67      	ldr	r3, [pc, #412]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4965      	ldr	r1, [pc, #404]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800256a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002582:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d040      	beq.n	8002624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d115      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e073      	b.n	80026ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e06b      	b.n	80026ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4936      	ldr	r1, [pc, #216]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f4:	f7ff f9b8 	bl	8001968 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7ff f9b4 	bl	8001968 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e053      	b.n	80026ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d210      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0207 	bic.w	r2, r3, #7
 800263a:	4922      	ldr	r1, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002692:	f000 f821 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002696:	4602      	mov	r2, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	5ccb      	ldrb	r3, [r1, r3]
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1cc>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1d0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f916 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08004d18 	.word	0x08004d18
 80026d0:	20000004 	.word	0x20000004
 80026d4:	20000008 	.word	0x20000008

080026d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b490      	push	{r4, r7}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026e0:	1d3c      	adds	r4, r7, #4
 80026e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026e8:	f240 2301 	movw	r3, #513	; 0x201
 80026ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x40>
 8002712:	2b08      	cmp	r3, #8
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x46>
 8002716:	e02d      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 800271a:	623b      	str	r3, [r7, #32]
      break;
 800271c:	e02d      	b.n	800277a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	0c9b      	lsrs	r3, r3, #18
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800272a:	4413      	add	r3, r2
 800272c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002730:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCC_GetSysClockFreq+0xb4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c5b      	lsrs	r3, r3, #17
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800274a:	4413      	add	r3, r2
 800274c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002750:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002756:	fb02 f203 	mul.w	r2, r2, r3
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	e004      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	623b      	str	r3, [r7, #32]
      break;
 8002772:	e002      	b.n	800277a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002776:	623b      	str	r3, [r7, #32]
      break;
 8002778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277a:	6a3b      	ldr	r3, [r7, #32]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc90      	pop	{r4, r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	08004d08 	.word	0x08004d08
 800278c:	40021000 	.word	0x40021000
 8002790:	007a1200 	.word	0x007a1200
 8002794:	003d0900 	.word	0x003d0900

08002798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800279c:	4b02      	ldr	r3, [pc, #8]	; (80027a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	20000004 	.word	0x20000004

080027ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b0:	f7ff fff2 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4903      	ldr	r1, [pc, #12]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08004d28 	.word	0x08004d28

080027d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d8:	f7ff ffde 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0adb      	lsrs	r3, r3, #11
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08004d28 	.word	0x08004d28

080027fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <RCC_Delay+0x34>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <RCC_Delay+0x38>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0a5b      	lsrs	r3, r3, #9
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002818:	bf00      	nop
  }
  while (Delay --);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1e5a      	subs	r2, r3, #1
 800281e:	60fa      	str	r2, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f9      	bne.n	8002818 <RCC_Delay+0x1c>
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000004 	.word	0x20000004
 8002834:	10624dd3 	.word	0x10624dd3

08002838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e03f      	b.n	80028ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe fece 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fc21 	bl	80030c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b08a      	sub	sp, #40	; 0x28
 80028d6:	af02      	add	r7, sp, #8
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d17c      	bne.n	80029ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_UART_Transmit+0x2c>
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e075      	b.n	80029ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_UART_Transmit+0x3e>
 800290c:	2302      	movs	r3, #2
 800290e:	e06e      	b.n	80029ee <HAL_UART_Transmit+0x11c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2221      	movs	r2, #33	; 0x21
 8002922:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002926:	f7ff f81f 	bl	8001968 <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	88fa      	ldrh	r2, [r7, #6]
 8002930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d108      	bne.n	8002954 <HAL_UART_Transmit+0x82>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	e003      	b.n	800295c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002964:	e02a      	b.n	80029bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2200      	movs	r2, #0
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fa45 	bl	8002e00 <UART_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e036      	b.n	80029ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3302      	adds	r3, #2
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	e007      	b.n	80029ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3301      	adds	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1cf      	bne.n	8002966 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2140      	movs	r1, #64	; 0x40
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fa15 	bl	8002e00 <UART_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e006      	b.n	80029ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b08a      	sub	sp, #40	; 0x28
 80029fa:	af02      	add	r7, sp, #8
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 8089 	bne.w	8002b2a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Receive+0x2e>
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e081      	b.n	8002b2c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Receive+0x40>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e07a      	b.n	8002b2c <HAL_UART_Receive+0x136>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2222      	movs	r2, #34	; 0x22
 8002a48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe ff8c 	bl	8001968 <HAL_GetTick>
 8002a50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a66:	d108      	bne.n	8002a7a <HAL_UART_Receive+0x84>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	e003      	b.n	8002a82 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a8a:	e043      	b.n	8002b14 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2120      	movs	r1, #32
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f9b2 	bl	8002e00 <UART_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e042      	b.n	8002b2c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	e01f      	b.n	8002b06 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d007      	beq.n	8002ae0 <HAL_UART_Receive+0xea>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_UART_Receive+0xf8>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e008      	b.n	8002b00 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1b6      	bne.n	8002a8c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d140      	bne.n	8002bd0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_UART_Receive_IT+0x26>
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e039      	b.n	8002bd2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_UART_Receive_IT+0x38>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e032      	b.n	8002bd2 <HAL_UART_Receive_IT+0x9e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2222      	movs	r2, #34	; 0x22
 8002b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002baa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0220 	orr.w	r2, r2, #32
 8002bca:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_UART_IRQHandler+0x52>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f9cc 	bl	8002fc4 <UART_Receive_IT>
      return;
 8002c2c:	e0d0      	b.n	8002dd0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80b0 	beq.w	8002d96 <HAL_UART_IRQHandler+0x1ba>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_UART_IRQHandler+0x70>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80a5 	beq.w	8002d96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_UART_IRQHandler+0x90>
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_UART_IRQHandler+0xb0>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	f043 0202 	orr.w	r2, r3, #2
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_UART_IRQHandler+0xd0>
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00f      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xfa>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <HAL_UART_IRQHandler+0xee>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	f043 0208 	orr.w	r2, r3, #8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d077      	beq.n	8002dce <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x11c>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f966 	bl	8002fc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <HAL_UART_IRQHandler+0x144>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d031      	beq.n	8002d84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8b7 	bl	8002e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_UART_IRQHandler+0x1fc>)
 8002d52:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe ff41 	bl	8001be0 <HAL_DMA_Abort_IT>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d016      	beq.n	8002d92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d72:	e00e      	b.n	8002d92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f83a 	bl	8002dee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7a:	e00a      	b.n	8002d92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f836 	bl	8002dee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d82:	e006      	b.n	8002d92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f832 	bl	8002dee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d90:	e01d      	b.n	8002dce <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d92:	bf00      	nop
    return;
 8002d94:	e01b      	b.n	8002dce <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_UART_IRQHandler+0x1d6>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8a3 	bl	8002ef6 <UART_Transmit_IT>
    return;
 8002db0:	e00e      	b.n	8002dd0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x1f4>
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8e4 	bl	8002f94 <UART_EndTransmit_IT>
    return;
 8002dcc:	e000      	b.n	8002dd0 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002dce:	bf00      	nop
  }
}
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08002ecf 	.word	0x08002ecf

08002ddc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e10:	e02c      	b.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d028      	beq.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e20:	f7fe fda2 	bl	8001968 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d21d      	bcs.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e00f      	b.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d0c3      	beq.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002eaa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff ff80 	bl	8002dee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b21      	cmp	r3, #33	; 0x21
 8002f08:	d13e      	bne.n	8002f88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d114      	bne.n	8002f3e <UART_Transmit_IT+0x48>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d110      	bne.n	8002f3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	1c9a      	adds	r2, r3, #2
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	621a      	str	r2, [r3, #32]
 8002f3c:	e008      	b.n	8002f50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	1c59      	adds	r1, r3, #1
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6211      	str	r1, [r2, #32]
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10f      	bne.n	8002f84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002faa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff11 	bl	8002ddc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b22      	cmp	r3, #34	; 0x22
 8002fd6:	d170      	bne.n	80030ba <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d117      	bne.n	8003012 <UART_Receive_IT+0x4e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d113      	bne.n	8003012 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	b29a      	uxth	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
 8003010:	e026      	b.n	8003060 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d007      	beq.n	8003036 <UART_Receive_IT+0x72>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <UART_Receive_IT+0x80>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e008      	b.n	8003056 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4619      	mov	r1, r3
 800306e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003070:	2b00      	cmp	r3, #0
 8003072:	d120      	bne.n	80030b6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0220 	bic.w	r2, r2, #32
 8003082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fe f915 	bl	80012dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e002      	b.n	80030bc <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e000      	b.n	80030bc <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
  }
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030fe:	f023 030c 	bic.w	r3, r3, #12
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	430b      	orrs	r3, r1
 800310a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2c      	ldr	r2, [pc, #176]	; (80031d8 <UART_SetConfig+0x114>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d103      	bne.n	8003134 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7ff fb52 	bl	80027d4 <HAL_RCC_GetPCLK2Freq>
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	e002      	b.n	800313a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003134:	f7ff fb3a 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009a      	lsls	r2, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	4a22      	ldr	r2, [pc, #136]	; (80031dc <UART_SetConfig+0x118>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	0119      	lsls	r1, r3, #4
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009a      	lsls	r2, r3, #2
 8003164:	441a      	add	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <UART_SetConfig+0x118>)
 8003172:	fba3 0302 	umull	r0, r3, r3, r2
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2064      	movs	r0, #100	; 0x64
 800317a:	fb00 f303 	mul.w	r3, r0, r3
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	3332      	adds	r3, #50	; 0x32
 8003184:	4a15      	ldr	r2, [pc, #84]	; (80031dc <UART_SetConfig+0x118>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003190:	4419      	add	r1, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009a      	lsls	r2, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <UART_SetConfig+0x118>)
 80031aa:	fba3 0302 	umull	r0, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2064      	movs	r0, #100	; 0x64
 80031b2:	fb00 f303 	mul.w	r3, r0, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	4a07      	ldr	r2, [pc, #28]	; (80031dc <UART_SetConfig+0x118>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	440a      	add	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40013800 	.word	0x40013800
 80031dc:	51eb851f 	.word	0x51eb851f

080031e0 <__errno>:
 80031e0:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <__errno+0x8>)
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000010 	.word	0x20000010

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	2600      	movs	r6, #0
 80031f0:	4d0c      	ldr	r5, [pc, #48]	; (8003224 <__libc_init_array+0x38>)
 80031f2:	4c0d      	ldr	r4, [pc, #52]	; (8003228 <__libc_init_array+0x3c>)
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	42a6      	cmp	r6, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	f001 fc06 	bl	8004a0c <_init>
 8003200:	2600      	movs	r6, #0
 8003202:	4d0a      	ldr	r5, [pc, #40]	; (800322c <__libc_init_array+0x40>)
 8003204:	4c0a      	ldr	r4, [pc, #40]	; (8003230 <__libc_init_array+0x44>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	42a6      	cmp	r6, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	f855 3b04 	ldr.w	r3, [r5], #4
 8003214:	4798      	blx	r3
 8003216:	3601      	adds	r6, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	f855 3b04 	ldr.w	r3, [r5], #4
 800321e:	4798      	blx	r3
 8003220:	3601      	adds	r6, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	08004e08 	.word	0x08004e08
 8003228:	08004e08 	.word	0x08004e08
 800322c:	08004e08 	.word	0x08004e08
 8003230:	08004e0c 	.word	0x08004e0c

08003234 <memset>:
 8003234:	4603      	mov	r3, r0
 8003236:	4402      	add	r2, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <_free_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	2900      	cmp	r1, #0
 800324a:	d043      	beq.n	80032d4 <_free_r+0x90>
 800324c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003250:	1f0c      	subs	r4, r1, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	bfb8      	it	lt
 8003256:	18e4      	addlt	r4, r4, r3
 8003258:	f000 f8f0 	bl	800343c <__malloc_lock>
 800325c:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <_free_r+0x94>)
 800325e:	6813      	ldr	r3, [r2, #0]
 8003260:	4610      	mov	r0, r2
 8003262:	b933      	cbnz	r3, 8003272 <_free_r+0x2e>
 8003264:	6063      	str	r3, [r4, #4]
 8003266:	6014      	str	r4, [r2, #0]
 8003268:	4628      	mov	r0, r5
 800326a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800326e:	f000 b8eb 	b.w	8003448 <__malloc_unlock>
 8003272:	42a3      	cmp	r3, r4
 8003274:	d90a      	bls.n	800328c <_free_r+0x48>
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	1862      	adds	r2, r4, r1
 800327a:	4293      	cmp	r3, r2
 800327c:	bf01      	itttt	eq
 800327e:	681a      	ldreq	r2, [r3, #0]
 8003280:	685b      	ldreq	r3, [r3, #4]
 8003282:	1852      	addeq	r2, r2, r1
 8003284:	6022      	streq	r2, [r4, #0]
 8003286:	6063      	str	r3, [r4, #4]
 8003288:	6004      	str	r4, [r0, #0]
 800328a:	e7ed      	b.n	8003268 <_free_r+0x24>
 800328c:	461a      	mov	r2, r3
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	b10b      	cbz	r3, 8003296 <_free_r+0x52>
 8003292:	42a3      	cmp	r3, r4
 8003294:	d9fa      	bls.n	800328c <_free_r+0x48>
 8003296:	6811      	ldr	r1, [r2, #0]
 8003298:	1850      	adds	r0, r2, r1
 800329a:	42a0      	cmp	r0, r4
 800329c:	d10b      	bne.n	80032b6 <_free_r+0x72>
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	4401      	add	r1, r0
 80032a2:	1850      	adds	r0, r2, r1
 80032a4:	4283      	cmp	r3, r0
 80032a6:	6011      	str	r1, [r2, #0]
 80032a8:	d1de      	bne.n	8003268 <_free_r+0x24>
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4401      	add	r1, r0
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	6053      	str	r3, [r2, #4]
 80032b4:	e7d8      	b.n	8003268 <_free_r+0x24>
 80032b6:	d902      	bls.n	80032be <_free_r+0x7a>
 80032b8:	230c      	movs	r3, #12
 80032ba:	602b      	str	r3, [r5, #0]
 80032bc:	e7d4      	b.n	8003268 <_free_r+0x24>
 80032be:	6820      	ldr	r0, [r4, #0]
 80032c0:	1821      	adds	r1, r4, r0
 80032c2:	428b      	cmp	r3, r1
 80032c4:	bf01      	itttt	eq
 80032c6:	6819      	ldreq	r1, [r3, #0]
 80032c8:	685b      	ldreq	r3, [r3, #4]
 80032ca:	1809      	addeq	r1, r1, r0
 80032cc:	6021      	streq	r1, [r4, #0]
 80032ce:	6063      	str	r3, [r4, #4]
 80032d0:	6054      	str	r4, [r2, #4]
 80032d2:	e7c9      	b.n	8003268 <_free_r+0x24>
 80032d4:	bd38      	pop	{r3, r4, r5, pc}
 80032d6:	bf00      	nop
 80032d8:	20000098 	.word	0x20000098

080032dc <_malloc_r>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	1ccd      	adds	r5, r1, #3
 80032e0:	f025 0503 	bic.w	r5, r5, #3
 80032e4:	3508      	adds	r5, #8
 80032e6:	2d0c      	cmp	r5, #12
 80032e8:	bf38      	it	cc
 80032ea:	250c      	movcc	r5, #12
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	4606      	mov	r6, r0
 80032f0:	db01      	blt.n	80032f6 <_malloc_r+0x1a>
 80032f2:	42a9      	cmp	r1, r5
 80032f4:	d903      	bls.n	80032fe <_malloc_r+0x22>
 80032f6:	230c      	movs	r3, #12
 80032f8:	6033      	str	r3, [r6, #0]
 80032fa:	2000      	movs	r0, #0
 80032fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032fe:	f000 f89d 	bl	800343c <__malloc_lock>
 8003302:	4921      	ldr	r1, [pc, #132]	; (8003388 <_malloc_r+0xac>)
 8003304:	680a      	ldr	r2, [r1, #0]
 8003306:	4614      	mov	r4, r2
 8003308:	b99c      	cbnz	r4, 8003332 <_malloc_r+0x56>
 800330a:	4f20      	ldr	r7, [pc, #128]	; (800338c <_malloc_r+0xb0>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b923      	cbnz	r3, 800331a <_malloc_r+0x3e>
 8003310:	4621      	mov	r1, r4
 8003312:	4630      	mov	r0, r6
 8003314:	f000 f83c 	bl	8003390 <_sbrk_r>
 8003318:	6038      	str	r0, [r7, #0]
 800331a:	4629      	mov	r1, r5
 800331c:	4630      	mov	r0, r6
 800331e:	f000 f837 	bl	8003390 <_sbrk_r>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	d123      	bne.n	800336e <_malloc_r+0x92>
 8003326:	230c      	movs	r3, #12
 8003328:	4630      	mov	r0, r6
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	f000 f88c 	bl	8003448 <__malloc_unlock>
 8003330:	e7e3      	b.n	80032fa <_malloc_r+0x1e>
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	1b5b      	subs	r3, r3, r5
 8003336:	d417      	bmi.n	8003368 <_malloc_r+0x8c>
 8003338:	2b0b      	cmp	r3, #11
 800333a:	d903      	bls.n	8003344 <_malloc_r+0x68>
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	441c      	add	r4, r3
 8003340:	6025      	str	r5, [r4, #0]
 8003342:	e004      	b.n	800334e <_malloc_r+0x72>
 8003344:	6863      	ldr	r3, [r4, #4]
 8003346:	42a2      	cmp	r2, r4
 8003348:	bf0c      	ite	eq
 800334a:	600b      	streq	r3, [r1, #0]
 800334c:	6053      	strne	r3, [r2, #4]
 800334e:	4630      	mov	r0, r6
 8003350:	f000 f87a 	bl	8003448 <__malloc_unlock>
 8003354:	f104 000b 	add.w	r0, r4, #11
 8003358:	1d23      	adds	r3, r4, #4
 800335a:	f020 0007 	bic.w	r0, r0, #7
 800335e:	1ac2      	subs	r2, r0, r3
 8003360:	d0cc      	beq.n	80032fc <_malloc_r+0x20>
 8003362:	1a1b      	subs	r3, r3, r0
 8003364:	50a3      	str	r3, [r4, r2]
 8003366:	e7c9      	b.n	80032fc <_malloc_r+0x20>
 8003368:	4622      	mov	r2, r4
 800336a:	6864      	ldr	r4, [r4, #4]
 800336c:	e7cc      	b.n	8003308 <_malloc_r+0x2c>
 800336e:	1cc4      	adds	r4, r0, #3
 8003370:	f024 0403 	bic.w	r4, r4, #3
 8003374:	42a0      	cmp	r0, r4
 8003376:	d0e3      	beq.n	8003340 <_malloc_r+0x64>
 8003378:	1a21      	subs	r1, r4, r0
 800337a:	4630      	mov	r0, r6
 800337c:	f000 f808 	bl	8003390 <_sbrk_r>
 8003380:	3001      	adds	r0, #1
 8003382:	d1dd      	bne.n	8003340 <_malloc_r+0x64>
 8003384:	e7cf      	b.n	8003326 <_malloc_r+0x4a>
 8003386:	bf00      	nop
 8003388:	20000098 	.word	0x20000098
 800338c:	2000009c 	.word	0x2000009c

08003390 <_sbrk_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	2300      	movs	r3, #0
 8003394:	4d05      	ldr	r5, [pc, #20]	; (80033ac <_sbrk_r+0x1c>)
 8003396:	4604      	mov	r4, r0
 8003398:	4608      	mov	r0, r1
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	f7fe fa2a 	bl	80017f4 <_sbrk>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d102      	bne.n	80033aa <_sbrk_r+0x1a>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	b103      	cbz	r3, 80033aa <_sbrk_r+0x1a>
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	2000027c 	.word	0x2000027c

080033b0 <siprintf>:
 80033b0:	b40e      	push	{r1, r2, r3}
 80033b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033b6:	b500      	push	{lr}
 80033b8:	b09c      	sub	sp, #112	; 0x70
 80033ba:	ab1d      	add	r3, sp, #116	; 0x74
 80033bc:	9002      	str	r0, [sp, #8]
 80033be:	9006      	str	r0, [sp, #24]
 80033c0:	9107      	str	r1, [sp, #28]
 80033c2:	9104      	str	r1, [sp, #16]
 80033c4:	4808      	ldr	r0, [pc, #32]	; (80033e8 <siprintf+0x38>)
 80033c6:	4909      	ldr	r1, [pc, #36]	; (80033ec <siprintf+0x3c>)
 80033c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80033cc:	9105      	str	r1, [sp, #20]
 80033ce:	6800      	ldr	r0, [r0, #0]
 80033d0:	a902      	add	r1, sp, #8
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	f000 f89a 	bl	800350c <_svfiprintf_r>
 80033d8:	2200      	movs	r2, #0
 80033da:	9b02      	ldr	r3, [sp, #8]
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	b01c      	add	sp, #112	; 0x70
 80033e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033e4:	b003      	add	sp, #12
 80033e6:	4770      	bx	lr
 80033e8:	20000010 	.word	0x20000010
 80033ec:	ffff0208 	.word	0xffff0208

080033f0 <strstr>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	780c      	ldrb	r4, [r1, #0]
 80033f4:	b164      	cbz	r4, 8003410 <strstr+0x20>
 80033f6:	4603      	mov	r3, r0
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	1c5e      	adds	r6, r3, #1
 80033fe:	b90a      	cbnz	r2, 8003404 <strstr+0x14>
 8003400:	4610      	mov	r0, r2
 8003402:	e005      	b.n	8003410 <strstr+0x20>
 8003404:	4294      	cmp	r4, r2
 8003406:	d108      	bne.n	800341a <strstr+0x2a>
 8003408:	460d      	mov	r5, r1
 800340a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800340e:	b902      	cbnz	r2, 8003412 <strstr+0x22>
 8003410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003412:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003416:	4297      	cmp	r7, r2
 8003418:	d0f7      	beq.n	800340a <strstr+0x1a>
 800341a:	4633      	mov	r3, r6
 800341c:	e7ec      	b.n	80033f8 <strstr+0x8>

0800341e <memcpy>:
 800341e:	440a      	add	r2, r1
 8003420:	4291      	cmp	r1, r2
 8003422:	f100 33ff 	add.w	r3, r0, #4294967295
 8003426:	d100      	bne.n	800342a <memcpy+0xc>
 8003428:	4770      	bx	lr
 800342a:	b510      	push	{r4, lr}
 800342c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003430:	4291      	cmp	r1, r2
 8003432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003436:	d1f9      	bne.n	800342c <memcpy+0xe>
 8003438:	bd10      	pop	{r4, pc}
	...

0800343c <__malloc_lock>:
 800343c:	4801      	ldr	r0, [pc, #4]	; (8003444 <__malloc_lock+0x8>)
 800343e:	f000 bb01 	b.w	8003a44 <__retarget_lock_acquire_recursive>
 8003442:	bf00      	nop
 8003444:	20000284 	.word	0x20000284

08003448 <__malloc_unlock>:
 8003448:	4801      	ldr	r0, [pc, #4]	; (8003450 <__malloc_unlock+0x8>)
 800344a:	f000 bafc 	b.w	8003a46 <__retarget_lock_release_recursive>
 800344e:	bf00      	nop
 8003450:	20000284 	.word	0x20000284

08003454 <__ssputs_r>:
 8003454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003458:	688e      	ldr	r6, [r1, #8]
 800345a:	4682      	mov	sl, r0
 800345c:	429e      	cmp	r6, r3
 800345e:	460c      	mov	r4, r1
 8003460:	4690      	mov	r8, r2
 8003462:	461f      	mov	r7, r3
 8003464:	d838      	bhi.n	80034d8 <__ssputs_r+0x84>
 8003466:	898a      	ldrh	r2, [r1, #12]
 8003468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800346c:	d032      	beq.n	80034d4 <__ssputs_r+0x80>
 800346e:	6825      	ldr	r5, [r4, #0]
 8003470:	6909      	ldr	r1, [r1, #16]
 8003472:	3301      	adds	r3, #1
 8003474:	eba5 0901 	sub.w	r9, r5, r1
 8003478:	6965      	ldr	r5, [r4, #20]
 800347a:	444b      	add	r3, r9
 800347c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003484:	106d      	asrs	r5, r5, #1
 8003486:	429d      	cmp	r5, r3
 8003488:	bf38      	it	cc
 800348a:	461d      	movcc	r5, r3
 800348c:	0553      	lsls	r3, r2, #21
 800348e:	d531      	bpl.n	80034f4 <__ssputs_r+0xa0>
 8003490:	4629      	mov	r1, r5
 8003492:	f7ff ff23 	bl	80032dc <_malloc_r>
 8003496:	4606      	mov	r6, r0
 8003498:	b950      	cbnz	r0, 80034b0 <__ssputs_r+0x5c>
 800349a:	230c      	movs	r3, #12
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f8ca 3000 	str.w	r3, [sl]
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b0:	464a      	mov	r2, r9
 80034b2:	6921      	ldr	r1, [r4, #16]
 80034b4:	f7ff ffb3 	bl	800341e <memcpy>
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c2:	81a3      	strh	r3, [r4, #12]
 80034c4:	6126      	str	r6, [r4, #16]
 80034c6:	444e      	add	r6, r9
 80034c8:	6026      	str	r6, [r4, #0]
 80034ca:	463e      	mov	r6, r7
 80034cc:	6165      	str	r5, [r4, #20]
 80034ce:	eba5 0509 	sub.w	r5, r5, r9
 80034d2:	60a5      	str	r5, [r4, #8]
 80034d4:	42be      	cmp	r6, r7
 80034d6:	d900      	bls.n	80034da <__ssputs_r+0x86>
 80034d8:	463e      	mov	r6, r7
 80034da:	4632      	mov	r2, r6
 80034dc:	4641      	mov	r1, r8
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	f000 fac0 	bl	8003a64 <memmove>
 80034e4:	68a3      	ldr	r3, [r4, #8]
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	1b9b      	subs	r3, r3, r6
 80034ea:	4432      	add	r2, r6
 80034ec:	2000      	movs	r0, #0
 80034ee:	60a3      	str	r3, [r4, #8]
 80034f0:	6022      	str	r2, [r4, #0]
 80034f2:	e7db      	b.n	80034ac <__ssputs_r+0x58>
 80034f4:	462a      	mov	r2, r5
 80034f6:	f000 facf 	bl	8003a98 <_realloc_r>
 80034fa:	4606      	mov	r6, r0
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d1e1      	bne.n	80034c4 <__ssputs_r+0x70>
 8003500:	4650      	mov	r0, sl
 8003502:	6921      	ldr	r1, [r4, #16]
 8003504:	f7ff fe9e 	bl	8003244 <_free_r>
 8003508:	e7c7      	b.n	800349a <__ssputs_r+0x46>
	...

0800350c <_svfiprintf_r>:
 800350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	4698      	mov	r8, r3
 8003512:	898b      	ldrh	r3, [r1, #12]
 8003514:	4607      	mov	r7, r0
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	460d      	mov	r5, r1
 800351a:	4614      	mov	r4, r2
 800351c:	b09d      	sub	sp, #116	; 0x74
 800351e:	d50e      	bpl.n	800353e <_svfiprintf_r+0x32>
 8003520:	690b      	ldr	r3, [r1, #16]
 8003522:	b963      	cbnz	r3, 800353e <_svfiprintf_r+0x32>
 8003524:	2140      	movs	r1, #64	; 0x40
 8003526:	f7ff fed9 	bl	80032dc <_malloc_r>
 800352a:	6028      	str	r0, [r5, #0]
 800352c:	6128      	str	r0, [r5, #16]
 800352e:	b920      	cbnz	r0, 800353a <_svfiprintf_r+0x2e>
 8003530:	230c      	movs	r3, #12
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	e0d1      	b.n	80036de <_svfiprintf_r+0x1d2>
 800353a:	2340      	movs	r3, #64	; 0x40
 800353c:	616b      	str	r3, [r5, #20]
 800353e:	2300      	movs	r3, #0
 8003540:	9309      	str	r3, [sp, #36]	; 0x24
 8003542:	2320      	movs	r3, #32
 8003544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003548:	2330      	movs	r3, #48	; 0x30
 800354a:	f04f 0901 	mov.w	r9, #1
 800354e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003552:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80036f8 <_svfiprintf_r+0x1ec>
 8003556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800355a:	4623      	mov	r3, r4
 800355c:	469a      	mov	sl, r3
 800355e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003562:	b10a      	cbz	r2, 8003568 <_svfiprintf_r+0x5c>
 8003564:	2a25      	cmp	r2, #37	; 0x25
 8003566:	d1f9      	bne.n	800355c <_svfiprintf_r+0x50>
 8003568:	ebba 0b04 	subs.w	fp, sl, r4
 800356c:	d00b      	beq.n	8003586 <_svfiprintf_r+0x7a>
 800356e:	465b      	mov	r3, fp
 8003570:	4622      	mov	r2, r4
 8003572:	4629      	mov	r1, r5
 8003574:	4638      	mov	r0, r7
 8003576:	f7ff ff6d 	bl	8003454 <__ssputs_r>
 800357a:	3001      	adds	r0, #1
 800357c:	f000 80aa 	beq.w	80036d4 <_svfiprintf_r+0x1c8>
 8003580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003582:	445a      	add	r2, fp
 8003584:	9209      	str	r2, [sp, #36]	; 0x24
 8003586:	f89a 3000 	ldrb.w	r3, [sl]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80a2 	beq.w	80036d4 <_svfiprintf_r+0x1c8>
 8003590:	2300      	movs	r3, #0
 8003592:	f04f 32ff 	mov.w	r2, #4294967295
 8003596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800359a:	f10a 0a01 	add.w	sl, sl, #1
 800359e:	9304      	str	r3, [sp, #16]
 80035a0:	9307      	str	r3, [sp, #28]
 80035a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035a6:	931a      	str	r3, [sp, #104]	; 0x68
 80035a8:	4654      	mov	r4, sl
 80035aa:	2205      	movs	r2, #5
 80035ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b0:	4851      	ldr	r0, [pc, #324]	; (80036f8 <_svfiprintf_r+0x1ec>)
 80035b2:	f000 fa49 	bl	8003a48 <memchr>
 80035b6:	9a04      	ldr	r2, [sp, #16]
 80035b8:	b9d8      	cbnz	r0, 80035f2 <_svfiprintf_r+0xe6>
 80035ba:	06d0      	lsls	r0, r2, #27
 80035bc:	bf44      	itt	mi
 80035be:	2320      	movmi	r3, #32
 80035c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035c4:	0711      	lsls	r1, r2, #28
 80035c6:	bf44      	itt	mi
 80035c8:	232b      	movmi	r3, #43	; 0x2b
 80035ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ce:	f89a 3000 	ldrb.w	r3, [sl]
 80035d2:	2b2a      	cmp	r3, #42	; 0x2a
 80035d4:	d015      	beq.n	8003602 <_svfiprintf_r+0xf6>
 80035d6:	4654      	mov	r4, sl
 80035d8:	2000      	movs	r0, #0
 80035da:	f04f 0c0a 	mov.w	ip, #10
 80035de:	9a07      	ldr	r2, [sp, #28]
 80035e0:	4621      	mov	r1, r4
 80035e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035e6:	3b30      	subs	r3, #48	; 0x30
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	d94e      	bls.n	800368a <_svfiprintf_r+0x17e>
 80035ec:	b1b0      	cbz	r0, 800361c <_svfiprintf_r+0x110>
 80035ee:	9207      	str	r2, [sp, #28]
 80035f0:	e014      	b.n	800361c <_svfiprintf_r+0x110>
 80035f2:	eba0 0308 	sub.w	r3, r0, r8
 80035f6:	fa09 f303 	lsl.w	r3, r9, r3
 80035fa:	4313      	orrs	r3, r2
 80035fc:	46a2      	mov	sl, r4
 80035fe:	9304      	str	r3, [sp, #16]
 8003600:	e7d2      	b.n	80035a8 <_svfiprintf_r+0x9c>
 8003602:	9b03      	ldr	r3, [sp, #12]
 8003604:	1d19      	adds	r1, r3, #4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	9103      	str	r1, [sp, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	bfbb      	ittet	lt
 800360e:	425b      	neglt	r3, r3
 8003610:	f042 0202 	orrlt.w	r2, r2, #2
 8003614:	9307      	strge	r3, [sp, #28]
 8003616:	9307      	strlt	r3, [sp, #28]
 8003618:	bfb8      	it	lt
 800361a:	9204      	strlt	r2, [sp, #16]
 800361c:	7823      	ldrb	r3, [r4, #0]
 800361e:	2b2e      	cmp	r3, #46	; 0x2e
 8003620:	d10c      	bne.n	800363c <_svfiprintf_r+0x130>
 8003622:	7863      	ldrb	r3, [r4, #1]
 8003624:	2b2a      	cmp	r3, #42	; 0x2a
 8003626:	d135      	bne.n	8003694 <_svfiprintf_r+0x188>
 8003628:	9b03      	ldr	r3, [sp, #12]
 800362a:	3402      	adds	r4, #2
 800362c:	1d1a      	adds	r2, r3, #4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	9203      	str	r2, [sp, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfb8      	it	lt
 8003636:	f04f 33ff 	movlt.w	r3, #4294967295
 800363a:	9305      	str	r3, [sp, #20]
 800363c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003708 <_svfiprintf_r+0x1fc>
 8003640:	2203      	movs	r2, #3
 8003642:	4650      	mov	r0, sl
 8003644:	7821      	ldrb	r1, [r4, #0]
 8003646:	f000 f9ff 	bl	8003a48 <memchr>
 800364a:	b140      	cbz	r0, 800365e <_svfiprintf_r+0x152>
 800364c:	2340      	movs	r3, #64	; 0x40
 800364e:	eba0 000a 	sub.w	r0, r0, sl
 8003652:	fa03 f000 	lsl.w	r0, r3, r0
 8003656:	9b04      	ldr	r3, [sp, #16]
 8003658:	3401      	adds	r4, #1
 800365a:	4303      	orrs	r3, r0
 800365c:	9304      	str	r3, [sp, #16]
 800365e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003662:	2206      	movs	r2, #6
 8003664:	4825      	ldr	r0, [pc, #148]	; (80036fc <_svfiprintf_r+0x1f0>)
 8003666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800366a:	f000 f9ed 	bl	8003a48 <memchr>
 800366e:	2800      	cmp	r0, #0
 8003670:	d038      	beq.n	80036e4 <_svfiprintf_r+0x1d8>
 8003672:	4b23      	ldr	r3, [pc, #140]	; (8003700 <_svfiprintf_r+0x1f4>)
 8003674:	bb1b      	cbnz	r3, 80036be <_svfiprintf_r+0x1b2>
 8003676:	9b03      	ldr	r3, [sp, #12]
 8003678:	3307      	adds	r3, #7
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	3308      	adds	r3, #8
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003684:	4433      	add	r3, r6
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
 8003688:	e767      	b.n	800355a <_svfiprintf_r+0x4e>
 800368a:	460c      	mov	r4, r1
 800368c:	2001      	movs	r0, #1
 800368e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003692:	e7a5      	b.n	80035e0 <_svfiprintf_r+0xd4>
 8003694:	2300      	movs	r3, #0
 8003696:	f04f 0c0a 	mov.w	ip, #10
 800369a:	4619      	mov	r1, r3
 800369c:	3401      	adds	r4, #1
 800369e:	9305      	str	r3, [sp, #20]
 80036a0:	4620      	mov	r0, r4
 80036a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036a6:	3a30      	subs	r2, #48	; 0x30
 80036a8:	2a09      	cmp	r2, #9
 80036aa:	d903      	bls.n	80036b4 <_svfiprintf_r+0x1a8>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0c5      	beq.n	800363c <_svfiprintf_r+0x130>
 80036b0:	9105      	str	r1, [sp, #20]
 80036b2:	e7c3      	b.n	800363c <_svfiprintf_r+0x130>
 80036b4:	4604      	mov	r4, r0
 80036b6:	2301      	movs	r3, #1
 80036b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80036bc:	e7f0      	b.n	80036a0 <_svfiprintf_r+0x194>
 80036be:	ab03      	add	r3, sp, #12
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	462a      	mov	r2, r5
 80036c4:	4638      	mov	r0, r7
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <_svfiprintf_r+0x1f8>)
 80036c8:	a904      	add	r1, sp, #16
 80036ca:	f3af 8000 	nop.w
 80036ce:	1c42      	adds	r2, r0, #1
 80036d0:	4606      	mov	r6, r0
 80036d2:	d1d6      	bne.n	8003682 <_svfiprintf_r+0x176>
 80036d4:	89ab      	ldrh	r3, [r5, #12]
 80036d6:	065b      	lsls	r3, r3, #25
 80036d8:	f53f af2c 	bmi.w	8003534 <_svfiprintf_r+0x28>
 80036dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036de:	b01d      	add	sp, #116	; 0x74
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e4:	ab03      	add	r3, sp, #12
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	462a      	mov	r2, r5
 80036ea:	4638      	mov	r0, r7
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <_svfiprintf_r+0x1f8>)
 80036ee:	a904      	add	r1, sp, #16
 80036f0:	f000 f87c 	bl	80037ec <_printf_i>
 80036f4:	e7eb      	b.n	80036ce <_svfiprintf_r+0x1c2>
 80036f6:	bf00      	nop
 80036f8:	08004d30 	.word	0x08004d30
 80036fc:	08004d3a 	.word	0x08004d3a
 8003700:	00000000 	.word	0x00000000
 8003704:	08003455 	.word	0x08003455
 8003708:	08004d36 	.word	0x08004d36

0800370c <_printf_common>:
 800370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003710:	4616      	mov	r6, r2
 8003712:	4699      	mov	r9, r3
 8003714:	688a      	ldr	r2, [r1, #8]
 8003716:	690b      	ldr	r3, [r1, #16]
 8003718:	4607      	mov	r7, r0
 800371a:	4293      	cmp	r3, r2
 800371c:	bfb8      	it	lt
 800371e:	4613      	movlt	r3, r2
 8003720:	6033      	str	r3, [r6, #0]
 8003722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003726:	460c      	mov	r4, r1
 8003728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800372c:	b10a      	cbz	r2, 8003732 <_printf_common+0x26>
 800372e:	3301      	adds	r3, #1
 8003730:	6033      	str	r3, [r6, #0]
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	0699      	lsls	r1, r3, #26
 8003736:	bf42      	ittt	mi
 8003738:	6833      	ldrmi	r3, [r6, #0]
 800373a:	3302      	addmi	r3, #2
 800373c:	6033      	strmi	r3, [r6, #0]
 800373e:	6825      	ldr	r5, [r4, #0]
 8003740:	f015 0506 	ands.w	r5, r5, #6
 8003744:	d106      	bne.n	8003754 <_printf_common+0x48>
 8003746:	f104 0a19 	add.w	sl, r4, #25
 800374a:	68e3      	ldr	r3, [r4, #12]
 800374c:	6832      	ldr	r2, [r6, #0]
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	42ab      	cmp	r3, r5
 8003752:	dc28      	bgt.n	80037a6 <_printf_common+0x9a>
 8003754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003758:	1e13      	subs	r3, r2, #0
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	bf18      	it	ne
 800375e:	2301      	movne	r3, #1
 8003760:	0692      	lsls	r2, r2, #26
 8003762:	d42d      	bmi.n	80037c0 <_printf_common+0xb4>
 8003764:	4649      	mov	r1, r9
 8003766:	4638      	mov	r0, r7
 8003768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800376c:	47c0      	blx	r8
 800376e:	3001      	adds	r0, #1
 8003770:	d020      	beq.n	80037b4 <_printf_common+0xa8>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	68e5      	ldr	r5, [r4, #12]
 8003776:	f003 0306 	and.w	r3, r3, #6
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf18      	it	ne
 800377e:	2500      	movne	r5, #0
 8003780:	6832      	ldr	r2, [r6, #0]
 8003782:	f04f 0600 	mov.w	r6, #0
 8003786:	68a3      	ldr	r3, [r4, #8]
 8003788:	bf08      	it	eq
 800378a:	1aad      	subeq	r5, r5, r2
 800378c:	6922      	ldr	r2, [r4, #16]
 800378e:	bf08      	it	eq
 8003790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003794:	4293      	cmp	r3, r2
 8003796:	bfc4      	itt	gt
 8003798:	1a9b      	subgt	r3, r3, r2
 800379a:	18ed      	addgt	r5, r5, r3
 800379c:	341a      	adds	r4, #26
 800379e:	42b5      	cmp	r5, r6
 80037a0:	d11a      	bne.n	80037d8 <_printf_common+0xcc>
 80037a2:	2000      	movs	r0, #0
 80037a4:	e008      	b.n	80037b8 <_printf_common+0xac>
 80037a6:	2301      	movs	r3, #1
 80037a8:	4652      	mov	r2, sl
 80037aa:	4649      	mov	r1, r9
 80037ac:	4638      	mov	r0, r7
 80037ae:	47c0      	blx	r8
 80037b0:	3001      	adds	r0, #1
 80037b2:	d103      	bne.n	80037bc <_printf_common+0xb0>
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295
 80037b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037bc:	3501      	adds	r5, #1
 80037be:	e7c4      	b.n	800374a <_printf_common+0x3e>
 80037c0:	2030      	movs	r0, #48	; 0x30
 80037c2:	18e1      	adds	r1, r4, r3
 80037c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037ce:	4422      	add	r2, r4
 80037d0:	3302      	adds	r3, #2
 80037d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037d6:	e7c5      	b.n	8003764 <_printf_common+0x58>
 80037d8:	2301      	movs	r3, #1
 80037da:	4622      	mov	r2, r4
 80037dc:	4649      	mov	r1, r9
 80037de:	4638      	mov	r0, r7
 80037e0:	47c0      	blx	r8
 80037e2:	3001      	adds	r0, #1
 80037e4:	d0e6      	beq.n	80037b4 <_printf_common+0xa8>
 80037e6:	3601      	adds	r6, #1
 80037e8:	e7d9      	b.n	800379e <_printf_common+0x92>
	...

080037ec <_printf_i>:
 80037ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f0:	460c      	mov	r4, r1
 80037f2:	7e27      	ldrb	r7, [r4, #24]
 80037f4:	4691      	mov	r9, r2
 80037f6:	2f78      	cmp	r7, #120	; 0x78
 80037f8:	4680      	mov	r8, r0
 80037fa:	469a      	mov	sl, r3
 80037fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003802:	d807      	bhi.n	8003814 <_printf_i+0x28>
 8003804:	2f62      	cmp	r7, #98	; 0x62
 8003806:	d80a      	bhi.n	800381e <_printf_i+0x32>
 8003808:	2f00      	cmp	r7, #0
 800380a:	f000 80d9 	beq.w	80039c0 <_printf_i+0x1d4>
 800380e:	2f58      	cmp	r7, #88	; 0x58
 8003810:	f000 80a4 	beq.w	800395c <_printf_i+0x170>
 8003814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800381c:	e03a      	b.n	8003894 <_printf_i+0xa8>
 800381e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003822:	2b15      	cmp	r3, #21
 8003824:	d8f6      	bhi.n	8003814 <_printf_i+0x28>
 8003826:	a001      	add	r0, pc, #4	; (adr r0, 800382c <_printf_i+0x40>)
 8003828:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800382c:	08003885 	.word	0x08003885
 8003830:	08003899 	.word	0x08003899
 8003834:	08003815 	.word	0x08003815
 8003838:	08003815 	.word	0x08003815
 800383c:	08003815 	.word	0x08003815
 8003840:	08003815 	.word	0x08003815
 8003844:	08003899 	.word	0x08003899
 8003848:	08003815 	.word	0x08003815
 800384c:	08003815 	.word	0x08003815
 8003850:	08003815 	.word	0x08003815
 8003854:	08003815 	.word	0x08003815
 8003858:	080039a7 	.word	0x080039a7
 800385c:	080038c9 	.word	0x080038c9
 8003860:	08003989 	.word	0x08003989
 8003864:	08003815 	.word	0x08003815
 8003868:	08003815 	.word	0x08003815
 800386c:	080039c9 	.word	0x080039c9
 8003870:	08003815 	.word	0x08003815
 8003874:	080038c9 	.word	0x080038c9
 8003878:	08003815 	.word	0x08003815
 800387c:	08003815 	.word	0x08003815
 8003880:	08003991 	.word	0x08003991
 8003884:	680b      	ldr	r3, [r1, #0]
 8003886:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800388a:	1d1a      	adds	r2, r3, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	600a      	str	r2, [r1, #0]
 8003890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003894:	2301      	movs	r3, #1
 8003896:	e0a4      	b.n	80039e2 <_printf_i+0x1f6>
 8003898:	6825      	ldr	r5, [r4, #0]
 800389a:	6808      	ldr	r0, [r1, #0]
 800389c:	062e      	lsls	r6, r5, #24
 800389e:	f100 0304 	add.w	r3, r0, #4
 80038a2:	d50a      	bpl.n	80038ba <_printf_i+0xce>
 80038a4:	6805      	ldr	r5, [r0, #0]
 80038a6:	600b      	str	r3, [r1, #0]
 80038a8:	2d00      	cmp	r5, #0
 80038aa:	da03      	bge.n	80038b4 <_printf_i+0xc8>
 80038ac:	232d      	movs	r3, #45	; 0x2d
 80038ae:	426d      	negs	r5, r5
 80038b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b4:	230a      	movs	r3, #10
 80038b6:	485e      	ldr	r0, [pc, #376]	; (8003a30 <_printf_i+0x244>)
 80038b8:	e019      	b.n	80038ee <_printf_i+0x102>
 80038ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038be:	6805      	ldr	r5, [r0, #0]
 80038c0:	600b      	str	r3, [r1, #0]
 80038c2:	bf18      	it	ne
 80038c4:	b22d      	sxthne	r5, r5
 80038c6:	e7ef      	b.n	80038a8 <_printf_i+0xbc>
 80038c8:	680b      	ldr	r3, [r1, #0]
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	1d18      	adds	r0, r3, #4
 80038ce:	6008      	str	r0, [r1, #0]
 80038d0:	0628      	lsls	r0, r5, #24
 80038d2:	d501      	bpl.n	80038d8 <_printf_i+0xec>
 80038d4:	681d      	ldr	r5, [r3, #0]
 80038d6:	e002      	b.n	80038de <_printf_i+0xf2>
 80038d8:	0669      	lsls	r1, r5, #25
 80038da:	d5fb      	bpl.n	80038d4 <_printf_i+0xe8>
 80038dc:	881d      	ldrh	r5, [r3, #0]
 80038de:	2f6f      	cmp	r7, #111	; 0x6f
 80038e0:	bf0c      	ite	eq
 80038e2:	2308      	moveq	r3, #8
 80038e4:	230a      	movne	r3, #10
 80038e6:	4852      	ldr	r0, [pc, #328]	; (8003a30 <_printf_i+0x244>)
 80038e8:	2100      	movs	r1, #0
 80038ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038ee:	6866      	ldr	r6, [r4, #4]
 80038f0:	2e00      	cmp	r6, #0
 80038f2:	bfa8      	it	ge
 80038f4:	6821      	ldrge	r1, [r4, #0]
 80038f6:	60a6      	str	r6, [r4, #8]
 80038f8:	bfa4      	itt	ge
 80038fa:	f021 0104 	bicge.w	r1, r1, #4
 80038fe:	6021      	strge	r1, [r4, #0]
 8003900:	b90d      	cbnz	r5, 8003906 <_printf_i+0x11a>
 8003902:	2e00      	cmp	r6, #0
 8003904:	d04d      	beq.n	80039a2 <_printf_i+0x1b6>
 8003906:	4616      	mov	r6, r2
 8003908:	fbb5 f1f3 	udiv	r1, r5, r3
 800390c:	fb03 5711 	mls	r7, r3, r1, r5
 8003910:	5dc7      	ldrb	r7, [r0, r7]
 8003912:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003916:	462f      	mov	r7, r5
 8003918:	42bb      	cmp	r3, r7
 800391a:	460d      	mov	r5, r1
 800391c:	d9f4      	bls.n	8003908 <_printf_i+0x11c>
 800391e:	2b08      	cmp	r3, #8
 8003920:	d10b      	bne.n	800393a <_printf_i+0x14e>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	07df      	lsls	r7, r3, #31
 8003926:	d508      	bpl.n	800393a <_printf_i+0x14e>
 8003928:	6923      	ldr	r3, [r4, #16]
 800392a:	6861      	ldr	r1, [r4, #4]
 800392c:	4299      	cmp	r1, r3
 800392e:	bfde      	ittt	le
 8003930:	2330      	movle	r3, #48	; 0x30
 8003932:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003936:	f106 36ff 	addle.w	r6, r6, #4294967295
 800393a:	1b92      	subs	r2, r2, r6
 800393c:	6122      	str	r2, [r4, #16]
 800393e:	464b      	mov	r3, r9
 8003940:	4621      	mov	r1, r4
 8003942:	4640      	mov	r0, r8
 8003944:	f8cd a000 	str.w	sl, [sp]
 8003948:	aa03      	add	r2, sp, #12
 800394a:	f7ff fedf 	bl	800370c <_printf_common>
 800394e:	3001      	adds	r0, #1
 8003950:	d14c      	bne.n	80039ec <_printf_i+0x200>
 8003952:	f04f 30ff 	mov.w	r0, #4294967295
 8003956:	b004      	add	sp, #16
 8003958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800395c:	4834      	ldr	r0, [pc, #208]	; (8003a30 <_printf_i+0x244>)
 800395e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003962:	680e      	ldr	r6, [r1, #0]
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	f856 5b04 	ldr.w	r5, [r6], #4
 800396a:	061f      	lsls	r7, r3, #24
 800396c:	600e      	str	r6, [r1, #0]
 800396e:	d514      	bpl.n	800399a <_printf_i+0x1ae>
 8003970:	07d9      	lsls	r1, r3, #31
 8003972:	bf44      	itt	mi
 8003974:	f043 0320 	orrmi.w	r3, r3, #32
 8003978:	6023      	strmi	r3, [r4, #0]
 800397a:	b91d      	cbnz	r5, 8003984 <_printf_i+0x198>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	f023 0320 	bic.w	r3, r3, #32
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	2310      	movs	r3, #16
 8003986:	e7af      	b.n	80038e8 <_printf_i+0xfc>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	f043 0320 	orr.w	r3, r3, #32
 800398e:	6023      	str	r3, [r4, #0]
 8003990:	2378      	movs	r3, #120	; 0x78
 8003992:	4828      	ldr	r0, [pc, #160]	; (8003a34 <_printf_i+0x248>)
 8003994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003998:	e7e3      	b.n	8003962 <_printf_i+0x176>
 800399a:	065e      	lsls	r6, r3, #25
 800399c:	bf48      	it	mi
 800399e:	b2ad      	uxthmi	r5, r5
 80039a0:	e7e6      	b.n	8003970 <_printf_i+0x184>
 80039a2:	4616      	mov	r6, r2
 80039a4:	e7bb      	b.n	800391e <_printf_i+0x132>
 80039a6:	680b      	ldr	r3, [r1, #0]
 80039a8:	6826      	ldr	r6, [r4, #0]
 80039aa:	1d1d      	adds	r5, r3, #4
 80039ac:	6960      	ldr	r0, [r4, #20]
 80039ae:	600d      	str	r5, [r1, #0]
 80039b0:	0635      	lsls	r5, r6, #24
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	d501      	bpl.n	80039ba <_printf_i+0x1ce>
 80039b6:	6018      	str	r0, [r3, #0]
 80039b8:	e002      	b.n	80039c0 <_printf_i+0x1d4>
 80039ba:	0671      	lsls	r1, r6, #25
 80039bc:	d5fb      	bpl.n	80039b6 <_printf_i+0x1ca>
 80039be:	8018      	strh	r0, [r3, #0]
 80039c0:	2300      	movs	r3, #0
 80039c2:	4616      	mov	r6, r2
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	e7ba      	b.n	800393e <_printf_i+0x152>
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	1d1a      	adds	r2, r3, #4
 80039cc:	600a      	str	r2, [r1, #0]
 80039ce:	681e      	ldr	r6, [r3, #0]
 80039d0:	2100      	movs	r1, #0
 80039d2:	4630      	mov	r0, r6
 80039d4:	6862      	ldr	r2, [r4, #4]
 80039d6:	f000 f837 	bl	8003a48 <memchr>
 80039da:	b108      	cbz	r0, 80039e0 <_printf_i+0x1f4>
 80039dc:	1b80      	subs	r0, r0, r6
 80039de:	6060      	str	r0, [r4, #4]
 80039e0:	6863      	ldr	r3, [r4, #4]
 80039e2:	6123      	str	r3, [r4, #16]
 80039e4:	2300      	movs	r3, #0
 80039e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ea:	e7a8      	b.n	800393e <_printf_i+0x152>
 80039ec:	4632      	mov	r2, r6
 80039ee:	4649      	mov	r1, r9
 80039f0:	4640      	mov	r0, r8
 80039f2:	6923      	ldr	r3, [r4, #16]
 80039f4:	47d0      	blx	sl
 80039f6:	3001      	adds	r0, #1
 80039f8:	d0ab      	beq.n	8003952 <_printf_i+0x166>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	079b      	lsls	r3, r3, #30
 80039fe:	d413      	bmi.n	8003a28 <_printf_i+0x23c>
 8003a00:	68e0      	ldr	r0, [r4, #12]
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	4298      	cmp	r0, r3
 8003a06:	bfb8      	it	lt
 8003a08:	4618      	movlt	r0, r3
 8003a0a:	e7a4      	b.n	8003956 <_printf_i+0x16a>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4632      	mov	r2, r6
 8003a10:	4649      	mov	r1, r9
 8003a12:	4640      	mov	r0, r8
 8003a14:	47d0      	blx	sl
 8003a16:	3001      	adds	r0, #1
 8003a18:	d09b      	beq.n	8003952 <_printf_i+0x166>
 8003a1a:	3501      	adds	r5, #1
 8003a1c:	68e3      	ldr	r3, [r4, #12]
 8003a1e:	9903      	ldr	r1, [sp, #12]
 8003a20:	1a5b      	subs	r3, r3, r1
 8003a22:	42ab      	cmp	r3, r5
 8003a24:	dcf2      	bgt.n	8003a0c <_printf_i+0x220>
 8003a26:	e7eb      	b.n	8003a00 <_printf_i+0x214>
 8003a28:	2500      	movs	r5, #0
 8003a2a:	f104 0619 	add.w	r6, r4, #25
 8003a2e:	e7f5      	b.n	8003a1c <_printf_i+0x230>
 8003a30:	08004d41 	.word	0x08004d41
 8003a34:	08004d52 	.word	0x08004d52

08003a38 <nan>:
 8003a38:	2000      	movs	r0, #0
 8003a3a:	4901      	ldr	r1, [pc, #4]	; (8003a40 <nan+0x8>)
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	7ff80000 	.word	0x7ff80000

08003a44 <__retarget_lock_acquire_recursive>:
 8003a44:	4770      	bx	lr

08003a46 <__retarget_lock_release_recursive>:
 8003a46:	4770      	bx	lr

08003a48 <memchr>:
 8003a48:	4603      	mov	r3, r0
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	b2c9      	uxtb	r1, r1
 8003a4e:	4402      	add	r2, r0
 8003a50:	4293      	cmp	r3, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	d101      	bne.n	8003a5a <memchr+0x12>
 8003a56:	2000      	movs	r0, #0
 8003a58:	e003      	b.n	8003a62 <memchr+0x1a>
 8003a5a:	7804      	ldrb	r4, [r0, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	428c      	cmp	r4, r1
 8003a60:	d1f6      	bne.n	8003a50 <memchr+0x8>
 8003a62:	bd10      	pop	{r4, pc}

08003a64 <memmove>:
 8003a64:	4288      	cmp	r0, r1
 8003a66:	b510      	push	{r4, lr}
 8003a68:	eb01 0402 	add.w	r4, r1, r2
 8003a6c:	d902      	bls.n	8003a74 <memmove+0x10>
 8003a6e:	4284      	cmp	r4, r0
 8003a70:	4623      	mov	r3, r4
 8003a72:	d807      	bhi.n	8003a84 <memmove+0x20>
 8003a74:	1e43      	subs	r3, r0, #1
 8003a76:	42a1      	cmp	r1, r4
 8003a78:	d008      	beq.n	8003a8c <memmove+0x28>
 8003a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a82:	e7f8      	b.n	8003a76 <memmove+0x12>
 8003a84:	4601      	mov	r1, r0
 8003a86:	4402      	add	r2, r0
 8003a88:	428a      	cmp	r2, r1
 8003a8a:	d100      	bne.n	8003a8e <memmove+0x2a>
 8003a8c:	bd10      	pop	{r4, pc}
 8003a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a96:	e7f7      	b.n	8003a88 <memmove+0x24>

08003a98 <_realloc_r>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	4607      	mov	r7, r0
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	460e      	mov	r6, r1
 8003aa0:	b921      	cbnz	r1, 8003aac <_realloc_r+0x14>
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003aa8:	f7ff bc18 	b.w	80032dc <_malloc_r>
 8003aac:	b922      	cbnz	r2, 8003ab8 <_realloc_r+0x20>
 8003aae:	f7ff fbc9 	bl	8003244 <_free_r>
 8003ab2:	4625      	mov	r5, r4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab8:	f000 f814 	bl	8003ae4 <_malloc_usable_size_r>
 8003abc:	42a0      	cmp	r0, r4
 8003abe:	d20f      	bcs.n	8003ae0 <_realloc_r+0x48>
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	f7ff fc0a 	bl	80032dc <_malloc_r>
 8003ac8:	4605      	mov	r5, r0
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d0f2      	beq.n	8003ab4 <_realloc_r+0x1c>
 8003ace:	4631      	mov	r1, r6
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	f7ff fca4 	bl	800341e <memcpy>
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	4638      	mov	r0, r7
 8003ada:	f7ff fbb3 	bl	8003244 <_free_r>
 8003ade:	e7e9      	b.n	8003ab4 <_realloc_r+0x1c>
 8003ae0:	4635      	mov	r5, r6
 8003ae2:	e7e7      	b.n	8003ab4 <_realloc_r+0x1c>

08003ae4 <_malloc_usable_size_r>:
 8003ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae8:	1f18      	subs	r0, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bfbc      	itt	lt
 8003aee:	580b      	ldrlt	r3, [r1, r0]
 8003af0:	18c0      	addlt	r0, r0, r3
 8003af2:	4770      	bx	lr

08003af4 <pow>:
 8003af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af8:	461f      	mov	r7, r3
 8003afa:	4680      	mov	r8, r0
 8003afc:	4689      	mov	r9, r1
 8003afe:	4616      	mov	r6, r2
 8003b00:	f000 f8a6 	bl	8003c50 <__ieee754_pow>
 8003b04:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <pow+0x148>)
 8003b06:	4604      	mov	r4, r0
 8003b08:	f993 3000 	ldrsb.w	r3, [r3]
 8003b0c:	460d      	mov	r5, r1
 8003b0e:	3301      	adds	r3, #1
 8003b10:	d015      	beq.n	8003b3e <pow+0x4a>
 8003b12:	4632      	mov	r2, r6
 8003b14:	463b      	mov	r3, r7
 8003b16:	4630      	mov	r0, r6
 8003b18:	4639      	mov	r1, r7
 8003b1a:	f7fc ff77 	bl	8000a0c <__aeabi_dcmpun>
 8003b1e:	b970      	cbnz	r0, 8003b3e <pow+0x4a>
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	4640      	mov	r0, r8
 8003b26:	4649      	mov	r1, r9
 8003b28:	f7fc ff70 	bl	8000a0c <__aeabi_dcmpun>
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2300      	movs	r3, #0
 8003b30:	b148      	cbz	r0, 8003b46 <pow+0x52>
 8003b32:	4630      	mov	r0, r6
 8003b34:	4639      	mov	r1, r7
 8003b36:	f7fc ff37 	bl	80009a8 <__aeabi_dcmpeq>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d17b      	bne.n	8003c36 <pow+0x142>
 8003b3e:	4620      	mov	r0, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b46:	4640      	mov	r0, r8
 8003b48:	4649      	mov	r1, r9
 8003b4a:	f7fc ff2d 	bl	80009a8 <__aeabi_dcmpeq>
 8003b4e:	b1e0      	cbz	r0, 8003b8a <pow+0x96>
 8003b50:	2200      	movs	r2, #0
 8003b52:	2300      	movs	r3, #0
 8003b54:	4630      	mov	r0, r6
 8003b56:	4639      	mov	r1, r7
 8003b58:	f7fc ff26 	bl	80009a8 <__aeabi_dcmpeq>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d16a      	bne.n	8003c36 <pow+0x142>
 8003b60:	4630      	mov	r0, r6
 8003b62:	4639      	mov	r1, r7
 8003b64:	f000 fe39 	bl	80047da <finite>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d0e8      	beq.n	8003b3e <pow+0x4a>
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2300      	movs	r3, #0
 8003b70:	4630      	mov	r0, r6
 8003b72:	4639      	mov	r1, r7
 8003b74:	f7fc ff22 	bl	80009bc <__aeabi_dcmplt>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d0e0      	beq.n	8003b3e <pow+0x4a>
 8003b7c:	f7ff fb30 	bl	80031e0 <__errno>
 8003b80:	2321      	movs	r3, #33	; 0x21
 8003b82:	2400      	movs	r4, #0
 8003b84:	6003      	str	r3, [r0, #0]
 8003b86:	4d2e      	ldr	r5, [pc, #184]	; (8003c40 <pow+0x14c>)
 8003b88:	e7d9      	b.n	8003b3e <pow+0x4a>
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	f000 fe24 	bl	80047da <finite>
 8003b92:	bba8      	cbnz	r0, 8003c00 <pow+0x10c>
 8003b94:	4640      	mov	r0, r8
 8003b96:	4649      	mov	r1, r9
 8003b98:	f000 fe1f 	bl	80047da <finite>
 8003b9c:	b380      	cbz	r0, 8003c00 <pow+0x10c>
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	4639      	mov	r1, r7
 8003ba2:	f000 fe1a 	bl	80047da <finite>
 8003ba6:	b358      	cbz	r0, 8003c00 <pow+0x10c>
 8003ba8:	4622      	mov	r2, r4
 8003baa:	462b      	mov	r3, r5
 8003bac:	4620      	mov	r0, r4
 8003bae:	4629      	mov	r1, r5
 8003bb0:	f7fc ff2c 	bl	8000a0c <__aeabi_dcmpun>
 8003bb4:	b160      	cbz	r0, 8003bd0 <pow+0xdc>
 8003bb6:	f7ff fb13 	bl	80031e0 <__errno>
 8003bba:	2321      	movs	r3, #33	; 0x21
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6003      	str	r3, [r0, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fc fdb1 	bl	800072c <__aeabi_ddiv>
 8003bca:	4604      	mov	r4, r0
 8003bcc:	460d      	mov	r5, r1
 8003bce:	e7b6      	b.n	8003b3e <pow+0x4a>
 8003bd0:	f7ff fb06 	bl	80031e0 <__errno>
 8003bd4:	2322      	movs	r3, #34	; 0x22
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	6003      	str	r3, [r0, #0]
 8003bda:	4649      	mov	r1, r9
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4640      	mov	r0, r8
 8003be0:	f7fc feec 	bl	80009bc <__aeabi_dcmplt>
 8003be4:	2400      	movs	r4, #0
 8003be6:	b148      	cbz	r0, 8003bfc <pow+0x108>
 8003be8:	4630      	mov	r0, r6
 8003bea:	4639      	mov	r1, r7
 8003bec:	f000 fdfc 	bl	80047e8 <rint>
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	f7fc fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d0c4      	beq.n	8003b86 <pow+0x92>
 8003bfc:	4d11      	ldr	r5, [pc, #68]	; (8003c44 <pow+0x150>)
 8003bfe:	e79e      	b.n	8003b3e <pow+0x4a>
 8003c00:	2200      	movs	r2, #0
 8003c02:	2300      	movs	r3, #0
 8003c04:	4620      	mov	r0, r4
 8003c06:	4629      	mov	r1, r5
 8003c08:	f7fc fece 	bl	80009a8 <__aeabi_dcmpeq>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d096      	beq.n	8003b3e <pow+0x4a>
 8003c10:	4640      	mov	r0, r8
 8003c12:	4649      	mov	r1, r9
 8003c14:	f000 fde1 	bl	80047da <finite>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d090      	beq.n	8003b3e <pow+0x4a>
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	4639      	mov	r1, r7
 8003c20:	f000 fddb 	bl	80047da <finite>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d08a      	beq.n	8003b3e <pow+0x4a>
 8003c28:	f7ff fada 	bl	80031e0 <__errno>
 8003c2c:	2322      	movs	r3, #34	; 0x22
 8003c2e:	2400      	movs	r4, #0
 8003c30:	2500      	movs	r5, #0
 8003c32:	6003      	str	r3, [r0, #0]
 8003c34:	e783      	b.n	8003b3e <pow+0x4a>
 8003c36:	2400      	movs	r4, #0
 8003c38:	4d03      	ldr	r5, [pc, #12]	; (8003c48 <pow+0x154>)
 8003c3a:	e780      	b.n	8003b3e <pow+0x4a>
 8003c3c:	20000074 	.word	0x20000074
 8003c40:	fff00000 	.word	0xfff00000
 8003c44:	7ff00000 	.word	0x7ff00000
 8003c48:	3ff00000 	.word	0x3ff00000
 8003c4c:	00000000 	.word	0x00000000

08003c50 <__ieee754_pow>:
 8003c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	b093      	sub	sp, #76	; 0x4c
 8003c56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c5a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8003c5e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003c62:	ea55 0302 	orrs.w	r3, r5, r2
 8003c66:	4607      	mov	r7, r0
 8003c68:	4688      	mov	r8, r1
 8003c6a:	f000 84bf 	beq.w	80045ec <__ieee754_pow+0x99c>
 8003c6e:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <__ieee754_pow+0x218>)
 8003c70:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003c74:	429c      	cmp	r4, r3
 8003c76:	4689      	mov	r9, r1
 8003c78:	4682      	mov	sl, r0
 8003c7a:	dc09      	bgt.n	8003c90 <__ieee754_pow+0x40>
 8003c7c:	d103      	bne.n	8003c86 <__ieee754_pow+0x36>
 8003c7e:	b978      	cbnz	r0, 8003ca0 <__ieee754_pow+0x50>
 8003c80:	42a5      	cmp	r5, r4
 8003c82:	dd02      	ble.n	8003c8a <__ieee754_pow+0x3a>
 8003c84:	e00c      	b.n	8003ca0 <__ieee754_pow+0x50>
 8003c86:	429d      	cmp	r5, r3
 8003c88:	dc02      	bgt.n	8003c90 <__ieee754_pow+0x40>
 8003c8a:	429d      	cmp	r5, r3
 8003c8c:	d10e      	bne.n	8003cac <__ieee754_pow+0x5c>
 8003c8e:	b16a      	cbz	r2, 8003cac <__ieee754_pow+0x5c>
 8003c90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003c94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003c98:	ea54 030a 	orrs.w	r3, r4, sl
 8003c9c:	f000 84a6 	beq.w	80045ec <__ieee754_pow+0x99c>
 8003ca0:	4872      	ldr	r0, [pc, #456]	; (8003e6c <__ieee754_pow+0x21c>)
 8003ca2:	b013      	add	sp, #76	; 0x4c
 8003ca4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	f7ff bec6 	b.w	8003a38 <nan>
 8003cac:	f1b9 0f00 	cmp.w	r9, #0
 8003cb0:	da39      	bge.n	8003d26 <__ieee754_pow+0xd6>
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <__ieee754_pow+0x220>)
 8003cb4:	429d      	cmp	r5, r3
 8003cb6:	dc54      	bgt.n	8003d62 <__ieee754_pow+0x112>
 8003cb8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003cbc:	429d      	cmp	r5, r3
 8003cbe:	f340 84a6 	ble.w	800460e <__ieee754_pow+0x9be>
 8003cc2:	152b      	asrs	r3, r5, #20
 8003cc4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003cc8:	2b14      	cmp	r3, #20
 8003cca:	dd0f      	ble.n	8003cec <__ieee754_pow+0x9c>
 8003ccc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003cd0:	fa22 f103 	lsr.w	r1, r2, r3
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	f040 8498 	bne.w	800460e <__ieee754_pow+0x9be>
 8003cde:	f001 0101 	and.w	r1, r1, #1
 8003ce2:	f1c1 0302 	rsb	r3, r1, #2
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	b182      	cbz	r2, 8003d0c <__ieee754_pow+0xbc>
 8003cea:	e05e      	b.n	8003daa <__ieee754_pow+0x15a>
 8003cec:	2a00      	cmp	r2, #0
 8003cee:	d15a      	bne.n	8003da6 <__ieee754_pow+0x156>
 8003cf0:	f1c3 0314 	rsb	r3, r3, #20
 8003cf4:	fa45 f103 	asr.w	r1, r5, r3
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	42ab      	cmp	r3, r5
 8003cfe:	f040 8483 	bne.w	8004608 <__ieee754_pow+0x9b8>
 8003d02:	f001 0101 	and.w	r1, r1, #1
 8003d06:	f1c1 0302 	rsb	r3, r1, #2
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	4b59      	ldr	r3, [pc, #356]	; (8003e74 <__ieee754_pow+0x224>)
 8003d0e:	429d      	cmp	r5, r3
 8003d10:	d130      	bne.n	8003d74 <__ieee754_pow+0x124>
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	f280 8474 	bge.w	8004600 <__ieee754_pow+0x9b0>
 8003d18:	463a      	mov	r2, r7
 8003d1a:	4643      	mov	r3, r8
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	4955      	ldr	r1, [pc, #340]	; (8003e74 <__ieee754_pow+0x224>)
 8003d20:	f7fc fd04 	bl	800072c <__aeabi_ddiv>
 8003d24:	e02f      	b.n	8003d86 <__ieee754_pow+0x136>
 8003d26:	2300      	movs	r3, #0
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	d13d      	bne.n	8003daa <__ieee754_pow+0x15a>
 8003d2e:	4b4e      	ldr	r3, [pc, #312]	; (8003e68 <__ieee754_pow+0x218>)
 8003d30:	429d      	cmp	r5, r3
 8003d32:	d1eb      	bne.n	8003d0c <__ieee754_pow+0xbc>
 8003d34:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003d38:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003d3c:	ea53 030a 	orrs.w	r3, r3, sl
 8003d40:	f000 8454 	beq.w	80045ec <__ieee754_pow+0x99c>
 8003d44:	4b4c      	ldr	r3, [pc, #304]	; (8003e78 <__ieee754_pow+0x228>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	dd0d      	ble.n	8003d66 <__ieee754_pow+0x116>
 8003d4a:	2e00      	cmp	r6, #0
 8003d4c:	f280 8454 	bge.w	80045f8 <__ieee754_pow+0x9a8>
 8003d50:	f04f 0b00 	mov.w	fp, #0
 8003d54:	f04f 0c00 	mov.w	ip, #0
 8003d58:	4658      	mov	r0, fp
 8003d5a:	4661      	mov	r1, ip
 8003d5c:	b013      	add	sp, #76	; 0x4c
 8003d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d62:	2302      	movs	r3, #2
 8003d64:	e7e0      	b.n	8003d28 <__ieee754_pow+0xd8>
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	daf2      	bge.n	8003d50 <__ieee754_pow+0x100>
 8003d6a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003d6e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003d72:	e7f1      	b.n	8003d58 <__ieee754_pow+0x108>
 8003d74:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003d78:	d108      	bne.n	8003d8c <__ieee754_pow+0x13c>
 8003d7a:	463a      	mov	r2, r7
 8003d7c:	4643      	mov	r3, r8
 8003d7e:	4638      	mov	r0, r7
 8003d80:	4641      	mov	r1, r8
 8003d82:	f7fc fba9 	bl	80004d8 <__aeabi_dmul>
 8003d86:	4683      	mov	fp, r0
 8003d88:	468c      	mov	ip, r1
 8003d8a:	e7e5      	b.n	8003d58 <__ieee754_pow+0x108>
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <__ieee754_pow+0x22c>)
 8003d8e:	429e      	cmp	r6, r3
 8003d90:	d10b      	bne.n	8003daa <__ieee754_pow+0x15a>
 8003d92:	f1b9 0f00 	cmp.w	r9, #0
 8003d96:	db08      	blt.n	8003daa <__ieee754_pow+0x15a>
 8003d98:	4638      	mov	r0, r7
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	b013      	add	sp, #76	; 0x4c
 8003d9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da2:	f000 bc6b 	b.w	800467c <__ieee754_sqrt>
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4638      	mov	r0, r7
 8003dac:	4641      	mov	r1, r8
 8003dae:	f000 fd11 	bl	80047d4 <fabs>
 8003db2:	4683      	mov	fp, r0
 8003db4:	468c      	mov	ip, r1
 8003db6:	f1ba 0f00 	cmp.w	sl, #0
 8003dba:	d129      	bne.n	8003e10 <__ieee754_pow+0x1c0>
 8003dbc:	b124      	cbz	r4, 8003dc8 <__ieee754_pow+0x178>
 8003dbe:	4b2d      	ldr	r3, [pc, #180]	; (8003e74 <__ieee754_pow+0x224>)
 8003dc0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d123      	bne.n	8003e10 <__ieee754_pow+0x1c0>
 8003dc8:	2e00      	cmp	r6, #0
 8003dca:	da07      	bge.n	8003ddc <__ieee754_pow+0x18c>
 8003dcc:	465a      	mov	r2, fp
 8003dce:	4663      	mov	r3, ip
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	4928      	ldr	r1, [pc, #160]	; (8003e74 <__ieee754_pow+0x224>)
 8003dd4:	f7fc fcaa 	bl	800072c <__aeabi_ddiv>
 8003dd8:	4683      	mov	fp, r0
 8003dda:	468c      	mov	ip, r1
 8003ddc:	f1b9 0f00 	cmp.w	r9, #0
 8003de0:	daba      	bge.n	8003d58 <__ieee754_pow+0x108>
 8003de2:	9b00      	ldr	r3, [sp, #0]
 8003de4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003de8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003dec:	4323      	orrs	r3, r4
 8003dee:	d108      	bne.n	8003e02 <__ieee754_pow+0x1b2>
 8003df0:	465a      	mov	r2, fp
 8003df2:	4663      	mov	r3, ip
 8003df4:	4658      	mov	r0, fp
 8003df6:	4661      	mov	r1, ip
 8003df8:	f7fc f9b6 	bl	8000168 <__aeabi_dsub>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	e78e      	b.n	8003d20 <__ieee754_pow+0xd0>
 8003e02:	9b00      	ldr	r3, [sp, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d1a7      	bne.n	8003d58 <__ieee754_pow+0x108>
 8003e08:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003e0c:	469c      	mov	ip, r3
 8003e0e:	e7a3      	b.n	8003d58 <__ieee754_pow+0x108>
 8003e10:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8003e14:	3b01      	subs	r3, #1
 8003e16:	930c      	str	r3, [sp, #48]	; 0x30
 8003e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e1a:	9b00      	ldr	r3, [sp, #0]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	d104      	bne.n	8003e2a <__ieee754_pow+0x1da>
 8003e20:	463a      	mov	r2, r7
 8003e22:	4643      	mov	r3, r8
 8003e24:	4638      	mov	r0, r7
 8003e26:	4641      	mov	r1, r8
 8003e28:	e7e6      	b.n	8003df8 <__ieee754_pow+0x1a8>
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <__ieee754_pow+0x230>)
 8003e2c:	429d      	cmp	r5, r3
 8003e2e:	f340 80f9 	ble.w	8004024 <__ieee754_pow+0x3d4>
 8003e32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003e36:	429d      	cmp	r5, r3
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <__ieee754_pow+0x228>)
 8003e3a:	dd09      	ble.n	8003e50 <__ieee754_pow+0x200>
 8003e3c:	429c      	cmp	r4, r3
 8003e3e:	dc0c      	bgt.n	8003e5a <__ieee754_pow+0x20a>
 8003e40:	2e00      	cmp	r6, #0
 8003e42:	da85      	bge.n	8003d50 <__ieee754_pow+0x100>
 8003e44:	a306      	add	r3, pc, #24	; (adr r3, 8003e60 <__ieee754_pow+0x210>)
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	e798      	b.n	8003d82 <__ieee754_pow+0x132>
 8003e50:	429c      	cmp	r4, r3
 8003e52:	dbf5      	blt.n	8003e40 <__ieee754_pow+0x1f0>
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <__ieee754_pow+0x224>)
 8003e56:	429c      	cmp	r4, r3
 8003e58:	dd14      	ble.n	8003e84 <__ieee754_pow+0x234>
 8003e5a:	2e00      	cmp	r6, #0
 8003e5c:	dcf2      	bgt.n	8003e44 <__ieee754_pow+0x1f4>
 8003e5e:	e777      	b.n	8003d50 <__ieee754_pow+0x100>
 8003e60:	8800759c 	.word	0x8800759c
 8003e64:	7e37e43c 	.word	0x7e37e43c
 8003e68:	7ff00000 	.word	0x7ff00000
 8003e6c:	08004d35 	.word	0x08004d35
 8003e70:	433fffff 	.word	0x433fffff
 8003e74:	3ff00000 	.word	0x3ff00000
 8003e78:	3fefffff 	.word	0x3fefffff
 8003e7c:	3fe00000 	.word	0x3fe00000
 8003e80:	41e00000 	.word	0x41e00000
 8003e84:	4661      	mov	r1, ip
 8003e86:	2200      	movs	r2, #0
 8003e88:	4658      	mov	r0, fp
 8003e8a:	4b61      	ldr	r3, [pc, #388]	; (8004010 <__ieee754_pow+0x3c0>)
 8003e8c:	f7fc f96c 	bl	8000168 <__aeabi_dsub>
 8003e90:	a355      	add	r3, pc, #340	; (adr r3, 8003fe8 <__ieee754_pow+0x398>)
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	4604      	mov	r4, r0
 8003e98:	460d      	mov	r5, r1
 8003e9a:	f7fc fb1d 	bl	80004d8 <__aeabi_dmul>
 8003e9e:	a354      	add	r3, pc, #336	; (adr r3, 8003ff0 <__ieee754_pow+0x3a0>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460f      	mov	r7, r1
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	f7fc fb14 	bl	80004d8 <__aeabi_dmul>
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4682      	mov	sl, r0
 8003eb4:	468b      	mov	fp, r1
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	4b56      	ldr	r3, [pc, #344]	; (8004014 <__ieee754_pow+0x3c4>)
 8003ebc:	f7fc fb0c 	bl	80004d8 <__aeabi_dmul>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	a14c      	add	r1, pc, #304	; (adr r1, 8003ff8 <__ieee754_pow+0x3a8>)
 8003ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003eca:	f7fc f94d 	bl	8000168 <__aeabi_dsub>
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	f7fc fb01 	bl	80004d8 <__aeabi_dmul>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	2000      	movs	r0, #0
 8003edc:	494e      	ldr	r1, [pc, #312]	; (8004018 <__ieee754_pow+0x3c8>)
 8003ede:	f7fc f943 	bl	8000168 <__aeabi_dsub>
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	4680      	mov	r8, r0
 8003ee8:	4689      	mov	r9, r1
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f7fc faf3 	bl	80004d8 <__aeabi_dmul>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc faed 	bl	80004d8 <__aeabi_dmul>
 8003efe:	a340      	add	r3, pc, #256	; (adr r3, 8004000 <__ieee754_pow+0x3b0>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f7fc fae8 	bl	80004d8 <__aeabi_dmul>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	4659      	mov	r1, fp
 8003f10:	f7fc f92a 	bl	8000168 <__aeabi_dsub>
 8003f14:	f04f 0a00 	mov.w	sl, #0
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	460d      	mov	r5, r1
 8003f20:	4630      	mov	r0, r6
 8003f22:	4639      	mov	r1, r7
 8003f24:	f7fc f922 	bl	800016c <__adddf3>
 8003f28:	4632      	mov	r2, r6
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	468b      	mov	fp, r1
 8003f30:	f7fc f91a 	bl	8000168 <__aeabi_dsub>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc f914 	bl	8000168 <__aeabi_dsub>
 8003f40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f44:	9b00      	ldr	r3, [sp, #0]
 8003f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f04f 0600 	mov.w	r6, #0
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	bf0c      	ite	eq
 8003f56:	4b31      	ldreq	r3, [pc, #196]	; (800401c <__ieee754_pow+0x3cc>)
 8003f58:	4b2d      	ldrne	r3, [pc, #180]	; (8004010 <__ieee754_pow+0x3c0>)
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	460d      	mov	r5, r1
 8003f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f62:	e9cd 2300 	strd	r2, r3, [sp]
 8003f66:	4632      	mov	r2, r6
 8003f68:	463b      	mov	r3, r7
 8003f6a:	f7fc f8fd 	bl	8000168 <__aeabi_dsub>
 8003f6e:	4652      	mov	r2, sl
 8003f70:	465b      	mov	r3, fp
 8003f72:	f7fc fab1 	bl	80004d8 <__aeabi_dmul>
 8003f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f7a:	4680      	mov	r8, r0
 8003f7c:	4689      	mov	r9, r1
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7fc faa9 	bl	80004d8 <__aeabi_dmul>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	f7fc f8ed 	bl	800016c <__adddf3>
 8003f92:	4632      	mov	r2, r6
 8003f94:	463b      	mov	r3, r7
 8003f96:	4680      	mov	r8, r0
 8003f98:	4689      	mov	r9, r1
 8003f9a:	4650      	mov	r0, sl
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	f7fc fa9b 	bl	80004d8 <__aeabi_dmul>
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	460d      	mov	r5, r1
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4649      	mov	r1, r9
 8003fac:	4640      	mov	r0, r8
 8003fae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003fb2:	f7fc f8db 	bl	800016c <__adddf3>
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <__ieee754_pow+0x3d0>)
 8003fb8:	4682      	mov	sl, r0
 8003fba:	4299      	cmp	r1, r3
 8003fbc:	460f      	mov	r7, r1
 8003fbe:	460e      	mov	r6, r1
 8003fc0:	f340 82ed 	ble.w	800459e <__ieee754_pow+0x94e>
 8003fc4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003fc8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003fcc:	4303      	orrs	r3, r0
 8003fce:	f000 81e7 	beq.w	80043a0 <__ieee754_pow+0x750>
 8003fd2:	a30d      	add	r3, pc, #52	; (adr r3, 8004008 <__ieee754_pow+0x3b8>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fdc:	f7fc fa7c 	bl	80004d8 <__aeabi_dmul>
 8003fe0:	a309      	add	r3, pc, #36	; (adr r3, 8004008 <__ieee754_pow+0x3b8>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	e6cc      	b.n	8003d82 <__ieee754_pow+0x132>
 8003fe8:	60000000 	.word	0x60000000
 8003fec:	3ff71547 	.word	0x3ff71547
 8003ff0:	f85ddf44 	.word	0xf85ddf44
 8003ff4:	3e54ae0b 	.word	0x3e54ae0b
 8003ff8:	55555555 	.word	0x55555555
 8003ffc:	3fd55555 	.word	0x3fd55555
 8004000:	652b82fe 	.word	0x652b82fe
 8004004:	3ff71547 	.word	0x3ff71547
 8004008:	8800759c 	.word	0x8800759c
 800400c:	7e37e43c 	.word	0x7e37e43c
 8004010:	3ff00000 	.word	0x3ff00000
 8004014:	3fd00000 	.word	0x3fd00000
 8004018:	3fe00000 	.word	0x3fe00000
 800401c:	bff00000 	.word	0xbff00000
 8004020:	408fffff 	.word	0x408fffff
 8004024:	4bd4      	ldr	r3, [pc, #848]	; (8004378 <__ieee754_pow+0x728>)
 8004026:	2200      	movs	r2, #0
 8004028:	ea09 0303 	and.w	r3, r9, r3
 800402c:	b943      	cbnz	r3, 8004040 <__ieee754_pow+0x3f0>
 800402e:	4658      	mov	r0, fp
 8004030:	4661      	mov	r1, ip
 8004032:	4bd2      	ldr	r3, [pc, #840]	; (800437c <__ieee754_pow+0x72c>)
 8004034:	f7fc fa50 	bl	80004d8 <__aeabi_dmul>
 8004038:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800403c:	4683      	mov	fp, r0
 800403e:	460c      	mov	r4, r1
 8004040:	1523      	asrs	r3, r4, #20
 8004042:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004046:	4413      	add	r3, r2
 8004048:	930b      	str	r3, [sp, #44]	; 0x2c
 800404a:	4bcd      	ldr	r3, [pc, #820]	; (8004380 <__ieee754_pow+0x730>)
 800404c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004050:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004054:	429c      	cmp	r4, r3
 8004056:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800405a:	dd08      	ble.n	800406e <__ieee754_pow+0x41e>
 800405c:	4bc9      	ldr	r3, [pc, #804]	; (8004384 <__ieee754_pow+0x734>)
 800405e:	429c      	cmp	r4, r3
 8004060:	f340 819c 	ble.w	800439c <__ieee754_pow+0x74c>
 8004064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004066:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800406a:	3301      	adds	r3, #1
 800406c:	930b      	str	r3, [sp, #44]	; 0x2c
 800406e:	2600      	movs	r6, #0
 8004070:	00f3      	lsls	r3, r6, #3
 8004072:	930d      	str	r3, [sp, #52]	; 0x34
 8004074:	4bc4      	ldr	r3, [pc, #784]	; (8004388 <__ieee754_pow+0x738>)
 8004076:	4658      	mov	r0, fp
 8004078:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800407c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004080:	4629      	mov	r1, r5
 8004082:	461a      	mov	r2, r3
 8004084:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004088:	4623      	mov	r3, r4
 800408a:	f7fc f86d 	bl	8000168 <__aeabi_dsub>
 800408e:	46da      	mov	sl, fp
 8004090:	462b      	mov	r3, r5
 8004092:	4652      	mov	r2, sl
 8004094:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004098:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800409c:	f7fc f866 	bl	800016c <__adddf3>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	2000      	movs	r0, #0
 80040a6:	49b9      	ldr	r1, [pc, #740]	; (800438c <__ieee754_pow+0x73c>)
 80040a8:	f7fc fb40 	bl	800072c <__aeabi_ddiv>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80040b8:	f7fc fa0e 	bl	80004d8 <__aeabi_dmul>
 80040bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040c0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80040c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040c8:	2300      	movs	r3, #0
 80040ca:	2200      	movs	r2, #0
 80040cc:	46ab      	mov	fp, r5
 80040ce:	106d      	asrs	r5, r5, #1
 80040d0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80040d4:	9304      	str	r3, [sp, #16]
 80040d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80040da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80040de:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80040e2:	4640      	mov	r0, r8
 80040e4:	4649      	mov	r1, r9
 80040e6:	4614      	mov	r4, r2
 80040e8:	461d      	mov	r5, r3
 80040ea:	f7fc f9f5 	bl	80004d8 <__aeabi_dmul>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80040f6:	f7fc f837 	bl	8000168 <__aeabi_dsub>
 80040fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040fe:	4606      	mov	r6, r0
 8004100:	460f      	mov	r7, r1
 8004102:	4620      	mov	r0, r4
 8004104:	4629      	mov	r1, r5
 8004106:	f7fc f82f 	bl	8000168 <__aeabi_dsub>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4650      	mov	r0, sl
 8004110:	4659      	mov	r1, fp
 8004112:	f7fc f829 	bl	8000168 <__aeabi_dsub>
 8004116:	4642      	mov	r2, r8
 8004118:	464b      	mov	r3, r9
 800411a:	f7fc f9dd 	bl	80004d8 <__aeabi_dmul>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4630      	mov	r0, r6
 8004124:	4639      	mov	r1, r7
 8004126:	f7fc f81f 	bl	8000168 <__aeabi_dsub>
 800412a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800412e:	f7fc f9d3 	bl	80004d8 <__aeabi_dmul>
 8004132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004136:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800413a:	4610      	mov	r0, r2
 800413c:	4619      	mov	r1, r3
 800413e:	f7fc f9cb 	bl	80004d8 <__aeabi_dmul>
 8004142:	a37b      	add	r3, pc, #492	; (adr r3, 8004330 <__ieee754_pow+0x6e0>)
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	4604      	mov	r4, r0
 800414a:	460d      	mov	r5, r1
 800414c:	f7fc f9c4 	bl	80004d8 <__aeabi_dmul>
 8004150:	a379      	add	r3, pc, #484	; (adr r3, 8004338 <__ieee754_pow+0x6e8>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f7fc f809 	bl	800016c <__adddf3>
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f7fc f9bb 	bl	80004d8 <__aeabi_dmul>
 8004162:	a377      	add	r3, pc, #476	; (adr r3, 8004340 <__ieee754_pow+0x6f0>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f7fc f800 	bl	800016c <__adddf3>
 800416c:	4622      	mov	r2, r4
 800416e:	462b      	mov	r3, r5
 8004170:	f7fc f9b2 	bl	80004d8 <__aeabi_dmul>
 8004174:	a374      	add	r3, pc, #464	; (adr r3, 8004348 <__ieee754_pow+0x6f8>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fb fff7 	bl	800016c <__adddf3>
 800417e:	4622      	mov	r2, r4
 8004180:	462b      	mov	r3, r5
 8004182:	f7fc f9a9 	bl	80004d8 <__aeabi_dmul>
 8004186:	a372      	add	r3, pc, #456	; (adr r3, 8004350 <__ieee754_pow+0x700>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f7fb ffee 	bl	800016c <__adddf3>
 8004190:	4622      	mov	r2, r4
 8004192:	462b      	mov	r3, r5
 8004194:	f7fc f9a0 	bl	80004d8 <__aeabi_dmul>
 8004198:	a36f      	add	r3, pc, #444	; (adr r3, 8004358 <__ieee754_pow+0x708>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f7fb ffe5 	bl	800016c <__adddf3>
 80041a2:	4622      	mov	r2, r4
 80041a4:	4606      	mov	r6, r0
 80041a6:	460f      	mov	r7, r1
 80041a8:	462b      	mov	r3, r5
 80041aa:	4620      	mov	r0, r4
 80041ac:	4629      	mov	r1, r5
 80041ae:	f7fc f993 	bl	80004d8 <__aeabi_dmul>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4630      	mov	r0, r6
 80041b8:	4639      	mov	r1, r7
 80041ba:	f7fc f98d 	bl	80004d8 <__aeabi_dmul>
 80041be:	4604      	mov	r4, r0
 80041c0:	460d      	mov	r5, r1
 80041c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041c6:	4642      	mov	r2, r8
 80041c8:	464b      	mov	r3, r9
 80041ca:	f7fb ffcf 	bl	800016c <__adddf3>
 80041ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041d2:	f7fc f981 	bl	80004d8 <__aeabi_dmul>
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	f7fb ffc7 	bl	800016c <__adddf3>
 80041de:	4642      	mov	r2, r8
 80041e0:	4606      	mov	r6, r0
 80041e2:	460f      	mov	r7, r1
 80041e4:	464b      	mov	r3, r9
 80041e6:	4640      	mov	r0, r8
 80041e8:	4649      	mov	r1, r9
 80041ea:	f7fc f975 	bl	80004d8 <__aeabi_dmul>
 80041ee:	2200      	movs	r2, #0
 80041f0:	4b67      	ldr	r3, [pc, #412]	; (8004390 <__ieee754_pow+0x740>)
 80041f2:	4682      	mov	sl, r0
 80041f4:	468b      	mov	fp, r1
 80041f6:	f7fb ffb9 	bl	800016c <__adddf3>
 80041fa:	4632      	mov	r2, r6
 80041fc:	463b      	mov	r3, r7
 80041fe:	f7fb ffb5 	bl	800016c <__adddf3>
 8004202:	9c04      	ldr	r4, [sp, #16]
 8004204:	460d      	mov	r5, r1
 8004206:	4622      	mov	r2, r4
 8004208:	460b      	mov	r3, r1
 800420a:	4640      	mov	r0, r8
 800420c:	4649      	mov	r1, r9
 800420e:	f7fc f963 	bl	80004d8 <__aeabi_dmul>
 8004212:	2200      	movs	r2, #0
 8004214:	4680      	mov	r8, r0
 8004216:	4689      	mov	r9, r1
 8004218:	4620      	mov	r0, r4
 800421a:	4629      	mov	r1, r5
 800421c:	4b5c      	ldr	r3, [pc, #368]	; (8004390 <__ieee754_pow+0x740>)
 800421e:	f7fb ffa3 	bl	8000168 <__aeabi_dsub>
 8004222:	4652      	mov	r2, sl
 8004224:	465b      	mov	r3, fp
 8004226:	f7fb ff9f 	bl	8000168 <__aeabi_dsub>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4630      	mov	r0, r6
 8004230:	4639      	mov	r1, r7
 8004232:	f7fb ff99 	bl	8000168 <__aeabi_dsub>
 8004236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800423a:	f7fc f94d 	bl	80004d8 <__aeabi_dmul>
 800423e:	4622      	mov	r2, r4
 8004240:	4606      	mov	r6, r0
 8004242:	460f      	mov	r7, r1
 8004244:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004248:	462b      	mov	r3, r5
 800424a:	f7fc f945 	bl	80004d8 <__aeabi_dmul>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4630      	mov	r0, r6
 8004254:	4639      	mov	r1, r7
 8004256:	f7fb ff89 	bl	800016c <__adddf3>
 800425a:	4606      	mov	r6, r0
 800425c:	460f      	mov	r7, r1
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4640      	mov	r0, r8
 8004264:	4649      	mov	r1, r9
 8004266:	f7fb ff81 	bl	800016c <__adddf3>
 800426a:	a33d      	add	r3, pc, #244	; (adr r3, 8004360 <__ieee754_pow+0x710>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	9c04      	ldr	r4, [sp, #16]
 8004272:	460d      	mov	r5, r1
 8004274:	4620      	mov	r0, r4
 8004276:	f7fc f92f 	bl	80004d8 <__aeabi_dmul>
 800427a:	4642      	mov	r2, r8
 800427c:	464b      	mov	r3, r9
 800427e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	f7fb ff6f 	bl	8000168 <__aeabi_dsub>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4630      	mov	r0, r6
 8004290:	4639      	mov	r1, r7
 8004292:	f7fb ff69 	bl	8000168 <__aeabi_dsub>
 8004296:	a334      	add	r3, pc, #208	; (adr r3, 8004368 <__ieee754_pow+0x718>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fc f91c 	bl	80004d8 <__aeabi_dmul>
 80042a0:	a333      	add	r3, pc, #204	; (adr r3, 8004370 <__ieee754_pow+0x720>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	4606      	mov	r6, r0
 80042a8:	460f      	mov	r7, r1
 80042aa:	4620      	mov	r0, r4
 80042ac:	4629      	mov	r1, r5
 80042ae:	f7fc f913 	bl	80004d8 <__aeabi_dmul>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4630      	mov	r0, r6
 80042b8:	4639      	mov	r1, r7
 80042ba:	f7fb ff57 	bl	800016c <__adddf3>
 80042be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042c0:	4b34      	ldr	r3, [pc, #208]	; (8004394 <__ieee754_pow+0x744>)
 80042c2:	4413      	add	r3, r2
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fb ff50 	bl	800016c <__adddf3>
 80042cc:	4680      	mov	r8, r0
 80042ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042d0:	4689      	mov	r9, r1
 80042d2:	f7fc f897 	bl	8000404 <__aeabi_i2d>
 80042d6:	4604      	mov	r4, r0
 80042d8:	460d      	mov	r5, r1
 80042da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042dc:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <__ieee754_pow+0x748>)
 80042de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042e2:	4413      	add	r3, r2
 80042e4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	f7fb ff3e 	bl	800016c <__adddf3>
 80042f0:	4632      	mov	r2, r6
 80042f2:	463b      	mov	r3, r7
 80042f4:	f7fb ff3a 	bl	800016c <__adddf3>
 80042f8:	4622      	mov	r2, r4
 80042fa:	462b      	mov	r3, r5
 80042fc:	f7fb ff36 	bl	800016c <__adddf3>
 8004300:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004304:	4622      	mov	r2, r4
 8004306:	462b      	mov	r3, r5
 8004308:	4650      	mov	r0, sl
 800430a:	468b      	mov	fp, r1
 800430c:	f7fb ff2c 	bl	8000168 <__aeabi_dsub>
 8004310:	4632      	mov	r2, r6
 8004312:	463b      	mov	r3, r7
 8004314:	f7fb ff28 	bl	8000168 <__aeabi_dsub>
 8004318:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800431c:	f7fb ff24 	bl	8000168 <__aeabi_dsub>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4640      	mov	r0, r8
 8004326:	4649      	mov	r1, r9
 8004328:	e608      	b.n	8003f3c <__ieee754_pow+0x2ec>
 800432a:	bf00      	nop
 800432c:	f3af 8000 	nop.w
 8004330:	4a454eef 	.word	0x4a454eef
 8004334:	3fca7e28 	.word	0x3fca7e28
 8004338:	93c9db65 	.word	0x93c9db65
 800433c:	3fcd864a 	.word	0x3fcd864a
 8004340:	a91d4101 	.word	0xa91d4101
 8004344:	3fd17460 	.word	0x3fd17460
 8004348:	518f264d 	.word	0x518f264d
 800434c:	3fd55555 	.word	0x3fd55555
 8004350:	db6fabff 	.word	0xdb6fabff
 8004354:	3fdb6db6 	.word	0x3fdb6db6
 8004358:	33333303 	.word	0x33333303
 800435c:	3fe33333 	.word	0x3fe33333
 8004360:	e0000000 	.word	0xe0000000
 8004364:	3feec709 	.word	0x3feec709
 8004368:	dc3a03fd 	.word	0xdc3a03fd
 800436c:	3feec709 	.word	0x3feec709
 8004370:	145b01f5 	.word	0x145b01f5
 8004374:	be3e2fe0 	.word	0xbe3e2fe0
 8004378:	7ff00000 	.word	0x7ff00000
 800437c:	43400000 	.word	0x43400000
 8004380:	0003988e 	.word	0x0003988e
 8004384:	000bb679 	.word	0x000bb679
 8004388:	08004dc8 	.word	0x08004dc8
 800438c:	3ff00000 	.word	0x3ff00000
 8004390:	40080000 	.word	0x40080000
 8004394:	08004de8 	.word	0x08004de8
 8004398:	08004dd8 	.word	0x08004dd8
 800439c:	2601      	movs	r6, #1
 800439e:	e667      	b.n	8004070 <__ieee754_pow+0x420>
 80043a0:	a39d      	add	r3, pc, #628	; (adr r3, 8004618 <__ieee754_pow+0x9c8>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	4640      	mov	r0, r8
 80043a8:	4649      	mov	r1, r9
 80043aa:	f7fb fedf 	bl	800016c <__adddf3>
 80043ae:	4622      	mov	r2, r4
 80043b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043b4:	462b      	mov	r3, r5
 80043b6:	4650      	mov	r0, sl
 80043b8:	4639      	mov	r1, r7
 80043ba:	f7fb fed5 	bl	8000168 <__aeabi_dsub>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043c6:	f7fc fb17 	bl	80009f8 <__aeabi_dcmpgt>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	f47f ae01 	bne.w	8003fd2 <__ieee754_pow+0x382>
 80043d0:	4aa5      	ldr	r2, [pc, #660]	; (8004668 <__ieee754_pow+0xa18>)
 80043d2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f340 8103 	ble.w	80045e2 <__ieee754_pow+0x992>
 80043dc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80043e0:	2000      	movs	r0, #0
 80043e2:	151b      	asrs	r3, r3, #20
 80043e4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80043e8:	fa4a f303 	asr.w	r3, sl, r3
 80043ec:	4433      	add	r3, r6
 80043ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80043f2:	4f9e      	ldr	r7, [pc, #632]	; (800466c <__ieee754_pow+0xa1c>)
 80043f4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80043f8:	4117      	asrs	r7, r2
 80043fa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80043fe:	ea23 0107 	bic.w	r1, r3, r7
 8004402:	f1c2 0214 	rsb	r2, r2, #20
 8004406:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800440a:	460b      	mov	r3, r1
 800440c:	fa4a fa02 	asr.w	sl, sl, r2
 8004410:	2e00      	cmp	r6, #0
 8004412:	4602      	mov	r2, r0
 8004414:	4629      	mov	r1, r5
 8004416:	4620      	mov	r0, r4
 8004418:	bfb8      	it	lt
 800441a:	f1ca 0a00 	rsblt	sl, sl, #0
 800441e:	f7fb fea3 	bl	8000168 <__aeabi_dsub>
 8004422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800442a:	2400      	movs	r4, #0
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	f7fb fe9c 	bl	800016c <__adddf3>
 8004434:	a37a      	add	r3, pc, #488	; (adr r3, 8004620 <__ieee754_pow+0x9d0>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	4620      	mov	r0, r4
 800443c:	460d      	mov	r5, r1
 800443e:	f7fc f84b 	bl	80004d8 <__aeabi_dmul>
 8004442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004446:	4606      	mov	r6, r0
 8004448:	460f      	mov	r7, r1
 800444a:	4620      	mov	r0, r4
 800444c:	4629      	mov	r1, r5
 800444e:	f7fb fe8b 	bl	8000168 <__aeabi_dsub>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4640      	mov	r0, r8
 8004458:	4649      	mov	r1, r9
 800445a:	f7fb fe85 	bl	8000168 <__aeabi_dsub>
 800445e:	a372      	add	r3, pc, #456	; (adr r3, 8004628 <__ieee754_pow+0x9d8>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f7fc f838 	bl	80004d8 <__aeabi_dmul>
 8004468:	a371      	add	r3, pc, #452	; (adr r3, 8004630 <__ieee754_pow+0x9e0>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	4680      	mov	r8, r0
 8004470:	4689      	mov	r9, r1
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f7fc f82f 	bl	80004d8 <__aeabi_dmul>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4640      	mov	r0, r8
 8004480:	4649      	mov	r1, r9
 8004482:	f7fb fe73 	bl	800016c <__adddf3>
 8004486:	4604      	mov	r4, r0
 8004488:	460d      	mov	r5, r1
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	f7fb fe6b 	bl	800016c <__adddf3>
 8004496:	4632      	mov	r2, r6
 8004498:	463b      	mov	r3, r7
 800449a:	4680      	mov	r8, r0
 800449c:	4689      	mov	r9, r1
 800449e:	f7fb fe63 	bl	8000168 <__aeabi_dsub>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4620      	mov	r0, r4
 80044a8:	4629      	mov	r1, r5
 80044aa:	f7fb fe5d 	bl	8000168 <__aeabi_dsub>
 80044ae:	4642      	mov	r2, r8
 80044b0:	4606      	mov	r6, r0
 80044b2:	460f      	mov	r7, r1
 80044b4:	464b      	mov	r3, r9
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fc f80d 	bl	80004d8 <__aeabi_dmul>
 80044be:	a35e      	add	r3, pc, #376	; (adr r3, 8004638 <__ieee754_pow+0x9e8>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	4604      	mov	r4, r0
 80044c6:	460d      	mov	r5, r1
 80044c8:	f7fc f806 	bl	80004d8 <__aeabi_dmul>
 80044cc:	a35c      	add	r3, pc, #368	; (adr r3, 8004640 <__ieee754_pow+0x9f0>)
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	f7fb fe49 	bl	8000168 <__aeabi_dsub>
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	f7fb fffd 	bl	80004d8 <__aeabi_dmul>
 80044de:	a35a      	add	r3, pc, #360	; (adr r3, 8004648 <__ieee754_pow+0x9f8>)
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f7fb fe42 	bl	800016c <__adddf3>
 80044e8:	4622      	mov	r2, r4
 80044ea:	462b      	mov	r3, r5
 80044ec:	f7fb fff4 	bl	80004d8 <__aeabi_dmul>
 80044f0:	a357      	add	r3, pc, #348	; (adr r3, 8004650 <__ieee754_pow+0xa00>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f7fb fe37 	bl	8000168 <__aeabi_dsub>
 80044fa:	4622      	mov	r2, r4
 80044fc:	462b      	mov	r3, r5
 80044fe:	f7fb ffeb 	bl	80004d8 <__aeabi_dmul>
 8004502:	a355      	add	r3, pc, #340	; (adr r3, 8004658 <__ieee754_pow+0xa08>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f7fb fe30 	bl	800016c <__adddf3>
 800450c:	4622      	mov	r2, r4
 800450e:	462b      	mov	r3, r5
 8004510:	f7fb ffe2 	bl	80004d8 <__aeabi_dmul>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4640      	mov	r0, r8
 800451a:	4649      	mov	r1, r9
 800451c:	f7fb fe24 	bl	8000168 <__aeabi_dsub>
 8004520:	4604      	mov	r4, r0
 8004522:	460d      	mov	r5, r1
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4640      	mov	r0, r8
 800452a:	4649      	mov	r1, r9
 800452c:	f7fb ffd4 	bl	80004d8 <__aeabi_dmul>
 8004530:	2200      	movs	r2, #0
 8004532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800453a:	4620      	mov	r0, r4
 800453c:	4629      	mov	r1, r5
 800453e:	f7fb fe13 	bl	8000168 <__aeabi_dsub>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800454a:	f7fc f8ef 	bl	800072c <__aeabi_ddiv>
 800454e:	4632      	mov	r2, r6
 8004550:	4604      	mov	r4, r0
 8004552:	460d      	mov	r5, r1
 8004554:	463b      	mov	r3, r7
 8004556:	4640      	mov	r0, r8
 8004558:	4649      	mov	r1, r9
 800455a:	f7fb ffbd 	bl	80004d8 <__aeabi_dmul>
 800455e:	4632      	mov	r2, r6
 8004560:	463b      	mov	r3, r7
 8004562:	f7fb fe03 	bl	800016c <__adddf3>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4620      	mov	r0, r4
 800456c:	4629      	mov	r1, r5
 800456e:	f7fb fdfb 	bl	8000168 <__aeabi_dsub>
 8004572:	4642      	mov	r2, r8
 8004574:	464b      	mov	r3, r9
 8004576:	f7fb fdf7 	bl	8000168 <__aeabi_dsub>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	2000      	movs	r0, #0
 8004580:	493b      	ldr	r1, [pc, #236]	; (8004670 <__ieee754_pow+0xa20>)
 8004582:	f7fb fdf1 	bl	8000168 <__aeabi_dsub>
 8004586:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800458a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800458e:	da2b      	bge.n	80045e8 <__ieee754_pow+0x998>
 8004590:	4652      	mov	r2, sl
 8004592:	f000 f9b5 	bl	8004900 <scalbn>
 8004596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800459a:	f7ff bbf2 	b.w	8003d82 <__ieee754_pow+0x132>
 800459e:	4b35      	ldr	r3, [pc, #212]	; (8004674 <__ieee754_pow+0xa24>)
 80045a0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80045a4:	429f      	cmp	r7, r3
 80045a6:	f77f af13 	ble.w	80043d0 <__ieee754_pow+0x780>
 80045aa:	4b33      	ldr	r3, [pc, #204]	; (8004678 <__ieee754_pow+0xa28>)
 80045ac:	440b      	add	r3, r1
 80045ae:	4303      	orrs	r3, r0
 80045b0:	d00b      	beq.n	80045ca <__ieee754_pow+0x97a>
 80045b2:	a32b      	add	r3, pc, #172	; (adr r3, 8004660 <__ieee754_pow+0xa10>)
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045bc:	f7fb ff8c 	bl	80004d8 <__aeabi_dmul>
 80045c0:	a327      	add	r3, pc, #156	; (adr r3, 8004660 <__ieee754_pow+0xa10>)
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f7ff bbdc 	b.w	8003d82 <__ieee754_pow+0x132>
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	f7fb fdcb 	bl	8000168 <__aeabi_dsub>
 80045d2:	4642      	mov	r2, r8
 80045d4:	464b      	mov	r3, r9
 80045d6:	f7fc fa05 	bl	80009e4 <__aeabi_dcmpge>
 80045da:	2800      	cmp	r0, #0
 80045dc:	f43f aef8 	beq.w	80043d0 <__ieee754_pow+0x780>
 80045e0:	e7e7      	b.n	80045b2 <__ieee754_pow+0x962>
 80045e2:	f04f 0a00 	mov.w	sl, #0
 80045e6:	e71e      	b.n	8004426 <__ieee754_pow+0x7d6>
 80045e8:	4621      	mov	r1, r4
 80045ea:	e7d4      	b.n	8004596 <__ieee754_pow+0x946>
 80045ec:	f04f 0b00 	mov.w	fp, #0
 80045f0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8004670 <__ieee754_pow+0xa20>
 80045f4:	f7ff bbb0 	b.w	8003d58 <__ieee754_pow+0x108>
 80045f8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80045fc:	f7ff bbac 	b.w	8003d58 <__ieee754_pow+0x108>
 8004600:	4638      	mov	r0, r7
 8004602:	4641      	mov	r1, r8
 8004604:	f7ff bbbf 	b.w	8003d86 <__ieee754_pow+0x136>
 8004608:	9200      	str	r2, [sp, #0]
 800460a:	f7ff bb7f 	b.w	8003d0c <__ieee754_pow+0xbc>
 800460e:	2300      	movs	r3, #0
 8004610:	f7ff bb69 	b.w	8003ce6 <__ieee754_pow+0x96>
 8004614:	f3af 8000 	nop.w
 8004618:	652b82fe 	.word	0x652b82fe
 800461c:	3c971547 	.word	0x3c971547
 8004620:	00000000 	.word	0x00000000
 8004624:	3fe62e43 	.word	0x3fe62e43
 8004628:	fefa39ef 	.word	0xfefa39ef
 800462c:	3fe62e42 	.word	0x3fe62e42
 8004630:	0ca86c39 	.word	0x0ca86c39
 8004634:	be205c61 	.word	0xbe205c61
 8004638:	72bea4d0 	.word	0x72bea4d0
 800463c:	3e663769 	.word	0x3e663769
 8004640:	c5d26bf1 	.word	0xc5d26bf1
 8004644:	3ebbbd41 	.word	0x3ebbbd41
 8004648:	af25de2c 	.word	0xaf25de2c
 800464c:	3f11566a 	.word	0x3f11566a
 8004650:	16bebd93 	.word	0x16bebd93
 8004654:	3f66c16c 	.word	0x3f66c16c
 8004658:	5555553e 	.word	0x5555553e
 800465c:	3fc55555 	.word	0x3fc55555
 8004660:	c2f8f359 	.word	0xc2f8f359
 8004664:	01a56e1f 	.word	0x01a56e1f
 8004668:	3fe00000 	.word	0x3fe00000
 800466c:	000fffff 	.word	0x000fffff
 8004670:	3ff00000 	.word	0x3ff00000
 8004674:	4090cbff 	.word	0x4090cbff
 8004678:	3f6f3400 	.word	0x3f6f3400

0800467c <__ieee754_sqrt>:
 800467c:	f8df c150 	ldr.w	ip, [pc, #336]	; 80047d0 <__ieee754_sqrt+0x154>
 8004680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004684:	ea3c 0c01 	bics.w	ip, ip, r1
 8004688:	460b      	mov	r3, r1
 800468a:	4606      	mov	r6, r0
 800468c:	460d      	mov	r5, r1
 800468e:	460a      	mov	r2, r1
 8004690:	4607      	mov	r7, r0
 8004692:	4604      	mov	r4, r0
 8004694:	d10e      	bne.n	80046b4 <__ieee754_sqrt+0x38>
 8004696:	4602      	mov	r2, r0
 8004698:	f7fb ff1e 	bl	80004d8 <__aeabi_dmul>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4630      	mov	r0, r6
 80046a2:	4629      	mov	r1, r5
 80046a4:	f7fb fd62 	bl	800016c <__adddf3>
 80046a8:	4606      	mov	r6, r0
 80046aa:	460d      	mov	r5, r1
 80046ac:	4630      	mov	r0, r6
 80046ae:	4629      	mov	r1, r5
 80046b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b4:	2900      	cmp	r1, #0
 80046b6:	dc0d      	bgt.n	80046d4 <__ieee754_sqrt+0x58>
 80046b8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80046bc:	ea5c 0707 	orrs.w	r7, ip, r7
 80046c0:	d0f4      	beq.n	80046ac <__ieee754_sqrt+0x30>
 80046c2:	b139      	cbz	r1, 80046d4 <__ieee754_sqrt+0x58>
 80046c4:	4602      	mov	r2, r0
 80046c6:	f7fb fd4f 	bl	8000168 <__aeabi_dsub>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	f7fc f82d 	bl	800072c <__aeabi_ddiv>
 80046d2:	e7e9      	b.n	80046a8 <__ieee754_sqrt+0x2c>
 80046d4:	1512      	asrs	r2, r2, #20
 80046d6:	d074      	beq.n	80047c2 <__ieee754_sqrt+0x146>
 80046d8:	2000      	movs	r0, #0
 80046da:	07d5      	lsls	r5, r2, #31
 80046dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80046e4:	bf5e      	ittt	pl
 80046e6:	0fe3      	lsrpl	r3, r4, #31
 80046e8:	0064      	lslpl	r4, r4, #1
 80046ea:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80046ee:	0fe3      	lsrs	r3, r4, #31
 80046f0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80046f4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80046f8:	2516      	movs	r5, #22
 80046fa:	4601      	mov	r1, r0
 80046fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004700:	1076      	asrs	r6, r6, #1
 8004702:	0064      	lsls	r4, r4, #1
 8004704:	188f      	adds	r7, r1, r2
 8004706:	429f      	cmp	r7, r3
 8004708:	bfde      	ittt	le
 800470a:	1bdb      	suble	r3, r3, r7
 800470c:	18b9      	addle	r1, r7, r2
 800470e:	1880      	addle	r0, r0, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	3d01      	subs	r5, #1
 8004714:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004718:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800471c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004720:	d1f0      	bne.n	8004704 <__ieee754_sqrt+0x88>
 8004722:	462a      	mov	r2, r5
 8004724:	f04f 0e20 	mov.w	lr, #32
 8004728:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800472c:	428b      	cmp	r3, r1
 800472e:	eb07 0c05 	add.w	ip, r7, r5
 8004732:	dc02      	bgt.n	800473a <__ieee754_sqrt+0xbe>
 8004734:	d113      	bne.n	800475e <__ieee754_sqrt+0xe2>
 8004736:	45a4      	cmp	ip, r4
 8004738:	d811      	bhi.n	800475e <__ieee754_sqrt+0xe2>
 800473a:	f1bc 0f00 	cmp.w	ip, #0
 800473e:	eb0c 0507 	add.w	r5, ip, r7
 8004742:	da43      	bge.n	80047cc <__ieee754_sqrt+0x150>
 8004744:	2d00      	cmp	r5, #0
 8004746:	db41      	blt.n	80047cc <__ieee754_sqrt+0x150>
 8004748:	f101 0801 	add.w	r8, r1, #1
 800474c:	1a5b      	subs	r3, r3, r1
 800474e:	4641      	mov	r1, r8
 8004750:	45a4      	cmp	ip, r4
 8004752:	bf88      	it	hi
 8004754:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004758:	eba4 040c 	sub.w	r4, r4, ip
 800475c:	443a      	add	r2, r7
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	f1be 0e01 	subs.w	lr, lr, #1
 8004764:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004768:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800476c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004770:	d1dc      	bne.n	800472c <__ieee754_sqrt+0xb0>
 8004772:	4323      	orrs	r3, r4
 8004774:	d006      	beq.n	8004784 <__ieee754_sqrt+0x108>
 8004776:	1c54      	adds	r4, r2, #1
 8004778:	bf0b      	itete	eq
 800477a:	4672      	moveq	r2, lr
 800477c:	3201      	addne	r2, #1
 800477e:	3001      	addeq	r0, #1
 8004780:	f022 0201 	bicne.w	r2, r2, #1
 8004784:	1043      	asrs	r3, r0, #1
 8004786:	07c1      	lsls	r1, r0, #31
 8004788:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800478c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004790:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004794:	bf48      	it	mi
 8004796:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800479a:	4610      	mov	r0, r2
 800479c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80047a0:	e782      	b.n	80046a8 <__ieee754_sqrt+0x2c>
 80047a2:	0ae3      	lsrs	r3, r4, #11
 80047a4:	3915      	subs	r1, #21
 80047a6:	0564      	lsls	r4, r4, #21
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0fa      	beq.n	80047a2 <__ieee754_sqrt+0x126>
 80047ac:	02de      	lsls	r6, r3, #11
 80047ae:	d50a      	bpl.n	80047c6 <__ieee754_sqrt+0x14a>
 80047b0:	f1c2 0020 	rsb	r0, r2, #32
 80047b4:	fa24 f000 	lsr.w	r0, r4, r0
 80047b8:	1e55      	subs	r5, r2, #1
 80047ba:	4094      	lsls	r4, r2
 80047bc:	4303      	orrs	r3, r0
 80047be:	1b4a      	subs	r2, r1, r5
 80047c0:	e78a      	b.n	80046d8 <__ieee754_sqrt+0x5c>
 80047c2:	4611      	mov	r1, r2
 80047c4:	e7f0      	b.n	80047a8 <__ieee754_sqrt+0x12c>
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	3201      	adds	r2, #1
 80047ca:	e7ef      	b.n	80047ac <__ieee754_sqrt+0x130>
 80047cc:	4688      	mov	r8, r1
 80047ce:	e7bd      	b.n	800474c <__ieee754_sqrt+0xd0>
 80047d0:	7ff00000 	.word	0x7ff00000

080047d4 <fabs>:
 80047d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80047d8:	4770      	bx	lr

080047da <finite>:
 80047da:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80047de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80047e2:	0fc0      	lsrs	r0, r0, #31
 80047e4:	4770      	bx	lr
	...

080047e8 <rint>:
 80047e8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80047ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ee:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80047f2:	2f13      	cmp	r7, #19
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	460c      	mov	r4, r1
 80047fa:	4605      	mov	r5, r0
 80047fc:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8004800:	dc59      	bgt.n	80048b6 <rint+0xce>
 8004802:	2f00      	cmp	r7, #0
 8004804:	da2a      	bge.n	800485c <rint+0x74>
 8004806:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800480a:	4301      	orrs	r1, r0
 800480c:	d022      	beq.n	8004854 <rint+0x6c>
 800480e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8004812:	4301      	orrs	r1, r0
 8004814:	424d      	negs	r5, r1
 8004816:	430d      	orrs	r5, r1
 8004818:	4936      	ldr	r1, [pc, #216]	; (80048f4 <rint+0x10c>)
 800481a:	0c5c      	lsrs	r4, r3, #17
 800481c:	0b2d      	lsrs	r5, r5, #12
 800481e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8004822:	0464      	lsls	r4, r4, #17
 8004824:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004828:	ea45 0304 	orr.w	r3, r5, r4
 800482c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004830:	4620      	mov	r0, r4
 8004832:	4629      	mov	r1, r5
 8004834:	f7fb fc9a 	bl	800016c <__adddf3>
 8004838:	e9cd 0100 	strd	r0, r1, [sp]
 800483c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004840:	462b      	mov	r3, r5
 8004842:	4622      	mov	r2, r4
 8004844:	f7fb fc90 	bl	8000168 <__aeabi_dsub>
 8004848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800484c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	b003      	add	sp, #12
 800485a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800485c:	4926      	ldr	r1, [pc, #152]	; (80048f8 <rint+0x110>)
 800485e:	4139      	asrs	r1, r7
 8004860:	ea03 0001 	and.w	r0, r3, r1
 8004864:	4310      	orrs	r0, r2
 8004866:	d0f5      	beq.n	8004854 <rint+0x6c>
 8004868:	084b      	lsrs	r3, r1, #1
 800486a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800486e:	ea52 0501 	orrs.w	r5, r2, r1
 8004872:	d00c      	beq.n	800488e <rint+0xa6>
 8004874:	ea24 0303 	bic.w	r3, r4, r3
 8004878:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800487c:	2f13      	cmp	r7, #19
 800487e:	bf0c      	ite	eq
 8004880:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8004884:	2500      	movne	r5, #0
 8004886:	fa44 f707 	asr.w	r7, r4, r7
 800488a:	ea43 0407 	orr.w	r4, r3, r7
 800488e:	4919      	ldr	r1, [pc, #100]	; (80048f4 <rint+0x10c>)
 8004890:	4623      	mov	r3, r4
 8004892:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8004896:	462a      	mov	r2, r5
 8004898:	e9d6 4500 	ldrd	r4, r5, [r6]
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fb fc64 	bl	800016c <__adddf3>
 80048a4:	e9cd 0100 	strd	r0, r1, [sp]
 80048a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ac:	4622      	mov	r2, r4
 80048ae:	462b      	mov	r3, r5
 80048b0:	f7fb fc5a 	bl	8000168 <__aeabi_dsub>
 80048b4:	e7cc      	b.n	8004850 <rint+0x68>
 80048b6:	2f33      	cmp	r7, #51	; 0x33
 80048b8:	dd05      	ble.n	80048c6 <rint+0xde>
 80048ba:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80048be:	d1c9      	bne.n	8004854 <rint+0x6c>
 80048c0:	f7fb fc54 	bl	800016c <__adddf3>
 80048c4:	e7c4      	b.n	8004850 <rint+0x68>
 80048c6:	f04f 31ff 	mov.w	r1, #4294967295
 80048ca:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80048ce:	fa21 f10c 	lsr.w	r1, r1, ip
 80048d2:	4208      	tst	r0, r1
 80048d4:	d0be      	beq.n	8004854 <rint+0x6c>
 80048d6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80048da:	bf18      	it	ne
 80048dc:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80048e0:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80048e4:	bf1e      	ittt	ne
 80048e6:	ea20 0303 	bicne.w	r3, r0, r3
 80048ea:	fa45 fc0c 	asrne.w	ip, r5, ip
 80048ee:	ea43 050c 	orrne.w	r5, r3, ip
 80048f2:	e7cc      	b.n	800488e <rint+0xa6>
 80048f4:	08004df8 	.word	0x08004df8
 80048f8:	000fffff 	.word	0x000fffff
 80048fc:	00000000 	.word	0x00000000

08004900 <scalbn>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004906:	4604      	mov	r4, r0
 8004908:	460d      	mov	r5, r1
 800490a:	4617      	mov	r7, r2
 800490c:	460b      	mov	r3, r1
 800490e:	b996      	cbnz	r6, 8004936 <scalbn+0x36>
 8004910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004914:	4303      	orrs	r3, r0
 8004916:	d039      	beq.n	800498c <scalbn+0x8c>
 8004918:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <scalbn+0xf0>)
 800491a:	2200      	movs	r2, #0
 800491c:	f7fb fddc 	bl	80004d8 <__aeabi_dmul>
 8004920:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <scalbn+0xf4>)
 8004922:	4604      	mov	r4, r0
 8004924:	429f      	cmp	r7, r3
 8004926:	460d      	mov	r5, r1
 8004928:	da0f      	bge.n	800494a <scalbn+0x4a>
 800492a:	a32d      	add	r3, pc, #180	; (adr r3, 80049e0 <scalbn+0xe0>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f7fb fdd2 	bl	80004d8 <__aeabi_dmul>
 8004934:	e006      	b.n	8004944 <scalbn+0x44>
 8004936:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800493a:	4296      	cmp	r6, r2
 800493c:	d10a      	bne.n	8004954 <scalbn+0x54>
 800493e:	4602      	mov	r2, r0
 8004940:	f7fb fc14 	bl	800016c <__adddf3>
 8004944:	4604      	mov	r4, r0
 8004946:	460d      	mov	r5, r1
 8004948:	e020      	b.n	800498c <scalbn+0x8c>
 800494a:	460b      	mov	r3, r1
 800494c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004950:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004954:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004958:	19b9      	adds	r1, r7, r6
 800495a:	4291      	cmp	r1, r2
 800495c:	dd0e      	ble.n	800497c <scalbn+0x7c>
 800495e:	a322      	add	r3, pc, #136	; (adr r3, 80049e8 <scalbn+0xe8>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004968:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800496c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004970:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004974:	4820      	ldr	r0, [pc, #128]	; (80049f8 <scalbn+0xf8>)
 8004976:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800497a:	e7d9      	b.n	8004930 <scalbn+0x30>
 800497c:	2900      	cmp	r1, #0
 800497e:	dd08      	ble.n	8004992 <scalbn+0x92>
 8004980:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004988:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004992:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004996:	da16      	bge.n	80049c6 <scalbn+0xc6>
 8004998:	f24c 3350 	movw	r3, #50000	; 0xc350
 800499c:	429f      	cmp	r7, r3
 800499e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80049a2:	dd08      	ble.n	80049b6 <scalbn+0xb6>
 80049a4:	4c15      	ldr	r4, [pc, #84]	; (80049fc <scalbn+0xfc>)
 80049a6:	4814      	ldr	r0, [pc, #80]	; (80049f8 <scalbn+0xf8>)
 80049a8:	f363 74df 	bfi	r4, r3, #31, #1
 80049ac:	a30e      	add	r3, pc, #56	; (adr r3, 80049e8 <scalbn+0xe8>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	4621      	mov	r1, r4
 80049b4:	e7bc      	b.n	8004930 <scalbn+0x30>
 80049b6:	4c12      	ldr	r4, [pc, #72]	; (8004a00 <scalbn+0x100>)
 80049b8:	4812      	ldr	r0, [pc, #72]	; (8004a04 <scalbn+0x104>)
 80049ba:	f363 74df 	bfi	r4, r3, #31, #1
 80049be:	a308      	add	r3, pc, #32	; (adr r3, 80049e0 <scalbn+0xe0>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	e7f5      	b.n	80049b2 <scalbn+0xb2>
 80049c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049ca:	3136      	adds	r1, #54	; 0x36
 80049cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80049d4:	4620      	mov	r0, r4
 80049d6:	4629      	mov	r1, r5
 80049d8:	2200      	movs	r2, #0
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <scalbn+0x108>)
 80049dc:	e7a8      	b.n	8004930 <scalbn+0x30>
 80049de:	bf00      	nop
 80049e0:	c2f8f359 	.word	0xc2f8f359
 80049e4:	01a56e1f 	.word	0x01a56e1f
 80049e8:	8800759c 	.word	0x8800759c
 80049ec:	7e37e43c 	.word	0x7e37e43c
 80049f0:	43500000 	.word	0x43500000
 80049f4:	ffff3cb0 	.word	0xffff3cb0
 80049f8:	8800759c 	.word	0x8800759c
 80049fc:	7e37e43c 	.word	0x7e37e43c
 8004a00:	01a56e1f 	.word	0x01a56e1f
 8004a04:	c2f8f359 	.word	0xc2f8f359
 8004a08:	3c900000 	.word	0x3c900000

08004a0c <_init>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr

08004a18 <_fini>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr
